<?php
/**
 * EmailViewDefinitionSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\User;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * EmailViewDefinitionSetting Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailViewDefinitionSetting implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User.EmailViewDefinitionSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'localization' => 'map[string,\Bungie\Model\User\EMailSettingLocalization]',
        'setByDefault' => 'bool',
        'optInAggregateValue' => 'int',
        'subscriptions' => '\Bungie\Model\User\EmailSubscriptionDefinition[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'localization' => null,
        'setByDefault' => null,
        'optInAggregateValue' => 'int64',
        'subscriptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'localization' => 'localization',
        'setByDefault' => 'setByDefault',
        'optInAggregateValue' => 'optInAggregateValue',
        'subscriptions' => 'subscriptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'localization' => 'setLocalization',
        'setByDefault' => 'setSetByDefault',
        'optInAggregateValue' => 'setOptInAggregateValue',
        'subscriptions' => 'setSubscriptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'localization' => 'getLocalization',
        'setByDefault' => 'getSetByDefault',
        'optInAggregateValue' => 'getOptInAggregateValue',
        'subscriptions' => 'getSubscriptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['localization'] = isset($data['localization']) ? $data['localization'] : null;
        $this->container['setByDefault'] = isset($data['setByDefault']) ? $data['setByDefault'] : null;
        $this->container['optInAggregateValue'] = isset($data['optInAggregateValue']) ? $data['optInAggregateValue'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets localization
     *
     * @return map[string,\Bungie\Model\User\EMailSettingLocalization]|null
     */
    public function getLocalization()
    {
        return $this->container['localization'];
    }

    /**
     * Sets localization
     *
     * @param map[string,\Bungie\Model\User\EMailSettingLocalization]|null $localization A dictionary of localized text for the EMail setting, keyed by the locale.
     *
     * @return $this
     */
    public function setLocalization($localization)
    {
        $this->container['localization'] = $localization;

        return $this;
    }

    /**
     * Gets setByDefault
     *
     * @return bool|null
     */
    public function getSetByDefault()
    {
        return $this->container['setByDefault'];
    }

    /**
     * Sets setByDefault
     *
     * @param bool|null $setByDefault If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet.
     *
     * @return $this
     */
    public function setSetByDefault($setByDefault)
    {
        $this->container['setByDefault'] = $setByDefault;

        return $this;
    }

    /**
     * Gets optInAggregateValue
     *
     * @return int|null
     */
    public function getOptInAggregateValue()
    {
        return $this->container['optInAggregateValue'];
    }

    /**
     * Sets optInAggregateValue
     *
     * @param int|null $optInAggregateValue The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.
     *
     * @return $this
     */
    public function setOptInAggregateValue($optInAggregateValue)
    {
        $this->container['optInAggregateValue'] = $optInAggregateValue;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \Bungie\Model\User\EmailSubscriptionDefinition[]|null
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \Bungie\Model\User\EmailSubscriptionDefinition[]|null $subscriptions The subscriptions to show as children of this setting, if any.
     *
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


