<?php
/**
 * DestinyDefinitionsDestinyItemActionBlockDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyItemActionBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyItemActionBlockDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyItemActionBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'verbName' => 'string',
        'verbDescription' => 'string',
        'isPositive' => 'bool',
        'overlayScreenName' => 'string',
        'overlayIcon' => 'string',
        'requiredCooldownSeconds' => 'int',
        'requiredItems' => '\Bungie\Model\DestinyDefinitionsDestinyItemActionRequiredItemDefinition[]',
        'progressionRewards' => '\Bungie\Model\DestinyDefinitionsDestinyProgressionRewardDefinition[]',
        'actionTypeLabel' => 'string',
        'requiredLocation' => 'string',
        'requiredCooldownHash' => 'int',
        'deleteOnAction' => 'bool',
        'consumeEntireStack' => 'bool',
        'useOnAcquire' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'verbName' => null,
        'verbDescription' => null,
        'isPositive' => null,
        'overlayScreenName' => null,
        'overlayIcon' => null,
        'requiredCooldownSeconds' => 'int32',
        'requiredItems' => null,
        'progressionRewards' => null,
        'actionTypeLabel' => null,
        'requiredLocation' => null,
        'requiredCooldownHash' => 'uint32',
        'deleteOnAction' => null,
        'consumeEntireStack' => null,
        'useOnAcquire' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verbName' => 'verbName',
        'verbDescription' => 'verbDescription',
        'isPositive' => 'isPositive',
        'overlayScreenName' => 'overlayScreenName',
        'overlayIcon' => 'overlayIcon',
        'requiredCooldownSeconds' => 'requiredCooldownSeconds',
        'requiredItems' => 'requiredItems',
        'progressionRewards' => 'progressionRewards',
        'actionTypeLabel' => 'actionTypeLabel',
        'requiredLocation' => 'requiredLocation',
        'requiredCooldownHash' => 'requiredCooldownHash',
        'deleteOnAction' => 'deleteOnAction',
        'consumeEntireStack' => 'consumeEntireStack',
        'useOnAcquire' => 'useOnAcquire'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verbName' => 'setVerbName',
        'verbDescription' => 'setVerbDescription',
        'isPositive' => 'setIsPositive',
        'overlayScreenName' => 'setOverlayScreenName',
        'overlayIcon' => 'setOverlayIcon',
        'requiredCooldownSeconds' => 'setRequiredCooldownSeconds',
        'requiredItems' => 'setRequiredItems',
        'progressionRewards' => 'setProgressionRewards',
        'actionTypeLabel' => 'setActionTypeLabel',
        'requiredLocation' => 'setRequiredLocation',
        'requiredCooldownHash' => 'setRequiredCooldownHash',
        'deleteOnAction' => 'setDeleteOnAction',
        'consumeEntireStack' => 'setConsumeEntireStack',
        'useOnAcquire' => 'setUseOnAcquire'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verbName' => 'getVerbName',
        'verbDescription' => 'getVerbDescription',
        'isPositive' => 'getIsPositive',
        'overlayScreenName' => 'getOverlayScreenName',
        'overlayIcon' => 'getOverlayIcon',
        'requiredCooldownSeconds' => 'getRequiredCooldownSeconds',
        'requiredItems' => 'getRequiredItems',
        'progressionRewards' => 'getProgressionRewards',
        'actionTypeLabel' => 'getActionTypeLabel',
        'requiredLocation' => 'getRequiredLocation',
        'requiredCooldownHash' => 'getRequiredCooldownHash',
        'deleteOnAction' => 'getDeleteOnAction',
        'consumeEntireStack' => 'getConsumeEntireStack',
        'useOnAcquire' => 'getUseOnAcquire'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['verbName'] = isset($data['verbName']) ? $data['verbName'] : null;
        $this->container['verbDescription'] = isset($data['verbDescription']) ? $data['verbDescription'] : null;
        $this->container['isPositive'] = isset($data['isPositive']) ? $data['isPositive'] : null;
        $this->container['overlayScreenName'] = isset($data['overlayScreenName']) ? $data['overlayScreenName'] : null;
        $this->container['overlayIcon'] = isset($data['overlayIcon']) ? $data['overlayIcon'] : null;
        $this->container['requiredCooldownSeconds'] = isset($data['requiredCooldownSeconds']) ? $data['requiredCooldownSeconds'] : null;
        $this->container['requiredItems'] = isset($data['requiredItems']) ? $data['requiredItems'] : null;
        $this->container['progressionRewards'] = isset($data['progressionRewards']) ? $data['progressionRewards'] : null;
        $this->container['actionTypeLabel'] = isset($data['actionTypeLabel']) ? $data['actionTypeLabel'] : null;
        $this->container['requiredLocation'] = isset($data['requiredLocation']) ? $data['requiredLocation'] : null;
        $this->container['requiredCooldownHash'] = isset($data['requiredCooldownHash']) ? $data['requiredCooldownHash'] : null;
        $this->container['deleteOnAction'] = isset($data['deleteOnAction']) ? $data['deleteOnAction'] : null;
        $this->container['consumeEntireStack'] = isset($data['consumeEntireStack']) ? $data['consumeEntireStack'] : null;
        $this->container['useOnAcquire'] = isset($data['useOnAcquire']) ? $data['useOnAcquire'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets verbName
     *
     * @return string
     */
    public function getVerbName()
    {
        return $this->container['verbName'];
    }

    /**
     * Sets verbName
     *
     * @param string $verbName Localized text for the verb of the action being performed.
     *
     * @return $this
     */
    public function setVerbName($verbName)
    {
        $this->container['verbName'] = $verbName;

        return $this;
    }

    /**
     * Gets verbDescription
     *
     * @return string
     */
    public function getVerbDescription()
    {
        return $this->container['verbDescription'];
    }

    /**
     * Sets verbDescription
     *
     * @param string $verbDescription Localized text describing the action being performed.
     *
     * @return $this
     */
    public function setVerbDescription($verbDescription)
    {
        $this->container['verbDescription'] = $verbDescription;

        return $this;
    }

    /**
     * Gets isPositive
     *
     * @return bool
     */
    public function getIsPositive()
    {
        return $this->container['isPositive'];
    }

    /**
     * Sets isPositive
     *
     * @param bool $isPositive The content has this property, however it's not entirely clear how it is used.
     *
     * @return $this
     */
    public function setIsPositive($isPositive)
    {
        $this->container['isPositive'] = $isPositive;

        return $this;
    }

    /**
     * Gets overlayScreenName
     *
     * @return string
     */
    public function getOverlayScreenName()
    {
        return $this->container['overlayScreenName'];
    }

    /**
     * Sets overlayScreenName
     *
     * @param string $overlayScreenName If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.
     *
     * @return $this
     */
    public function setOverlayScreenName($overlayScreenName)
    {
        $this->container['overlayScreenName'] = $overlayScreenName;

        return $this;
    }

    /**
     * Gets overlayIcon
     *
     * @return string
     */
    public function getOverlayIcon()
    {
        return $this->container['overlayIcon'];
    }

    /**
     * Sets overlayIcon
     *
     * @param string $overlayIcon The icon associated with the overlay screen for the action, if any.
     *
     * @return $this
     */
    public function setOverlayIcon($overlayIcon)
    {
        $this->container['overlayIcon'] = $overlayIcon;

        return $this;
    }

    /**
     * Gets requiredCooldownSeconds
     *
     * @return int
     */
    public function getRequiredCooldownSeconds()
    {
        return $this->container['requiredCooldownSeconds'];
    }

    /**
     * Sets requiredCooldownSeconds
     *
     * @param int $requiredCooldownSeconds The number of seconds to delay before allowing this action to be performed again.
     *
     * @return $this
     */
    public function setRequiredCooldownSeconds($requiredCooldownSeconds)
    {
        $this->container['requiredCooldownSeconds'] = $requiredCooldownSeconds;

        return $this;
    }

    /**
     * Gets requiredItems
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyItemActionRequiredItemDefinition[]
     */
    public function getRequiredItems()
    {
        return $this->container['requiredItems'];
    }

    /**
     * Sets requiredItems
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyItemActionRequiredItemDefinition[] $requiredItems If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
     *
     * @return $this
     */
    public function setRequiredItems($requiredItems)
    {
        $this->container['requiredItems'] = $requiredItems;

        return $this;
    }

    /**
     * Gets progressionRewards
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyProgressionRewardDefinition[]
     */
    public function getProgressionRewards()
    {
        return $this->container['progressionRewards'];
    }

    /**
     * Sets progressionRewards
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyProgressionRewardDefinition[] $progressionRewards If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
     *
     * @return $this
     */
    public function setProgressionRewards($progressionRewards)
    {
        $this->container['progressionRewards'] = $progressionRewards;

        return $this;
    }

    /**
     * Gets actionTypeLabel
     *
     * @return string
     */
    public function getActionTypeLabel()
    {
        return $this->container['actionTypeLabel'];
    }

    /**
     * Sets actionTypeLabel
     *
     * @param string $actionTypeLabel The internal identifier for the action.
     *
     * @return $this
     */
    public function setActionTypeLabel($actionTypeLabel)
    {
        $this->container['actionTypeLabel'] = $actionTypeLabel;

        return $this;
    }

    /**
     * Gets requiredLocation
     *
     * @return string
     */
    public function getRequiredLocation()
    {
        return $this->container['requiredLocation'];
    }

    /**
     * Sets requiredLocation
     *
     * @param string $requiredLocation Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
     *
     * @return $this
     */
    public function setRequiredLocation($requiredLocation)
    {
        $this->container['requiredLocation'] = $requiredLocation;

        return $this;
    }

    /**
     * Gets requiredCooldownHash
     *
     * @return int
     */
    public function getRequiredCooldownHash()
    {
        return $this->container['requiredCooldownHash'];
    }

    /**
     * Sets requiredCooldownHash
     *
     * @param int $requiredCooldownHash The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
     *
     * @return $this
     */
    public function setRequiredCooldownHash($requiredCooldownHash)
    {
        $this->container['requiredCooldownHash'] = $requiredCooldownHash;

        return $this;
    }

    /**
     * Gets deleteOnAction
     *
     * @return bool
     */
    public function getDeleteOnAction()
    {
        return $this->container['deleteOnAction'];
    }

    /**
     * Sets deleteOnAction
     *
     * @param bool $deleteOnAction If true, the item is deleted when the action completes.
     *
     * @return $this
     */
    public function setDeleteOnAction($deleteOnAction)
    {
        $this->container['deleteOnAction'] = $deleteOnAction;

        return $this;
    }

    /**
     * Gets consumeEntireStack
     *
     * @return bool
     */
    public function getConsumeEntireStack()
    {
        return $this->container['consumeEntireStack'];
    }

    /**
     * Sets consumeEntireStack
     *
     * @param bool $consumeEntireStack If true, the entire stack is deleted when the action completes.
     *
     * @return $this
     */
    public function setConsumeEntireStack($consumeEntireStack)
    {
        $this->container['consumeEntireStack'] = $consumeEntireStack;

        return $this;
    }

    /**
     * Gets useOnAcquire
     *
     * @return bool
     */
    public function getUseOnAcquire()
    {
        return $this->container['useOnAcquire'];
    }

    /**
     * Sets useOnAcquire
     *
     * @param bool $useOnAcquire If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
     *
     * @return $this
     */
    public function setUseOnAcquire($useOnAcquire)
    {
        $this->container['useOnAcquire'] = $useOnAcquire;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


