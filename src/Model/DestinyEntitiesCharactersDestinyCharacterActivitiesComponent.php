<?php
/**
 * DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyEntitiesCharactersDestinyCharacterActivitiesComponent Class Doc Comment
 *
 * @category Class
 * @description This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Entities.Characters.DestinyCharacterActivitiesComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dateActivityStarted' => '\DateTime',
        'availableActivities' => '\Bungie\Model\DestinyDestinyActivity[]',
        'currentActivityHash' => 'int',
        'currentActivityModeHash' => 'int',
        'currentActivityModeType' => 'int',
        'currentActivityModeHashes' => 'int[]',
        'currentActivityModeTypes' => '\Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]',
        'currentPlaylistActivityHash' => 'int',
        'lastCompletedStoryHash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dateActivityStarted' => 'date-time',
        'availableActivities' => null,
        'currentActivityHash' => 'uint32',
        'currentActivityModeHash' => 'uint32',
        'currentActivityModeType' => 'int32',
        'currentActivityModeHashes' => 'uint32',
        'currentActivityModeTypes' => null,
        'currentPlaylistActivityHash' => 'uint32',
        'lastCompletedStoryHash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateActivityStarted' => 'dateActivityStarted',
        'availableActivities' => 'availableActivities',
        'currentActivityHash' => 'currentActivityHash',
        'currentActivityModeHash' => 'currentActivityModeHash',
        'currentActivityModeType' => 'currentActivityModeType',
        'currentActivityModeHashes' => 'currentActivityModeHashes',
        'currentActivityModeTypes' => 'currentActivityModeTypes',
        'currentPlaylistActivityHash' => 'currentPlaylistActivityHash',
        'lastCompletedStoryHash' => 'lastCompletedStoryHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateActivityStarted' => 'setDateActivityStarted',
        'availableActivities' => 'setAvailableActivities',
        'currentActivityHash' => 'setCurrentActivityHash',
        'currentActivityModeHash' => 'setCurrentActivityModeHash',
        'currentActivityModeType' => 'setCurrentActivityModeType',
        'currentActivityModeHashes' => 'setCurrentActivityModeHashes',
        'currentActivityModeTypes' => 'setCurrentActivityModeTypes',
        'currentPlaylistActivityHash' => 'setCurrentPlaylistActivityHash',
        'lastCompletedStoryHash' => 'setLastCompletedStoryHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateActivityStarted' => 'getDateActivityStarted',
        'availableActivities' => 'getAvailableActivities',
        'currentActivityHash' => 'getCurrentActivityHash',
        'currentActivityModeHash' => 'getCurrentActivityModeHash',
        'currentActivityModeType' => 'getCurrentActivityModeType',
        'currentActivityModeHashes' => 'getCurrentActivityModeHashes',
        'currentActivityModeTypes' => 'getCurrentActivityModeTypes',
        'currentPlaylistActivityHash' => 'getCurrentPlaylistActivityHash',
        'lastCompletedStoryHash' => 'getLastCompletedStoryHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENT_ACTIVITY_MODE_TYPE_0 = 0;
    const CURRENT_ACTIVITY_MODE_TYPE_2 = 2;
    const CURRENT_ACTIVITY_MODE_TYPE_3 = 3;
    const CURRENT_ACTIVITY_MODE_TYPE_4 = 4;
    const CURRENT_ACTIVITY_MODE_TYPE_5 = 5;
    const CURRENT_ACTIVITY_MODE_TYPE_6 = 6;
    const CURRENT_ACTIVITY_MODE_TYPE_7 = 7;
    const CURRENT_ACTIVITY_MODE_TYPE_9 = 9;
    const CURRENT_ACTIVITY_MODE_TYPE_10 = 10;
    const CURRENT_ACTIVITY_MODE_TYPE_11 = 11;
    const CURRENT_ACTIVITY_MODE_TYPE_12 = 12;
    const CURRENT_ACTIVITY_MODE_TYPE_13 = 13;
    const CURRENT_ACTIVITY_MODE_TYPE_15 = 15;
    const CURRENT_ACTIVITY_MODE_TYPE_16 = 16;
    const CURRENT_ACTIVITY_MODE_TYPE_17 = 17;
    const CURRENT_ACTIVITY_MODE_TYPE_18 = 18;
    const CURRENT_ACTIVITY_MODE_TYPE_19 = 19;
    const CURRENT_ACTIVITY_MODE_TYPE_20 = 20;
    const CURRENT_ACTIVITY_MODE_TYPE_21 = 21;
    const CURRENT_ACTIVITY_MODE_TYPE_22 = 22;
    const CURRENT_ACTIVITY_MODE_TYPE_24 = 24;
    const CURRENT_ACTIVITY_MODE_TYPE_25 = 25;
    const CURRENT_ACTIVITY_MODE_TYPE_26 = 26;
    const CURRENT_ACTIVITY_MODE_TYPE_27 = 27;
    const CURRENT_ACTIVITY_MODE_TYPE_28 = 28;
    const CURRENT_ACTIVITY_MODE_TYPE_29 = 29;
    const CURRENT_ACTIVITY_MODE_TYPE_30 = 30;
    const CURRENT_ACTIVITY_MODE_TYPE_31 = 31;
    const CURRENT_ACTIVITY_MODE_TYPE_32 = 32;
    const CURRENT_ACTIVITY_MODE_TYPE_37 = 37;
    const CURRENT_ACTIVITY_MODE_TYPE_38 = 38;
    const CURRENT_ACTIVITY_MODE_TYPE_39 = 39;
    const CURRENT_ACTIVITY_MODE_TYPE_40 = 40;
    const CURRENT_ACTIVITY_MODE_TYPE_41 = 41;
    const CURRENT_ACTIVITY_MODE_TYPE_42 = 42;
    const CURRENT_ACTIVITY_MODE_TYPE_43 = 43;
    const CURRENT_ACTIVITY_MODE_TYPE_44 = 44;
    const CURRENT_ACTIVITY_MODE_TYPE_45 = 45;
    const CURRENT_ACTIVITY_MODE_TYPE_46 = 46;
    const CURRENT_ACTIVITY_MODE_TYPE_47 = 47;
    const CURRENT_ACTIVITY_MODE_TYPE_48 = 48;
    const CURRENT_ACTIVITY_MODE_TYPE_49 = 49;
    const CURRENT_ACTIVITY_MODE_TYPE_50 = 50;
    const CURRENT_ACTIVITY_MODE_TYPE_51 = 51;
    const CURRENT_ACTIVITY_MODE_TYPE_52 = 52;
    const CURRENT_ACTIVITY_MODE_TYPE_53 = 53;
    const CURRENT_ACTIVITY_MODE_TYPE_54 = 54;
    const CURRENT_ACTIVITY_MODE_TYPE_55 = 55;
    const CURRENT_ACTIVITY_MODE_TYPE_56 = 56;
    const CURRENT_ACTIVITY_MODE_TYPE_57 = 57;
    const CURRENT_ACTIVITY_MODE_TYPE_58 = 58;
    const CURRENT_ACTIVITY_MODE_TYPE_59 = 59;
    const CURRENT_ACTIVITY_MODE_TYPE_60 = 60;
    const CURRENT_ACTIVITY_MODE_TYPE_61 = 61;
    const CURRENT_ACTIVITY_MODE_TYPE_62 = 62;
    const CURRENT_ACTIVITY_MODE_TYPE_63 = 63;
    const CURRENT_ACTIVITY_MODE_TYPE_64 = 64;
    const CURRENT_ACTIVITY_MODE_TYPE_65 = 65;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrentActivityModeTypeAllowableValues()
    {
        return [
            self::CURRENT_ACTIVITY_MODE_TYPE_0,
            self::CURRENT_ACTIVITY_MODE_TYPE_2,
            self::CURRENT_ACTIVITY_MODE_TYPE_3,
            self::CURRENT_ACTIVITY_MODE_TYPE_4,
            self::CURRENT_ACTIVITY_MODE_TYPE_5,
            self::CURRENT_ACTIVITY_MODE_TYPE_6,
            self::CURRENT_ACTIVITY_MODE_TYPE_7,
            self::CURRENT_ACTIVITY_MODE_TYPE_9,
            self::CURRENT_ACTIVITY_MODE_TYPE_10,
            self::CURRENT_ACTIVITY_MODE_TYPE_11,
            self::CURRENT_ACTIVITY_MODE_TYPE_12,
            self::CURRENT_ACTIVITY_MODE_TYPE_13,
            self::CURRENT_ACTIVITY_MODE_TYPE_15,
            self::CURRENT_ACTIVITY_MODE_TYPE_16,
            self::CURRENT_ACTIVITY_MODE_TYPE_17,
            self::CURRENT_ACTIVITY_MODE_TYPE_18,
            self::CURRENT_ACTIVITY_MODE_TYPE_19,
            self::CURRENT_ACTIVITY_MODE_TYPE_20,
            self::CURRENT_ACTIVITY_MODE_TYPE_21,
            self::CURRENT_ACTIVITY_MODE_TYPE_22,
            self::CURRENT_ACTIVITY_MODE_TYPE_24,
            self::CURRENT_ACTIVITY_MODE_TYPE_25,
            self::CURRENT_ACTIVITY_MODE_TYPE_26,
            self::CURRENT_ACTIVITY_MODE_TYPE_27,
            self::CURRENT_ACTIVITY_MODE_TYPE_28,
            self::CURRENT_ACTIVITY_MODE_TYPE_29,
            self::CURRENT_ACTIVITY_MODE_TYPE_30,
            self::CURRENT_ACTIVITY_MODE_TYPE_31,
            self::CURRENT_ACTIVITY_MODE_TYPE_32,
            self::CURRENT_ACTIVITY_MODE_TYPE_37,
            self::CURRENT_ACTIVITY_MODE_TYPE_38,
            self::CURRENT_ACTIVITY_MODE_TYPE_39,
            self::CURRENT_ACTIVITY_MODE_TYPE_40,
            self::CURRENT_ACTIVITY_MODE_TYPE_41,
            self::CURRENT_ACTIVITY_MODE_TYPE_42,
            self::CURRENT_ACTIVITY_MODE_TYPE_43,
            self::CURRENT_ACTIVITY_MODE_TYPE_44,
            self::CURRENT_ACTIVITY_MODE_TYPE_45,
            self::CURRENT_ACTIVITY_MODE_TYPE_46,
            self::CURRENT_ACTIVITY_MODE_TYPE_47,
            self::CURRENT_ACTIVITY_MODE_TYPE_48,
            self::CURRENT_ACTIVITY_MODE_TYPE_49,
            self::CURRENT_ACTIVITY_MODE_TYPE_50,
            self::CURRENT_ACTIVITY_MODE_TYPE_51,
            self::CURRENT_ACTIVITY_MODE_TYPE_52,
            self::CURRENT_ACTIVITY_MODE_TYPE_53,
            self::CURRENT_ACTIVITY_MODE_TYPE_54,
            self::CURRENT_ACTIVITY_MODE_TYPE_55,
            self::CURRENT_ACTIVITY_MODE_TYPE_56,
            self::CURRENT_ACTIVITY_MODE_TYPE_57,
            self::CURRENT_ACTIVITY_MODE_TYPE_58,
            self::CURRENT_ACTIVITY_MODE_TYPE_59,
            self::CURRENT_ACTIVITY_MODE_TYPE_60,
            self::CURRENT_ACTIVITY_MODE_TYPE_61,
            self::CURRENT_ACTIVITY_MODE_TYPE_62,
            self::CURRENT_ACTIVITY_MODE_TYPE_63,
            self::CURRENT_ACTIVITY_MODE_TYPE_64,
            self::CURRENT_ACTIVITY_MODE_TYPE_65,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateActivityStarted'] = isset($data['dateActivityStarted']) ? $data['dateActivityStarted'] : null;
        $this->container['availableActivities'] = isset($data['availableActivities']) ? $data['availableActivities'] : null;
        $this->container['currentActivityHash'] = isset($data['currentActivityHash']) ? $data['currentActivityHash'] : null;
        $this->container['currentActivityModeHash'] = isset($data['currentActivityModeHash']) ? $data['currentActivityModeHash'] : null;
        $this->container['currentActivityModeType'] = isset($data['currentActivityModeType']) ? $data['currentActivityModeType'] : null;
        $this->container['currentActivityModeHashes'] = isset($data['currentActivityModeHashes']) ? $data['currentActivityModeHashes'] : null;
        $this->container['currentActivityModeTypes'] = isset($data['currentActivityModeTypes']) ? $data['currentActivityModeTypes'] : null;
        $this->container['currentPlaylistActivityHash'] = isset($data['currentPlaylistActivityHash']) ? $data['currentPlaylistActivityHash'] : null;
        $this->container['lastCompletedStoryHash'] = isset($data['lastCompletedStoryHash']) ? $data['lastCompletedStoryHash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrentActivityModeTypeAllowableValues();
        if (!is_null($this->container['currentActivityModeType']) && !in_array($this->container['currentActivityModeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'currentActivityModeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCurrentActivityModeTypeAllowableValues();
        if (!is_null($this->container['currentActivityModeType']) && !in_array($this->container['currentActivityModeType'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets dateActivityStarted
     *
     * @return \DateTime
     */
    public function getDateActivityStarted()
    {
        return $this->container['dateActivityStarted'];
    }

    /**
     * Sets dateActivityStarted
     *
     * @param \DateTime $dateActivityStarted The last date that the user started playing an activity.
     *
     * @return $this
     */
    public function setDateActivityStarted($dateActivityStarted)
    {
        $this->container['dateActivityStarted'] = $dateActivityStarted;

        return $this;
    }

    /**
     * Gets availableActivities
     *
     * @return \Bungie\Model\DestinyDestinyActivity[]
     */
    public function getAvailableActivities()
    {
        return $this->container['availableActivities'];
    }

    /**
     * Sets availableActivities
     *
     * @param \Bungie\Model\DestinyDestinyActivity[] $availableActivities The list of activities that the user can play.
     *
     * @return $this
     */
    public function setAvailableActivities($availableActivities)
    {
        $this->container['availableActivities'] = $availableActivities;

        return $this;
    }

    /**
     * Gets currentActivityHash
     *
     * @return int
     */
    public function getCurrentActivityHash()
    {
        return $this->container['currentActivityHash'];
    }

    /**
     * Sets currentActivityHash
     *
     * @param int $currentActivityHash If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \"Activities\" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
     *
     * @return $this
     */
    public function setCurrentActivityHash($currentActivityHash)
    {
        $this->container['currentActivityHash'] = $currentActivityHash;

        return $this;
    }

    /**
     * Gets currentActivityModeHash
     *
     * @return int
     */
    public function getCurrentActivityModeHash()
    {
        return $this->container['currentActivityModeHash'];
    }

    /**
     * Sets currentActivityModeHash
     *
     * @param int $currentActivityModeHash If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
     *
     * @return $this
     */
    public function setCurrentActivityModeHash($currentActivityModeHash)
    {
        $this->container['currentActivityModeHash'] = $currentActivityModeHash;

        return $this;
    }

    /**
     * Gets currentActivityModeType
     *
     * @return int
     */
    public function getCurrentActivityModeType()
    {
        return $this->container['currentActivityModeType'];
    }

    /**
     * Sets currentActivityModeType
     *
     * @param int $currentActivityModeType And the current activity's most specific mode type, if it can be found.
     *
     * @return $this
     */
    public function setCurrentActivityModeType($currentActivityModeType)
    {
        $allowedValues = $this->getCurrentActivityModeTypeAllowableValues();
        if (!is_null($currentActivityModeType) && !in_array($currentActivityModeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currentActivityModeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currentActivityModeType'] = $currentActivityModeType;

        return $this;
    }

    /**
     * Gets currentActivityModeHashes
     *
     * @return int[]
     */
    public function getCurrentActivityModeHashes()
    {
        return $this->container['currentActivityModeHashes'];
    }

    /**
     * Sets currentActivityModeHashes
     *
     * @param int[] $currentActivityModeHashes If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
     *
     * @return $this
     */
    public function setCurrentActivityModeHashes($currentActivityModeHashes)
    {
        $this->container['currentActivityModeHashes'] = $currentActivityModeHashes;

        return $this;
    }

    /**
     * Gets currentActivityModeTypes
     *
     * @return \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]
     */
    public function getCurrentActivityModeTypes()
    {
        return $this->container['currentActivityModeTypes'];
    }

    /**
     * Sets currentActivityModeTypes
     *
     * @param \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[] $currentActivityModeTypes All Activity Modes that apply to the current activity being played, in enum form.
     *
     * @return $this
     */
    public function setCurrentActivityModeTypes($currentActivityModeTypes)
    {
        $this->container['currentActivityModeTypes'] = $currentActivityModeTypes;

        return $this;
    }

    /**
     * Gets currentPlaylistActivityHash
     *
     * @return int
     */
    public function getCurrentPlaylistActivityHash()
    {
        return $this->container['currentPlaylistActivityHash'];
    }

    /**
     * Sets currentPlaylistActivityHash
     *
     * @param int $currentPlaylistActivityHash If the user is in a playlist, this is the hash identifier for the playlist that they chose.
     *
     * @return $this
     */
    public function setCurrentPlaylistActivityHash($currentPlaylistActivityHash)
    {
        $this->container['currentPlaylistActivityHash'] = $currentPlaylistActivityHash;

        return $this;
    }

    /**
     * Gets lastCompletedStoryHash
     *
     * @return int
     */
    public function getLastCompletedStoryHash()
    {
        return $this->container['lastCompletedStoryHash'];
    }

    /**
     * Sets lastCompletedStoryHash
     *
     * @param int $lastCompletedStoryHash This will have the activity hash of the last completed story/campaign mission, in case you care about that.
     *
     * @return $this
     */
    public function setLastCompletedStoryHash($lastCompletedStoryHash)
    {
        $this->container['lastCompletedStoryHash'] = $lastCompletedStoryHash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


