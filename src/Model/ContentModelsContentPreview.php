<?php
/**
 * ContentModelsContentPreview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * ContentModelsContentPreview Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentModelsContentPreview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Content.Models.ContentPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'path' => 'string',
        'itemInSet' => 'bool',
        'setTag' => 'string',
        'setNesting' => 'int',
        'useSetId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'path' => null,
        'itemInSet' => null,
        'setTag' => null,
        'setNesting' => 'int32',
        'useSetId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'path' => 'path',
        'itemInSet' => 'itemInSet',
        'setTag' => 'setTag',
        'setNesting' => 'setNesting',
        'useSetId' => 'useSetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'path' => 'setPath',
        'itemInSet' => 'setItemInSet',
        'setTag' => 'setSetTag',
        'setNesting' => 'setSetNesting',
        'useSetId' => 'setUseSetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'path' => 'getPath',
        'itemInSet' => 'getItemInSet',
        'setTag' => 'getSetTag',
        'setNesting' => 'getSetNesting',
        'useSetId' => 'getUseSetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['itemInSet'] = isset($data['itemInSet']) ? $data['itemInSet'] : null;
        $this->container['setTag'] = isset($data['setTag']) ? $data['setTag'] : null;
        $this->container['setNesting'] = isset($data['setNesting']) ? $data['setNesting'] : null;
        $this->container['useSetId'] = isset($data['useSetId']) ? $data['useSetId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets itemInSet
     *
     * @return bool
     */
    public function getItemInSet()
    {
        return $this->container['itemInSet'];
    }

    /**
     * Sets itemInSet
     *
     * @param bool $itemInSet itemInSet
     *
     * @return $this
     */
    public function setItemInSet($itemInSet)
    {
        $this->container['itemInSet'] = $itemInSet;

        return $this;
    }

    /**
     * Gets setTag
     *
     * @return string
     */
    public function getSetTag()
    {
        return $this->container['setTag'];
    }

    /**
     * Sets setTag
     *
     * @param string $setTag setTag
     *
     * @return $this
     */
    public function setSetTag($setTag)
    {
        $this->container['setTag'] = $setTag;

        return $this;
    }

    /**
     * Gets setNesting
     *
     * @return int
     */
    public function getSetNesting()
    {
        return $this->container['setNesting'];
    }

    /**
     * Sets setNesting
     *
     * @param int $setNesting setNesting
     *
     * @return $this
     */
    public function setSetNesting($setNesting)
    {
        $this->container['setNesting'] = $setNesting;

        return $this;
    }

    /**
     * Gets useSetId
     *
     * @return int
     */
    public function getUseSetId()
    {
        return $this->container['useSetId'];
    }

    /**
     * Sets useSetId
     *
     * @param int $useSetId useSetId
     *
     * @return $this
     */
    public function setUseSetId($useSetId)
    {
        $this->container['useSetId'] = $useSetId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


