<?php
/**
 * DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'statId' => 'string',
        'group' => 'object',
        'periodTypes' => '\Bungie\Model\DestinyHistoricalStatsDefinitionsPeriodType[]',
        'modes' => '\Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]',
        'category' => 'object',
        'statName' => 'string',
        'statNameAbbr' => 'string',
        'statDescription' => 'string',
        'unitType' => 'object',
        'iconImage' => 'string',
        'mergeMethod' => 'int',
        'unitLabel' => 'string',
        'weight' => 'int',
        'medalTierHash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'statId' => null,
        'group' => null,
        'periodTypes' => null,
        'modes' => null,
        'category' => null,
        'statName' => null,
        'statNameAbbr' => null,
        'statDescription' => null,
        'unitType' => null,
        'iconImage' => null,
        'mergeMethod' => 'int32',
        'unitLabel' => null,
        'weight' => 'int32',
        'medalTierHash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statId' => 'statId',
        'group' => 'group',
        'periodTypes' => 'periodTypes',
        'modes' => 'modes',
        'category' => 'category',
        'statName' => 'statName',
        'statNameAbbr' => 'statNameAbbr',
        'statDescription' => 'statDescription',
        'unitType' => 'unitType',
        'iconImage' => 'iconImage',
        'mergeMethod' => 'mergeMethod',
        'unitLabel' => 'unitLabel',
        'weight' => 'weight',
        'medalTierHash' => 'medalTierHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statId' => 'setStatId',
        'group' => 'setGroup',
        'periodTypes' => 'setPeriodTypes',
        'modes' => 'setModes',
        'category' => 'setCategory',
        'statName' => 'setStatName',
        'statNameAbbr' => 'setStatNameAbbr',
        'statDescription' => 'setStatDescription',
        'unitType' => 'setUnitType',
        'iconImage' => 'setIconImage',
        'mergeMethod' => 'setMergeMethod',
        'unitLabel' => 'setUnitLabel',
        'weight' => 'setWeight',
        'medalTierHash' => 'setMedalTierHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statId' => 'getStatId',
        'group' => 'getGroup',
        'periodTypes' => 'getPeriodTypes',
        'modes' => 'getModes',
        'category' => 'getCategory',
        'statName' => 'getStatName',
        'statNameAbbr' => 'getStatNameAbbr',
        'statDescription' => 'getStatDescription',
        'unitType' => 'getUnitType',
        'iconImage' => 'getIconImage',
        'mergeMethod' => 'getMergeMethod',
        'unitLabel' => 'getUnitLabel',
        'weight' => 'getWeight',
        'medalTierHash' => 'getMedalTierHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MERGE_METHOD_0 = 0;
    const MERGE_METHOD_1 = 1;
    const MERGE_METHOD_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMergeMethodAllowableValues()
    {
        return [
            self::MERGE_METHOD_0,
            self::MERGE_METHOD_1,
            self::MERGE_METHOD_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['statId'] = isset($data['statId']) ? $data['statId'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['periodTypes'] = isset($data['periodTypes']) ? $data['periodTypes'] : null;
        $this->container['modes'] = isset($data['modes']) ? $data['modes'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['statName'] = isset($data['statName']) ? $data['statName'] : null;
        $this->container['statNameAbbr'] = isset($data['statNameAbbr']) ? $data['statNameAbbr'] : null;
        $this->container['statDescription'] = isset($data['statDescription']) ? $data['statDescription'] : null;
        $this->container['unitType'] = isset($data['unitType']) ? $data['unitType'] : null;
        $this->container['iconImage'] = isset($data['iconImage']) ? $data['iconImage'] : null;
        $this->container['mergeMethod'] = isset($data['mergeMethod']) ? $data['mergeMethod'] : null;
        $this->container['unitLabel'] = isset($data['unitLabel']) ? $data['unitLabel'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['medalTierHash'] = isset($data['medalTierHash']) ? $data['medalTierHash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMergeMethodAllowableValues();
        if (!is_null($this->container['mergeMethod']) && !in_array($this->container['mergeMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mergeMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getMergeMethodAllowableValues();
        if (!is_null($this->container['mergeMethod']) && !in_array($this->container['mergeMethod'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets statId
     *
     * @return string
     */
    public function getStatId()
    {
        return $this->container['statId'];
    }

    /**
     * Sets statId
     *
     * @param string $statId Unique programmer friendly ID for this stat
     *
     * @return $this
     */
    public function setStatId($statId)
    {
        $this->container['statId'] = $statId;

        return $this;
    }

    /**
     * Gets group
     *
     * @return object
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param object $group Statistic group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets periodTypes
     *
     * @return \Bungie\Model\DestinyHistoricalStatsDefinitionsPeriodType[]
     */
    public function getPeriodTypes()
    {
        return $this->container['periodTypes'];
    }

    /**
     * Sets periodTypes
     *
     * @param \Bungie\Model\DestinyHistoricalStatsDefinitionsPeriodType[] $periodTypes Time periods the statistic covers
     *
     * @return $this
     */
    public function setPeriodTypes($periodTypes)
    {
        $this->container['periodTypes'] = $periodTypes;

        return $this;
    }

    /**
     * Gets modes
     *
     * @return \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]
     */
    public function getModes()
    {
        return $this->container['modes'];
    }

    /**
     * Sets modes
     *
     * @param \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[] $modes Game modes where this statistic can be reported.
     *
     * @return $this
     */
    public function setModes($modes)
    {
        $this->container['modes'] = $modes;

        return $this;
    }

    /**
     * Gets category
     *
     * @return object
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param object $category Category for the stat.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets statName
     *
     * @return string
     */
    public function getStatName()
    {
        return $this->container['statName'];
    }

    /**
     * Sets statName
     *
     * @param string $statName Display name
     *
     * @return $this
     */
    public function setStatName($statName)
    {
        $this->container['statName'] = $statName;

        return $this;
    }

    /**
     * Gets statNameAbbr
     *
     * @return string
     */
    public function getStatNameAbbr()
    {
        return $this->container['statNameAbbr'];
    }

    /**
     * Sets statNameAbbr
     *
     * @param string $statNameAbbr Display name abbreviated
     *
     * @return $this
     */
    public function setStatNameAbbr($statNameAbbr)
    {
        $this->container['statNameAbbr'] = $statNameAbbr;

        return $this;
    }

    /**
     * Gets statDescription
     *
     * @return string
     */
    public function getStatDescription()
    {
        return $this->container['statDescription'];
    }

    /**
     * Sets statDescription
     *
     * @param string $statDescription Description of a stat if applicable.
     *
     * @return $this
     */
    public function setStatDescription($statDescription)
    {
        $this->container['statDescription'] = $statDescription;

        return $this;
    }

    /**
     * Gets unitType
     *
     * @return object
     */
    public function getUnitType()
    {
        return $this->container['unitType'];
    }

    /**
     * Sets unitType
     *
     * @param object $unitType Unit, if any, for the statistic
     *
     * @return $this
     */
    public function setUnitType($unitType)
    {
        $this->container['unitType'] = $unitType;

        return $this;
    }

    /**
     * Gets iconImage
     *
     * @return string
     */
    public function getIconImage()
    {
        return $this->container['iconImage'];
    }

    /**
     * Sets iconImage
     *
     * @param string $iconImage Optional URI to an icon for the statistic
     *
     * @return $this
     */
    public function setIconImage($iconImage)
    {
        $this->container['iconImage'] = $iconImage;

        return $this;
    }

    /**
     * Gets mergeMethod
     *
     * @return int
     */
    public function getMergeMethod()
    {
        return $this->container['mergeMethod'];
    }

    /**
     * Sets mergeMethod
     *
     * @param int $mergeMethod Optional icon for the statistic
     *
     * @return $this
     */
    public function setMergeMethod($mergeMethod)
    {
        $allowedValues = $this->getMergeMethodAllowableValues();
        if (!is_null($mergeMethod) && !in_array($mergeMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mergeMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mergeMethod'] = $mergeMethod;

        return $this;
    }

    /**
     * Gets unitLabel
     *
     * @return string
     */
    public function getUnitLabel()
    {
        return $this->container['unitLabel'];
    }

    /**
     * Sets unitLabel
     *
     * @param string $unitLabel Localized Unit Name for the stat.
     *
     * @return $this
     */
    public function setUnitLabel($unitLabel)
    {
        $this->container['unitLabel'] = $unitLabel;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight Weight assigned to this stat indicating its relative impressiveness.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets medalTierHash
     *
     * @return int
     */
    public function getMedalTierHash()
    {
        return $this->container['medalTierHash'];
    }

    /**
     * Sets medalTierHash
     *
     * @param int $medalTierHash The tier associated with this medal - be it implicitly or explicitly.
     *
     * @return $this
     */
    public function setMedalTierHash($medalTierHash)
    {
        $this->container['medalTierHash'] = $medalTierHash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


