<?php
/**
 * PartnerOfferHistoryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Tokens;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * PartnerOfferHistoryResponse Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PartnerOfferHistoryResponse implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tokens.PartnerOfferHistoryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'partnerOfferKey' => 'string',
        'membershipId' => 'int',
        'membershipType' => 'int',
        'localizedName' => 'string',
        'localizedDescription' => 'string',
        'isConsumable' => 'bool',
        'quantityApplied' => 'int',
        'applyDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'partnerOfferKey' => null,
        'membershipId' => 'int64',
        'membershipType' => 'int32',
        'localizedName' => null,
        'localizedDescription' => null,
        'isConsumable' => null,
        'quantityApplied' => 'int32',
        'applyDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partnerOfferKey' => 'PartnerOfferKey',
        'membershipId' => 'MembershipId',
        'membershipType' => 'MembershipType',
        'localizedName' => 'LocalizedName',
        'localizedDescription' => 'LocalizedDescription',
        'isConsumable' => 'IsConsumable',
        'quantityApplied' => 'QuantityApplied',
        'applyDate' => 'ApplyDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partnerOfferKey' => 'setPartnerOfferKey',
        'membershipId' => 'setMembershipId',
        'membershipType' => 'setMembershipType',
        'localizedName' => 'setLocalizedName',
        'localizedDescription' => 'setLocalizedDescription',
        'isConsumable' => 'setIsConsumable',
        'quantityApplied' => 'setQuantityApplied',
        'applyDate' => 'setApplyDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partnerOfferKey' => 'getPartnerOfferKey',
        'membershipId' => 'getMembershipId',
        'membershipType' => 'getMembershipType',
        'localizedName' => 'getLocalizedName',
        'localizedDescription' => 'getLocalizedDescription',
        'isConsumable' => 'getIsConsumable',
        'quantityApplied' => 'getQuantityApplied',
        'applyDate' => 'getApplyDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MEMBERSHIP_TYPE_NONE = 0;
    const MEMBERSHIP_TYPE_TIGERXBOX = 1;
    const MEMBERSHIP_TYPE_TIGERPSN = 2;
    const MEMBERSHIP_TYPE_TIGERSTEAM = 3;
    const MEMBERSHIP_TYPE_TIGERBLIZZARD = 4;
    const MEMBERSHIP_TYPE_TIGERSTADIA = 5;
    const MEMBERSHIP_TYPE_TIGERDEMON = 10;
    const MEMBERSHIP_TYPE_BUNGIENEXT = 254;
    const MEMBERSHIP_TYPE_ALL = -1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMembershipTypeAllowableValues()
    {
        return [
            self::MEMBERSHIP_TYPE_NONE,
            self::MEMBERSHIP_TYPE_TIGERXBOX,
            self::MEMBERSHIP_TYPE_TIGERPSN,
            self::MEMBERSHIP_TYPE_TIGERSTEAM,
            self::MEMBERSHIP_TYPE_TIGERBLIZZARD,
            self::MEMBERSHIP_TYPE_TIGERSTADIA,
            self::MEMBERSHIP_TYPE_TIGERDEMON,
            self::MEMBERSHIP_TYPE_BUNGIENEXT,
            self::MEMBERSHIP_TYPE_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partnerOfferKey'] = isset($data['partnerOfferKey']) ? $data['partnerOfferKey'] : null;
        $this->container['membershipId'] = isset($data['membershipId']) ? $data['membershipId'] : null;
        $this->container['membershipType'] = isset($data['membershipType']) ? $data['membershipType'] : null;
        $this->container['localizedName'] = isset($data['localizedName']) ? $data['localizedName'] : null;
        $this->container['localizedDescription'] = isset($data['localizedDescription']) ? $data['localizedDescription'] : null;
        $this->container['isConsumable'] = isset($data['isConsumable']) ? $data['isConsumable'] : null;
        $this->container['quantityApplied'] = isset($data['quantityApplied']) ? $data['quantityApplied'] : null;
        $this->container['applyDate'] = isset($data['applyDate']) ? $data['applyDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMembershipTypeAllowableValues();
        if (!is_null($this->container['membershipType']) && !in_array($this->container['membershipType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'membershipType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partnerOfferKey
     *
     * @return string|null
     */
    public function getPartnerOfferKey()
    {
        return $this->container['partnerOfferKey'];
    }

    /**
     * Sets partnerOfferKey
     *
     * @param string|null $partnerOfferKey partnerOfferKey
     *
     * @return $this
     */
    public function setPartnerOfferKey($partnerOfferKey)
    {
        $this->container['partnerOfferKey'] = $partnerOfferKey;

        return $this;
    }

    /**
     * Gets membershipId
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membershipId'];
    }

    /**
     * Sets membershipId
     *
     * @param int|null $membershipId membershipId
     *
     * @return $this
     */
    public function setMembershipId($membershipId)
    {
        $this->container['membershipId'] = $membershipId;

        return $this;
    }

    /**
     * Gets membershipType
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membershipType'];
    }

    /**
     * Sets membershipType
     *
     * @param int|null $membershipType membershipType
     *
     * @return $this
     */
    public function setMembershipType($membershipType)
    {
        $allowedValues = $this->getMembershipTypeAllowableValues();
        if (!is_null($membershipType) && !in_array($membershipType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'membershipType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['membershipType'] = $membershipType;

        return $this;
    }

    /**
     * Gets localizedName
     *
     * @return string|null
     */
    public function getLocalizedName()
    {
        return $this->container['localizedName'];
    }

    /**
     * Sets localizedName
     *
     * @param string|null $localizedName localizedName
     *
     * @return $this
     */
    public function setLocalizedName($localizedName)
    {
        $this->container['localizedName'] = $localizedName;

        return $this;
    }

    /**
     * Gets localizedDescription
     *
     * @return string|null
     */
    public function getLocalizedDescription()
    {
        return $this->container['localizedDescription'];
    }

    /**
     * Sets localizedDescription
     *
     * @param string|null $localizedDescription localizedDescription
     *
     * @return $this
     */
    public function setLocalizedDescription($localizedDescription)
    {
        $this->container['localizedDescription'] = $localizedDescription;

        return $this;
    }

    /**
     * Gets isConsumable
     *
     * @return bool|null
     */
    public function getIsConsumable()
    {
        return $this->container['isConsumable'];
    }

    /**
     * Sets isConsumable
     *
     * @param bool|null $isConsumable isConsumable
     *
     * @return $this
     */
    public function setIsConsumable($isConsumable)
    {
        $this->container['isConsumable'] = $isConsumable;

        return $this;
    }

    /**
     * Gets quantityApplied
     *
     * @return int|null
     */
    public function getQuantityApplied()
    {
        return $this->container['quantityApplied'];
    }

    /**
     * Sets quantityApplied
     *
     * @param int|null $quantityApplied quantityApplied
     *
     * @return $this
     */
    public function setQuantityApplied($quantityApplied)
    {
        $this->container['quantityApplied'] = $quantityApplied;

        return $this;
    }

    /**
     * Gets applyDate
     *
     * @return \DateTime|null
     */
    public function getApplyDate()
    {
        return $this->container['applyDate'];
    }

    /**
     * Sets applyDate
     *
     * @param \DateTime|null $applyDate applyDate
     *
     * @return $this
     */
    public function setApplyDate($applyDate)
    {
        $this->container['applyDate'] = $applyDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


