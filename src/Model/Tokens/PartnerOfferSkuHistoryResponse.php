<?php
/**
 * PartnerOfferSkuHistoryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Tokens;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * PartnerOfferSkuHistoryResponse Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PartnerOfferSkuHistoryResponse implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tokens.PartnerOfferSkuHistoryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skuIdentifier' => 'string',
        'localizedName' => 'string',
        'localizedDescription' => 'string',
        'claimDate' => '\DateTime',
        'allOffersApplied' => 'bool',
        'transactionId' => 'string',
        'skuOffers' => '\Bungie\Model\Tokens\PartnerOfferHistoryResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'skuIdentifier' => null,
        'localizedName' => null,
        'localizedDescription' => null,
        'claimDate' => 'date-time',
        'allOffersApplied' => null,
        'transactionId' => null,
        'skuOffers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skuIdentifier' => 'SkuIdentifier',
        'localizedName' => 'LocalizedName',
        'localizedDescription' => 'LocalizedDescription',
        'claimDate' => 'ClaimDate',
        'allOffersApplied' => 'AllOffersApplied',
        'transactionId' => 'TransactionId',
        'skuOffers' => 'SkuOffers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skuIdentifier' => 'setSkuIdentifier',
        'localizedName' => 'setLocalizedName',
        'localizedDescription' => 'setLocalizedDescription',
        'claimDate' => 'setClaimDate',
        'allOffersApplied' => 'setAllOffersApplied',
        'transactionId' => 'setTransactionId',
        'skuOffers' => 'setSkuOffers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skuIdentifier' => 'getSkuIdentifier',
        'localizedName' => 'getLocalizedName',
        'localizedDescription' => 'getLocalizedDescription',
        'claimDate' => 'getClaimDate',
        'allOffersApplied' => 'getAllOffersApplied',
        'transactionId' => 'getTransactionId',
        'skuOffers' => 'getSkuOffers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['skuIdentifier'] = isset($data['skuIdentifier']) ? $data['skuIdentifier'] : null;
        $this->container['localizedName'] = isset($data['localizedName']) ? $data['localizedName'] : null;
        $this->container['localizedDescription'] = isset($data['localizedDescription']) ? $data['localizedDescription'] : null;
        $this->container['claimDate'] = isset($data['claimDate']) ? $data['claimDate'] : null;
        $this->container['allOffersApplied'] = isset($data['allOffersApplied']) ? $data['allOffersApplied'] : null;
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['skuOffers'] = isset($data['skuOffers']) ? $data['skuOffers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skuIdentifier
     *
     * @return string|null
     */
    public function getSkuIdentifier()
    {
        return $this->container['skuIdentifier'];
    }

    /**
     * Sets skuIdentifier
     *
     * @param string|null $skuIdentifier skuIdentifier
     *
     * @return $this
     */
    public function setSkuIdentifier($skuIdentifier)
    {
        $this->container['skuIdentifier'] = $skuIdentifier;

        return $this;
    }

    /**
     * Gets localizedName
     *
     * @return string|null
     */
    public function getLocalizedName()
    {
        return $this->container['localizedName'];
    }

    /**
     * Sets localizedName
     *
     * @param string|null $localizedName localizedName
     *
     * @return $this
     */
    public function setLocalizedName($localizedName)
    {
        $this->container['localizedName'] = $localizedName;

        return $this;
    }

    /**
     * Gets localizedDescription
     *
     * @return string|null
     */
    public function getLocalizedDescription()
    {
        return $this->container['localizedDescription'];
    }

    /**
     * Sets localizedDescription
     *
     * @param string|null $localizedDescription localizedDescription
     *
     * @return $this
     */
    public function setLocalizedDescription($localizedDescription)
    {
        $this->container['localizedDescription'] = $localizedDescription;

        return $this;
    }

    /**
     * Gets claimDate
     *
     * @return \DateTime|null
     */
    public function getClaimDate()
    {
        return $this->container['claimDate'];
    }

    /**
     * Sets claimDate
     *
     * @param \DateTime|null $claimDate claimDate
     *
     * @return $this
     */
    public function setClaimDate($claimDate)
    {
        $this->container['claimDate'] = $claimDate;

        return $this;
    }

    /**
     * Gets allOffersApplied
     *
     * @return bool|null
     */
    public function getAllOffersApplied()
    {
        return $this->container['allOffersApplied'];
    }

    /**
     * Sets allOffersApplied
     *
     * @param bool|null $allOffersApplied allOffersApplied
     *
     * @return $this
     */
    public function setAllOffersApplied($allOffersApplied)
    {
        $this->container['allOffersApplied'] = $allOffersApplied;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param string|null $transactionId transactionId
     *
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets skuOffers
     *
     * @return \Bungie\Model\Tokens\PartnerOfferHistoryResponse[]|null
     */
    public function getSkuOffers()
    {
        return $this->container['skuOffers'];
    }

    /**
     * Sets skuOffers
     *
     * @param \Bungie\Model\Tokens\PartnerOfferHistoryResponse[]|null $skuOffers skuOffers
     *
     * @return $this
     */
    public function setSkuOffers($skuOffers)
    {
        $this->container['skuOffers'] = $skuOffers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


