<?php
/**
 * RewardAvailabilityModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.17.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Tokens;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * RewardAvailabilityModel Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RewardAvailabilityModel implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tokens.RewardAvailabilityModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hasExistingCode' => 'bool',
        'recordDefinitions' => '\Bungie\Model\Destiny\Definitions\Records\DestinyRecordDefinition[]',
        'collectibleDefinitions' => '\Bungie\Model\Tokens\CollectibleDefinitions[]',
        'isOffer' => 'bool',
        'hasOffer' => 'bool',
        'offerApplied' => 'bool',
        'decryptedToken' => 'string',
        'isLoyaltyReward' => 'bool',
        'shopifyEndDate' => '\DateTime',
        'gameEarnByDate' => '\DateTime',
        'redemptionEndDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'hasExistingCode' => null,
        'recordDefinitions' => null,
        'collectibleDefinitions' => null,
        'isOffer' => null,
        'hasOffer' => null,
        'offerApplied' => null,
        'decryptedToken' => null,
        'isLoyaltyReward' => null,
        'shopifyEndDate' => 'date-time',
        'gameEarnByDate' => 'date-time',
        'redemptionEndDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hasExistingCode' => 'HasExistingCode',
        'recordDefinitions' => 'RecordDefinitions',
        'collectibleDefinitions' => 'CollectibleDefinitions',
        'isOffer' => 'IsOffer',
        'hasOffer' => 'HasOffer',
        'offerApplied' => 'OfferApplied',
        'decryptedToken' => 'DecryptedToken',
        'isLoyaltyReward' => 'IsLoyaltyReward',
        'shopifyEndDate' => 'ShopifyEndDate',
        'gameEarnByDate' => 'GameEarnByDate',
        'redemptionEndDate' => 'RedemptionEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hasExistingCode' => 'setHasExistingCode',
        'recordDefinitions' => 'setRecordDefinitions',
        'collectibleDefinitions' => 'setCollectibleDefinitions',
        'isOffer' => 'setIsOffer',
        'hasOffer' => 'setHasOffer',
        'offerApplied' => 'setOfferApplied',
        'decryptedToken' => 'setDecryptedToken',
        'isLoyaltyReward' => 'setIsLoyaltyReward',
        'shopifyEndDate' => 'setShopifyEndDate',
        'gameEarnByDate' => 'setGameEarnByDate',
        'redemptionEndDate' => 'setRedemptionEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hasExistingCode' => 'getHasExistingCode',
        'recordDefinitions' => 'getRecordDefinitions',
        'collectibleDefinitions' => 'getCollectibleDefinitions',
        'isOffer' => 'getIsOffer',
        'hasOffer' => 'getHasOffer',
        'offerApplied' => 'getOfferApplied',
        'decryptedToken' => 'getDecryptedToken',
        'isLoyaltyReward' => 'getIsLoyaltyReward',
        'shopifyEndDate' => 'getShopifyEndDate',
        'gameEarnByDate' => 'getGameEarnByDate',
        'redemptionEndDate' => 'getRedemptionEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hasExistingCode'] = isset($data['hasExistingCode']) ? $data['hasExistingCode'] : null;
        $this->container['recordDefinitions'] = isset($data['recordDefinitions']) ? $data['recordDefinitions'] : null;
        $this->container['collectibleDefinitions'] = isset($data['collectibleDefinitions']) ? $data['collectibleDefinitions'] : null;
        $this->container['isOffer'] = isset($data['isOffer']) ? $data['isOffer'] : null;
        $this->container['hasOffer'] = isset($data['hasOffer']) ? $data['hasOffer'] : null;
        $this->container['offerApplied'] = isset($data['offerApplied']) ? $data['offerApplied'] : null;
        $this->container['decryptedToken'] = isset($data['decryptedToken']) ? $data['decryptedToken'] : null;
        $this->container['isLoyaltyReward'] = isset($data['isLoyaltyReward']) ? $data['isLoyaltyReward'] : null;
        $this->container['shopifyEndDate'] = isset($data['shopifyEndDate']) ? $data['shopifyEndDate'] : null;
        $this->container['gameEarnByDate'] = isset($data['gameEarnByDate']) ? $data['gameEarnByDate'] : null;
        $this->container['redemptionEndDate'] = isset($data['redemptionEndDate']) ? $data['redemptionEndDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hasExistingCode
     *
     * @return bool|null
     */
    public function getHasExistingCode()
    {
        return $this->container['hasExistingCode'];
    }

    /**
     * Sets hasExistingCode
     *
     * @param bool|null $hasExistingCode hasExistingCode
     *
     * @return $this
     */
    public function setHasExistingCode($hasExistingCode)
    {
        $this->container['hasExistingCode'] = $hasExistingCode;

        return $this;
    }

    /**
     * Gets recordDefinitions
     *
     * @return \Bungie\Model\Destiny\Definitions\Records\DestinyRecordDefinition[]|null
     */
    public function getRecordDefinitions()
    {
        return $this->container['recordDefinitions'];
    }

    /**
     * Sets recordDefinitions
     *
     * @param \Bungie\Model\Destiny\Definitions\Records\DestinyRecordDefinition[]|null $recordDefinitions recordDefinitions
     *
     * @return $this
     */
    public function setRecordDefinitions($recordDefinitions)
    {
        $this->container['recordDefinitions'] = $recordDefinitions;

        return $this;
    }

    /**
     * Gets collectibleDefinitions
     *
     * @return \Bungie\Model\Tokens\CollectibleDefinitions[]|null
     */
    public function getCollectibleDefinitions()
    {
        return $this->container['collectibleDefinitions'];
    }

    /**
     * Sets collectibleDefinitions
     *
     * @param \Bungie\Model\Tokens\CollectibleDefinitions[]|null $collectibleDefinitions collectibleDefinitions
     *
     * @return $this
     */
    public function setCollectibleDefinitions($collectibleDefinitions)
    {
        $this->container['collectibleDefinitions'] = $collectibleDefinitions;

        return $this;
    }

    /**
     * Gets isOffer
     *
     * @return bool|null
     */
    public function getIsOffer()
    {
        return $this->container['isOffer'];
    }

    /**
     * Sets isOffer
     *
     * @param bool|null $isOffer isOffer
     *
     * @return $this
     */
    public function setIsOffer($isOffer)
    {
        $this->container['isOffer'] = $isOffer;

        return $this;
    }

    /**
     * Gets hasOffer
     *
     * @return bool|null
     */
    public function getHasOffer()
    {
        return $this->container['hasOffer'];
    }

    /**
     * Sets hasOffer
     *
     * @param bool|null $hasOffer hasOffer
     *
     * @return $this
     */
    public function setHasOffer($hasOffer)
    {
        $this->container['hasOffer'] = $hasOffer;

        return $this;
    }

    /**
     * Gets offerApplied
     *
     * @return bool|null
     */
    public function getOfferApplied()
    {
        return $this->container['offerApplied'];
    }

    /**
     * Sets offerApplied
     *
     * @param bool|null $offerApplied offerApplied
     *
     * @return $this
     */
    public function setOfferApplied($offerApplied)
    {
        $this->container['offerApplied'] = $offerApplied;

        return $this;
    }

    /**
     * Gets decryptedToken
     *
     * @return string|null
     */
    public function getDecryptedToken()
    {
        return $this->container['decryptedToken'];
    }

    /**
     * Sets decryptedToken
     *
     * @param string|null $decryptedToken decryptedToken
     *
     * @return $this
     */
    public function setDecryptedToken($decryptedToken)
    {
        $this->container['decryptedToken'] = $decryptedToken;

        return $this;
    }

    /**
     * Gets isLoyaltyReward
     *
     * @return bool|null
     */
    public function getIsLoyaltyReward()
    {
        return $this->container['isLoyaltyReward'];
    }

    /**
     * Sets isLoyaltyReward
     *
     * @param bool|null $isLoyaltyReward isLoyaltyReward
     *
     * @return $this
     */
    public function setIsLoyaltyReward($isLoyaltyReward)
    {
        $this->container['isLoyaltyReward'] = $isLoyaltyReward;

        return $this;
    }

    /**
     * Gets shopifyEndDate
     *
     * @return \DateTime|null
     */
    public function getShopifyEndDate()
    {
        return $this->container['shopifyEndDate'];
    }

    /**
     * Sets shopifyEndDate
     *
     * @param \DateTime|null $shopifyEndDate shopifyEndDate
     *
     * @return $this
     */
    public function setShopifyEndDate($shopifyEndDate)
    {
        $this->container['shopifyEndDate'] = $shopifyEndDate;

        return $this;
    }

    /**
     * Gets gameEarnByDate
     *
     * @return \DateTime|null
     */
    public function getGameEarnByDate()
    {
        return $this->container['gameEarnByDate'];
    }

    /**
     * Sets gameEarnByDate
     *
     * @param \DateTime|null $gameEarnByDate gameEarnByDate
     *
     * @return $this
     */
    public function setGameEarnByDate($gameEarnByDate)
    {
        $this->container['gameEarnByDate'] = $gameEarnByDate;

        return $this;
    }

    /**
     * Gets redemptionEndDate
     *
     * @return \DateTime|null
     */
    public function getRedemptionEndDate()
    {
        return $this->container['redemptionEndDate'];
    }

    /**
     * Sets redemptionEndDate
     *
     * @param \DateTime|null $redemptionEndDate redemptionEndDate
     *
     * @return $this
     */
    public function setRedemptionEndDate($redemptionEndDate)
    {
        $this->container['redemptionEndDate'] = $redemptionEndDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


