<?php
/**
 * DestinyDestinyItemSubType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model;
use \Bungie\ObjectSerializer;

/**
 * DestinyDestinyItemSubType Class Doc Comment
 *
 * @category Class
 * @description This Enumeration further classifies items by more specific categorizations than DestinyItemType. The \&quot;Sub-Type\&quot; is where we classify and categorize items one step further in specificity: \&quot;Auto Rifle\&quot; instead of just \&quot;Weapon\&quot; for example, or \&quot;Vanguard Bounty\&quot; instead of merely \&quot;Bounty\&quot;.  These sub-types are provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a \&quot;best guess\&quot; fit.  NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyDestinyItemSubType
{
    /**
     * Possible values of this enum
     */
    const NONE = 0;
    const CRUCIBLE = 1;
    const VANGUARD = 2;
    const EXOTIC = 5;
    const AUTORIFLE = 6;
    const SHOTGUN = 7;
    const MACHINEGUN = 8;
    const HANDCANNON = 9;
    const ROCKETLAUNCHER = 10;
    const FUSIONRIFLE = 11;
    const SNIPERRIFLE = 12;
    const PULSERIFLE = 13;
    const SCOUTRIFLE = 14;
    const CRM = 16;
    const SIDEARM = 17;
    const SWORD = 18;
    const MASK = 19;
    const SHADER = 20;
    const ORNAMENT = 21;
    const FUSIONRIFLELINE = 22;
    const GRENADELAUNCHER = 23;
    const SUBMACHINEGUN = 24;
    const TRACERIFLE = 25;
    const HELMETARMOR = 26;
    const GAUNTLETSARMOR = 27;
    const CHESTARMOR = 28;
    const LEGARMOR = 29;
    const CLASSARMOR = 30;
    const BOW = 31;
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::NONE,
            self::CRUCIBLE,
            self::VANGUARD,
            self::EXOTIC,
            self::AUTORIFLE,
            self::SHOTGUN,
            self::MACHINEGUN,
            self::HANDCANNON,
            self::ROCKETLAUNCHER,
            self::FUSIONRIFLE,
            self::SNIPERRIFLE,
            self::PULSERIFLE,
            self::SCOUTRIFLE,
            self::CRM,
            self::SIDEARM,
            self::SWORD,
            self::MASK,
            self::SHADER,
            self::ORNAMENT,
            self::FUSIONRIFLELINE,
            self::GRENADELAUNCHER,
            self::SUBMACHINEGUN,
            self::TRACERIFLE,
            self::HELMETARMOR,
            self::GAUNTLETSARMOR,
            self::CHESTARMOR,
            self::LEGARMOR,
            self::CLASSARMOR,
            self::BOW,
        ];
    }
}


