<?php
/**
 * GroupsV2GroupFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupsV2GroupFeatures Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsV2GroupFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupsV2.GroupFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'maximumMembers' => 'int',
        'maximumMembershipsOfGroupType' => 'int',
        'capabilities' => '\Bungie\Model\GroupsV2Capabilities',
        'membershipTypes' => '\Bungie\Model\BungieMembershipType[]',
        'invitePermissionOverride' => 'bool',
        'updateCulturePermissionOverride' => 'bool',
        'hostGuidedGamePermissionOverride' => 'object',
        'updateBannerPermissionOverride' => 'bool',
        'joinLevel' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'maximumMembers' => 'int32',
        'maximumMembershipsOfGroupType' => 'int32',
        'capabilities' => null,
        'membershipTypes' => null,
        'invitePermissionOverride' => null,
        'updateCulturePermissionOverride' => null,
        'hostGuidedGamePermissionOverride' => null,
        'updateBannerPermissionOverride' => null,
        'joinLevel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maximumMembers' => 'maximumMembers',
        'maximumMembershipsOfGroupType' => 'maximumMembershipsOfGroupType',
        'capabilities' => 'capabilities',
        'membershipTypes' => 'membershipTypes',
        'invitePermissionOverride' => 'invitePermissionOverride',
        'updateCulturePermissionOverride' => 'updateCulturePermissionOverride',
        'hostGuidedGamePermissionOverride' => 'hostGuidedGamePermissionOverride',
        'updateBannerPermissionOverride' => 'updateBannerPermissionOverride',
        'joinLevel' => 'joinLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maximumMembers' => 'setMaximumMembers',
        'maximumMembershipsOfGroupType' => 'setMaximumMembershipsOfGroupType',
        'capabilities' => 'setCapabilities',
        'membershipTypes' => 'setMembershipTypes',
        'invitePermissionOverride' => 'setInvitePermissionOverride',
        'updateCulturePermissionOverride' => 'setUpdateCulturePermissionOverride',
        'hostGuidedGamePermissionOverride' => 'setHostGuidedGamePermissionOverride',
        'updateBannerPermissionOverride' => 'setUpdateBannerPermissionOverride',
        'joinLevel' => 'setJoinLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maximumMembers' => 'getMaximumMembers',
        'maximumMembershipsOfGroupType' => 'getMaximumMembershipsOfGroupType',
        'capabilities' => 'getCapabilities',
        'membershipTypes' => 'getMembershipTypes',
        'invitePermissionOverride' => 'getInvitePermissionOverride',
        'updateCulturePermissionOverride' => 'getUpdateCulturePermissionOverride',
        'hostGuidedGamePermissionOverride' => 'getHostGuidedGamePermissionOverride',
        'updateBannerPermissionOverride' => 'getUpdateBannerPermissionOverride',
        'joinLevel' => 'getJoinLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maximumMembers'] = isset($data['maximumMembers']) ? $data['maximumMembers'] : null;
        $this->container['maximumMembershipsOfGroupType'] = isset($data['maximumMembershipsOfGroupType']) ? $data['maximumMembershipsOfGroupType'] : null;
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['membershipTypes'] = isset($data['membershipTypes']) ? $data['membershipTypes'] : null;
        $this->container['invitePermissionOverride'] = isset($data['invitePermissionOverride']) ? $data['invitePermissionOverride'] : null;
        $this->container['updateCulturePermissionOverride'] = isset($data['updateCulturePermissionOverride']) ? $data['updateCulturePermissionOverride'] : null;
        $this->container['hostGuidedGamePermissionOverride'] = isset($data['hostGuidedGamePermissionOverride']) ? $data['hostGuidedGamePermissionOverride'] : null;
        $this->container['updateBannerPermissionOverride'] = isset($data['updateBannerPermissionOverride']) ? $data['updateBannerPermissionOverride'] : null;
        $this->container['joinLevel'] = isset($data['joinLevel']) ? $data['joinLevel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets maximumMembers
     *
     * @return int
     */
    public function getMaximumMembers()
    {
        return $this->container['maximumMembers'];
    }

    /**
     * Sets maximumMembers
     *
     * @param int $maximumMembers maximumMembers
     *
     * @return $this
     */
    public function setMaximumMembers($maximumMembers)
    {
        $this->container['maximumMembers'] = $maximumMembers;

        return $this;
    }

    /**
     * Gets maximumMembershipsOfGroupType
     *
     * @return int
     */
    public function getMaximumMembershipsOfGroupType()
    {
        return $this->container['maximumMembershipsOfGroupType'];
    }

    /**
     * Sets maximumMembershipsOfGroupType
     *
     * @param int $maximumMembershipsOfGroupType Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
     *
     * @return $this
     */
    public function setMaximumMembershipsOfGroupType($maximumMembershipsOfGroupType)
    {
        $this->container['maximumMembershipsOfGroupType'] = $maximumMembershipsOfGroupType;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return \Bungie\Model\GroupsV2Capabilities
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param \Bungie\Model\GroupsV2Capabilities $capabilities capabilities
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets membershipTypes
     *
     * @return \Bungie\Model\BungieMembershipType[]
     */
    public function getMembershipTypes()
    {
        return $this->container['membershipTypes'];
    }

    /**
     * Sets membershipTypes
     *
     * @param \Bungie\Model\BungieMembershipType[] $membershipTypes membershipTypes
     *
     * @return $this
     */
    public function setMembershipTypes($membershipTypes)
    {
        $this->container['membershipTypes'] = $membershipTypes;

        return $this;
    }

    /**
     * Gets invitePermissionOverride
     *
     * @return bool
     */
    public function getInvitePermissionOverride()
    {
        return $this->container['invitePermissionOverride'];
    }

    /**
     * Sets invitePermissionOverride
     *
     * @param bool $invitePermissionOverride Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return $this
     */
    public function setInvitePermissionOverride($invitePermissionOverride)
    {
        $this->container['invitePermissionOverride'] = $invitePermissionOverride;

        return $this;
    }

    /**
     * Gets updateCulturePermissionOverride
     *
     * @return bool
     */
    public function getUpdateCulturePermissionOverride()
    {
        return $this->container['updateCulturePermissionOverride'];
    }

    /**
     * Sets updateCulturePermissionOverride
     *
     * @param bool $updateCulturePermissionOverride Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return $this
     */
    public function setUpdateCulturePermissionOverride($updateCulturePermissionOverride)
    {
        $this->container['updateCulturePermissionOverride'] = $updateCulturePermissionOverride;

        return $this;
    }

    /**
     * Gets hostGuidedGamePermissionOverride
     *
     * @return object
     */
    public function getHostGuidedGamePermissionOverride()
    {
        return $this->container['hostGuidedGamePermissionOverride'];
    }

    /**
     * Sets hostGuidedGamePermissionOverride
     *
     * @param object $hostGuidedGamePermissionOverride Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
     *
     * @return $this
     */
    public function setHostGuidedGamePermissionOverride($hostGuidedGamePermissionOverride)
    {
        $this->container['hostGuidedGamePermissionOverride'] = $hostGuidedGamePermissionOverride;

        return $this;
    }

    /**
     * Gets updateBannerPermissionOverride
     *
     * @return bool
     */
    public function getUpdateBannerPermissionOverride()
    {
        return $this->container['updateBannerPermissionOverride'];
    }

    /**
     * Sets updateBannerPermissionOverride
     *
     * @param bool $updateBannerPermissionOverride Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.
     *
     * @return $this
     */
    public function setUpdateBannerPermissionOverride($updateBannerPermissionOverride)
    {
        $this->container['updateBannerPermissionOverride'] = $updateBannerPermissionOverride;

        return $this;
    }

    /**
     * Gets joinLevel
     *
     * @return object
     */
    public function getJoinLevel()
    {
        return $this->container['joinLevel'];
    }

    /**
     * Sets joinLevel
     *
     * @param object $joinLevel Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
     *
     * @return $this
     */
    public function setJoinLevel($joinLevel)
    {
        $this->container['joinLevel'] = $joinLevel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


