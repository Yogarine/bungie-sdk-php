<?php
/**
 * ForumRecruitmentDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Forum;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * ForumRecruitmentDetail Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ForumRecruitmentDetail implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Forum.ForumRecruitmentDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'topicId' => 'int',
        'microphoneRequired' => 'bool',
        'intensity' => '\Bungie\Model\Forum\ForumRecruitmentIntensityLabel',
        'tone' => '\Bungie\Model\Forum\ForumRecruitmentToneLabel',
        'approved' => 'bool',
        'conversationId' => 'int',
        'playerSlotsTotal' => 'int',
        'playerSlotsRemaining' => 'int',
        'fireteam' => '\Bungie\Model\User\GeneralUser[]',
        'kickedPlayerIds' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'topicId' => 'int64',
        'microphoneRequired' => null,
        'intensity' => null,
        'tone' => null,
        'approved' => null,
        'conversationId' => 'int64',
        'playerSlotsTotal' => 'int32',
        'playerSlotsRemaining' => 'int32',
        'fireteam' => null,
        'kickedPlayerIds' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topicId' => 'topicId',
        'microphoneRequired' => 'microphoneRequired',
        'intensity' => 'intensity',
        'tone' => 'tone',
        'approved' => 'approved',
        'conversationId' => 'conversationId',
        'playerSlotsTotal' => 'playerSlotsTotal',
        'playerSlotsRemaining' => 'playerSlotsRemaining',
        'fireteam' => 'Fireteam',
        'kickedPlayerIds' => 'kickedPlayerIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topicId' => 'setTopicId',
        'microphoneRequired' => 'setMicrophoneRequired',
        'intensity' => 'setIntensity',
        'tone' => 'setTone',
        'approved' => 'setApproved',
        'conversationId' => 'setConversationId',
        'playerSlotsTotal' => 'setPlayerSlotsTotal',
        'playerSlotsRemaining' => 'setPlayerSlotsRemaining',
        'fireteam' => 'setFireteam',
        'kickedPlayerIds' => 'setKickedPlayerIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topicId' => 'getTopicId',
        'microphoneRequired' => 'getMicrophoneRequired',
        'intensity' => 'getIntensity',
        'tone' => 'getTone',
        'approved' => 'getApproved',
        'conversationId' => 'getConversationId',
        'playerSlotsTotal' => 'getPlayerSlotsTotal',
        'playerSlotsRemaining' => 'getPlayerSlotsRemaining',
        'fireteam' => 'getFireteam',
        'kickedPlayerIds' => 'getKickedPlayerIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topicId'] = isset($data['topicId']) ? $data['topicId'] : null;
        $this->container['microphoneRequired'] = isset($data['microphoneRequired']) ? $data['microphoneRequired'] : null;
        $this->container['intensity'] = isset($data['intensity']) ? $data['intensity'] : null;
        $this->container['tone'] = isset($data['tone']) ? $data['tone'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['conversationId'] = isset($data['conversationId']) ? $data['conversationId'] : null;
        $this->container['playerSlotsTotal'] = isset($data['playerSlotsTotal']) ? $data['playerSlotsTotal'] : null;
        $this->container['playerSlotsRemaining'] = isset($data['playerSlotsRemaining']) ? $data['playerSlotsRemaining'] : null;
        $this->container['fireteam'] = isset($data['fireteam']) ? $data['fireteam'] : null;
        $this->container['kickedPlayerIds'] = isset($data['kickedPlayerIds']) ? $data['kickedPlayerIds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topicId
     *
     * @return int|null
     */
    public function getTopicId()
    {
        return $this->container['topicId'];
    }

    /**
     * Sets topicId
     *
     * @param int|null $topicId topicId
     *
     * @return $this
     */
    public function setTopicId($topicId)
    {
        $this->container['topicId'] = $topicId;

        return $this;
    }

    /**
     * Gets microphoneRequired
     *
     * @return bool|null
     */
    public function getMicrophoneRequired()
    {
        return $this->container['microphoneRequired'];
    }

    /**
     * Sets microphoneRequired
     *
     * @param bool|null $microphoneRequired microphoneRequired
     *
     * @return $this
     */
    public function setMicrophoneRequired($microphoneRequired)
    {
        $this->container['microphoneRequired'] = $microphoneRequired;

        return $this;
    }

    /**
     * Gets intensity
     *
     * @return \Bungie\Model\Forum\ForumRecruitmentIntensityLabel|null
     */
    public function getIntensity()
    {
        return $this->container['intensity'];
    }

    /**
     * Sets intensity
     *
     * @param \Bungie\Model\Forum\ForumRecruitmentIntensityLabel|null $intensity intensity
     *
     * @return $this
     */
    public function setIntensity($intensity)
    {
        $this->container['intensity'] = $intensity;

        return $this;
    }

    /**
     * Gets tone
     *
     * @return \Bungie\Model\Forum\ForumRecruitmentToneLabel|null
     */
    public function getTone()
    {
        return $this->container['tone'];
    }

    /**
     * Sets tone
     *
     * @param \Bungie\Model\Forum\ForumRecruitmentToneLabel|null $tone tone
     *
     * @return $this
     */
    public function setTone($tone)
    {
        $this->container['tone'] = $tone;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets conversationId
     *
     * @return int|null
     */
    public function getConversationId()
    {
        return $this->container['conversationId'];
    }

    /**
     * Sets conversationId
     *
     * @param int|null $conversationId conversationId
     *
     * @return $this
     */
    public function setConversationId($conversationId)
    {
        $this->container['conversationId'] = $conversationId;

        return $this;
    }

    /**
     * Gets playerSlotsTotal
     *
     * @return int|null
     */
    public function getPlayerSlotsTotal()
    {
        return $this->container['playerSlotsTotal'];
    }

    /**
     * Sets playerSlotsTotal
     *
     * @param int|null $playerSlotsTotal playerSlotsTotal
     *
     * @return $this
     */
    public function setPlayerSlotsTotal($playerSlotsTotal)
    {
        $this->container['playerSlotsTotal'] = $playerSlotsTotal;

        return $this;
    }

    /**
     * Gets playerSlotsRemaining
     *
     * @return int|null
     */
    public function getPlayerSlotsRemaining()
    {
        return $this->container['playerSlotsRemaining'];
    }

    /**
     * Sets playerSlotsRemaining
     *
     * @param int|null $playerSlotsRemaining playerSlotsRemaining
     *
     * @return $this
     */
    public function setPlayerSlotsRemaining($playerSlotsRemaining)
    {
        $this->container['playerSlotsRemaining'] = $playerSlotsRemaining;

        return $this;
    }

    /**
     * Gets fireteam
     *
     * @return \Bungie\Model\User\GeneralUser[]|null
     */
    public function getFireteam()
    {
        return $this->container['fireteam'];
    }

    /**
     * Sets fireteam
     *
     * @param \Bungie\Model\User\GeneralUser[]|null $fireteam fireteam
     *
     * @return $this
     */
    public function setFireteam($fireteam)
    {
        $this->container['fireteam'] = $fireteam;

        return $this;
    }

    /**
     * Gets kickedPlayerIds
     *
     * @return int[]|null
     */
    public function getKickedPlayerIds()
    {
        return $this->container['kickedPlayerIds'];
    }

    /**
     * Sets kickedPlayerIds
     *
     * @param int[]|null $kickedPlayerIds kickedPlayerIds
     *
     * @return $this
     */
    public function setKickedPlayerIds($kickedPlayerIds)
    {
        $this->container['kickedPlayerIds'] = $kickedPlayerIds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


