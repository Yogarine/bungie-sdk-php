<?php
/**
 * DestinyDefinitionsDestinyInventoryItemDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyInventoryItemDefinition Class Doc Comment
 *
 * @category Class
 * @description So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.  In practice, you will want to associate this data with \&quot;live\&quot; item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyInventoryItemDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyInventoryItemDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'displayProperties' => '\Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'collectibleHash' => 'int',
        'secondaryIcon' => 'string',
        'secondaryOverlay' => 'string',
        'secondarySpecial' => 'string',
        'backgroundColor' => 'object',
        'screenshot' => 'string',
        'itemTypeDisplayName' => 'string',
        'uiItemDisplayStyle' => 'string',
        'itemTypeAndTierDisplayName' => 'string',
        'displaySource' => 'string',
        'tooltipStyle' => 'string',
        'action' => 'object',
        'inventory' => 'object',
        'setData' => 'object',
        'stats' => 'object',
        'emblemObjectiveHash' => 'int',
        'equippingBlock' => 'object',
        'translationBlock' => 'object',
        'preview' => 'object',
        'quality' => 'object',
        'value' => 'object',
        'sourceData' => 'object',
        'objectives' => 'object',
        'plug' => 'object',
        'gearset' => 'object',
        'sack' => 'object',
        'sockets' => 'object',
        'summary' => 'object',
        'talentGrid' => 'object',
        'investmentStats' => '\Bungie\Model\DestinyDefinitionsDestinyItemInvestmentStatDefinition[]',
        'perks' => '\Bungie\Model\DestinyDefinitionsDestinyItemPerkEntryDefinition[]',
        'loreHash' => 'int',
        'summaryItemHash' => 'int',
        'animations' => '\Bungie\Model\DestinyDefinitionsAnimationsDestinyAnimationReference[]',
        'allowActions' => 'bool',
        'links' => '\Bungie\Model\LinksHyperlinkReference[]',
        'doesPostmasterPullHaveSideEffects' => 'bool',
        'nonTransferrable' => 'bool',
        'itemCategoryHashes' => 'int[]',
        'specialItemType' => 'object',
        'itemType' => 'object',
        'itemSubType' => 'object',
        'classType' => 'object',
        'equippable' => 'bool',
        'damageTypeHashes' => 'int[]',
        'damageTypes' => '\Bungie\Model\DestinyDamageType[]',
        'defaultDamageType' => 'object',
        'defaultDamageTypeHash' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'displayProperties' => null,
        'collectibleHash' => 'uint32',
        'secondaryIcon' => null,
        'secondaryOverlay' => null,
        'secondarySpecial' => null,
        'backgroundColor' => null,
        'screenshot' => null,
        'itemTypeDisplayName' => null,
        'uiItemDisplayStyle' => null,
        'itemTypeAndTierDisplayName' => null,
        'displaySource' => null,
        'tooltipStyle' => null,
        'action' => null,
        'inventory' => null,
        'setData' => null,
        'stats' => null,
        'emblemObjectiveHash' => 'uint32',
        'equippingBlock' => null,
        'translationBlock' => null,
        'preview' => null,
        'quality' => null,
        'value' => null,
        'sourceData' => null,
        'objectives' => null,
        'plug' => null,
        'gearset' => null,
        'sack' => null,
        'sockets' => null,
        'summary' => null,
        'talentGrid' => null,
        'investmentStats' => null,
        'perks' => null,
        'loreHash' => 'uint32',
        'summaryItemHash' => 'uint32',
        'animations' => null,
        'allowActions' => null,
        'links' => null,
        'doesPostmasterPullHaveSideEffects' => null,
        'nonTransferrable' => null,
        'itemCategoryHashes' => 'uint32',
        'specialItemType' => null,
        'itemType' => null,
        'itemSubType' => null,
        'classType' => null,
        'equippable' => null,
        'damageTypeHashes' => 'uint32',
        'damageTypes' => null,
        'defaultDamageType' => null,
        'defaultDamageTypeHash' => 'uint32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'collectibleHash' => 'collectibleHash',
        'secondaryIcon' => 'secondaryIcon',
        'secondaryOverlay' => 'secondaryOverlay',
        'secondarySpecial' => 'secondarySpecial',
        'backgroundColor' => 'backgroundColor',
        'screenshot' => 'screenshot',
        'itemTypeDisplayName' => 'itemTypeDisplayName',
        'uiItemDisplayStyle' => 'uiItemDisplayStyle',
        'itemTypeAndTierDisplayName' => 'itemTypeAndTierDisplayName',
        'displaySource' => 'displaySource',
        'tooltipStyle' => 'tooltipStyle',
        'action' => 'action',
        'inventory' => 'inventory',
        'setData' => 'setData',
        'stats' => 'stats',
        'emblemObjectiveHash' => 'emblemObjectiveHash',
        'equippingBlock' => 'equippingBlock',
        'translationBlock' => 'translationBlock',
        'preview' => 'preview',
        'quality' => 'quality',
        'value' => 'value',
        'sourceData' => 'sourceData',
        'objectives' => 'objectives',
        'plug' => 'plug',
        'gearset' => 'gearset',
        'sack' => 'sack',
        'sockets' => 'sockets',
        'summary' => 'summary',
        'talentGrid' => 'talentGrid',
        'investmentStats' => 'investmentStats',
        'perks' => 'perks',
        'loreHash' => 'loreHash',
        'summaryItemHash' => 'summaryItemHash',
        'animations' => 'animations',
        'allowActions' => 'allowActions',
        'links' => 'links',
        'doesPostmasterPullHaveSideEffects' => 'doesPostmasterPullHaveSideEffects',
        'nonTransferrable' => 'nonTransferrable',
        'itemCategoryHashes' => 'itemCategoryHashes',
        'specialItemType' => 'specialItemType',
        'itemType' => 'itemType',
        'itemSubType' => 'itemSubType',
        'classType' => 'classType',
        'equippable' => 'equippable',
        'damageTypeHashes' => 'damageTypeHashes',
        'damageTypes' => 'damageTypes',
        'defaultDamageType' => 'defaultDamageType',
        'defaultDamageTypeHash' => 'defaultDamageTypeHash',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'collectibleHash' => 'setCollectibleHash',
        'secondaryIcon' => 'setSecondaryIcon',
        'secondaryOverlay' => 'setSecondaryOverlay',
        'secondarySpecial' => 'setSecondarySpecial',
        'backgroundColor' => 'setBackgroundColor',
        'screenshot' => 'setScreenshot',
        'itemTypeDisplayName' => 'setItemTypeDisplayName',
        'uiItemDisplayStyle' => 'setUiItemDisplayStyle',
        'itemTypeAndTierDisplayName' => 'setItemTypeAndTierDisplayName',
        'displaySource' => 'setDisplaySource',
        'tooltipStyle' => 'setTooltipStyle',
        'action' => 'setAction',
        'inventory' => 'setInventory',
        'setData' => 'setSetData',
        'stats' => 'setStats',
        'emblemObjectiveHash' => 'setEmblemObjectiveHash',
        'equippingBlock' => 'setEquippingBlock',
        'translationBlock' => 'setTranslationBlock',
        'preview' => 'setPreview',
        'quality' => 'setQuality',
        'value' => 'setValue',
        'sourceData' => 'setSourceData',
        'objectives' => 'setObjectives',
        'plug' => 'setPlug',
        'gearset' => 'setGearset',
        'sack' => 'setSack',
        'sockets' => 'setSockets',
        'summary' => 'setSummary',
        'talentGrid' => 'setTalentGrid',
        'investmentStats' => 'setInvestmentStats',
        'perks' => 'setPerks',
        'loreHash' => 'setLoreHash',
        'summaryItemHash' => 'setSummaryItemHash',
        'animations' => 'setAnimations',
        'allowActions' => 'setAllowActions',
        'links' => 'setLinks',
        'doesPostmasterPullHaveSideEffects' => 'setDoesPostmasterPullHaveSideEffects',
        'nonTransferrable' => 'setNonTransferrable',
        'itemCategoryHashes' => 'setItemCategoryHashes',
        'specialItemType' => 'setSpecialItemType',
        'itemType' => 'setItemType',
        'itemSubType' => 'setItemSubType',
        'classType' => 'setClassType',
        'equippable' => 'setEquippable',
        'damageTypeHashes' => 'setDamageTypeHashes',
        'damageTypes' => 'setDamageTypes',
        'defaultDamageType' => 'setDefaultDamageType',
        'defaultDamageTypeHash' => 'setDefaultDamageTypeHash',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'collectibleHash' => 'getCollectibleHash',
        'secondaryIcon' => 'getSecondaryIcon',
        'secondaryOverlay' => 'getSecondaryOverlay',
        'secondarySpecial' => 'getSecondarySpecial',
        'backgroundColor' => 'getBackgroundColor',
        'screenshot' => 'getScreenshot',
        'itemTypeDisplayName' => 'getItemTypeDisplayName',
        'uiItemDisplayStyle' => 'getUiItemDisplayStyle',
        'itemTypeAndTierDisplayName' => 'getItemTypeAndTierDisplayName',
        'displaySource' => 'getDisplaySource',
        'tooltipStyle' => 'getTooltipStyle',
        'action' => 'getAction',
        'inventory' => 'getInventory',
        'setData' => 'getSetData',
        'stats' => 'getStats',
        'emblemObjectiveHash' => 'getEmblemObjectiveHash',
        'equippingBlock' => 'getEquippingBlock',
        'translationBlock' => 'getTranslationBlock',
        'preview' => 'getPreview',
        'quality' => 'getQuality',
        'value' => 'getValue',
        'sourceData' => 'getSourceData',
        'objectives' => 'getObjectives',
        'plug' => 'getPlug',
        'gearset' => 'getGearset',
        'sack' => 'getSack',
        'sockets' => 'getSockets',
        'summary' => 'getSummary',
        'talentGrid' => 'getTalentGrid',
        'investmentStats' => 'getInvestmentStats',
        'perks' => 'getPerks',
        'loreHash' => 'getLoreHash',
        'summaryItemHash' => 'getSummaryItemHash',
        'animations' => 'getAnimations',
        'allowActions' => 'getAllowActions',
        'links' => 'getLinks',
        'doesPostmasterPullHaveSideEffects' => 'getDoesPostmasterPullHaveSideEffects',
        'nonTransferrable' => 'getNonTransferrable',
        'itemCategoryHashes' => 'getItemCategoryHashes',
        'specialItemType' => 'getSpecialItemType',
        'itemType' => 'getItemType',
        'itemSubType' => 'getItemSubType',
        'classType' => 'getClassType',
        'equippable' => 'getEquippable',
        'damageTypeHashes' => 'getDamageTypeHashes',
        'damageTypes' => 'getDamageTypes',
        'defaultDamageType' => 'getDefaultDamageType',
        'defaultDamageTypeHash' => 'getDefaultDamageTypeHash',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['collectibleHash'] = isset($data['collectibleHash']) ? $data['collectibleHash'] : null;
        $this->container['secondaryIcon'] = isset($data['secondaryIcon']) ? $data['secondaryIcon'] : null;
        $this->container['secondaryOverlay'] = isset($data['secondaryOverlay']) ? $data['secondaryOverlay'] : null;
        $this->container['secondarySpecial'] = isset($data['secondarySpecial']) ? $data['secondarySpecial'] : null;
        $this->container['backgroundColor'] = isset($data['backgroundColor']) ? $data['backgroundColor'] : null;
        $this->container['screenshot'] = isset($data['screenshot']) ? $data['screenshot'] : null;
        $this->container['itemTypeDisplayName'] = isset($data['itemTypeDisplayName']) ? $data['itemTypeDisplayName'] : null;
        $this->container['uiItemDisplayStyle'] = isset($data['uiItemDisplayStyle']) ? $data['uiItemDisplayStyle'] : null;
        $this->container['itemTypeAndTierDisplayName'] = isset($data['itemTypeAndTierDisplayName']) ? $data['itemTypeAndTierDisplayName'] : null;
        $this->container['displaySource'] = isset($data['displaySource']) ? $data['displaySource'] : null;
        $this->container['tooltipStyle'] = isset($data['tooltipStyle']) ? $data['tooltipStyle'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['setData'] = isset($data['setData']) ? $data['setData'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['emblemObjectiveHash'] = isset($data['emblemObjectiveHash']) ? $data['emblemObjectiveHash'] : null;
        $this->container['equippingBlock'] = isset($data['equippingBlock']) ? $data['equippingBlock'] : null;
        $this->container['translationBlock'] = isset($data['translationBlock']) ? $data['translationBlock'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['sourceData'] = isset($data['sourceData']) ? $data['sourceData'] : null;
        $this->container['objectives'] = isset($data['objectives']) ? $data['objectives'] : null;
        $this->container['plug'] = isset($data['plug']) ? $data['plug'] : null;
        $this->container['gearset'] = isset($data['gearset']) ? $data['gearset'] : null;
        $this->container['sack'] = isset($data['sack']) ? $data['sack'] : null;
        $this->container['sockets'] = isset($data['sockets']) ? $data['sockets'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['talentGrid'] = isset($data['talentGrid']) ? $data['talentGrid'] : null;
        $this->container['investmentStats'] = isset($data['investmentStats']) ? $data['investmentStats'] : null;
        $this->container['perks'] = isset($data['perks']) ? $data['perks'] : null;
        $this->container['loreHash'] = isset($data['loreHash']) ? $data['loreHash'] : null;
        $this->container['summaryItemHash'] = isset($data['summaryItemHash']) ? $data['summaryItemHash'] : null;
        $this->container['animations'] = isset($data['animations']) ? $data['animations'] : null;
        $this->container['allowActions'] = isset($data['allowActions']) ? $data['allowActions'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['doesPostmasterPullHaveSideEffects'] = isset($data['doesPostmasterPullHaveSideEffects']) ? $data['doesPostmasterPullHaveSideEffects'] : null;
        $this->container['nonTransferrable'] = isset($data['nonTransferrable']) ? $data['nonTransferrable'] : null;
        $this->container['itemCategoryHashes'] = isset($data['itemCategoryHashes']) ? $data['itemCategoryHashes'] : null;
        $this->container['specialItemType'] = isset($data['specialItemType']) ? $data['specialItemType'] : null;
        $this->container['itemType'] = isset($data['itemType']) ? $data['itemType'] : null;
        $this->container['itemSubType'] = isset($data['itemSubType']) ? $data['itemSubType'] : null;
        $this->container['classType'] = isset($data['classType']) ? $data['classType'] : null;
        $this->container['equippable'] = isset($data['equippable']) ? $data['equippable'] : null;
        $this->container['damageTypeHashes'] = isset($data['damageTypeHashes']) ? $data['damageTypeHashes'] : null;
        $this->container['damageTypes'] = isset($data['damageTypes']) ? $data['damageTypes'] : null;
        $this->container['defaultDamageType'] = isset($data['defaultDamageType']) ? $data['defaultDamageType'] : null;
        $this->container['defaultDamageTypeHash'] = isset($data['defaultDamageTypeHash']) ? $data['defaultDamageTypeHash'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets displayProperties
     *
     * @return \Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param \Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition $displayProperties displayProperties
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets collectibleHash
     *
     * @return int
     */
    public function getCollectibleHash()
    {
        return $this->container['collectibleHash'];
    }

    /**
     * Sets collectibleHash
     *
     * @param int $collectibleHash If this item has a collectible related to it, this is the hash identifier of that collectible entry.
     *
     * @return $this
     */
    public function setCollectibleHash($collectibleHash)
    {
        $this->container['collectibleHash'] = $collectibleHash;

        return $this;
    }

    /**
     * Gets secondaryIcon
     *
     * @return string
     */
    public function getSecondaryIcon()
    {
        return $this->container['secondaryIcon'];
    }

    /**
     * Sets secondaryIcon
     *
     * @param string $secondaryIcon A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.
     *
     * @return $this
     */
    public function setSecondaryIcon($secondaryIcon)
    {
        $this->container['secondaryIcon'] = $secondaryIcon;

        return $this;
    }

    /**
     * Gets secondaryOverlay
     *
     * @return string
     */
    public function getSecondaryOverlay()
    {
        return $this->container['secondaryOverlay'];
    }

    /**
     * Sets secondaryOverlay
     *
     * @param string $secondaryOverlay Pulled from the secondary icon, this is the \"secondary background\" of the secondary icon. Confusing? Sure, that's why I call it \"overlay\" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.
     *
     * @return $this
     */
    public function setSecondaryOverlay($secondaryOverlay)
    {
        $this->container['secondaryOverlay'] = $secondaryOverlay;

        return $this;
    }

    /**
     * Gets secondarySpecial
     *
     * @return string
     */
    public function getSecondarySpecial()
    {
        return $this->container['secondarySpecial'];
    }

    /**
     * Sets secondarySpecial
     *
     * @param string $secondarySpecial Pulled from the Secondary Icon, this is the \"special\" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.
     *
     * @return $this
     */
    public function setSecondarySpecial($secondarySpecial)
    {
        $this->container['secondarySpecial'] = $secondarySpecial;

        return $this;
    }

    /**
     * Gets backgroundColor
     *
     * @return object
     */
    public function getBackgroundColor()
    {
        return $this->container['backgroundColor'];
    }

    /**
     * Sets backgroundColor
     *
     * @param object $backgroundColor Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the \"friends\" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.
     *
     * @return $this
     */
    public function setBackgroundColor($backgroundColor)
    {
        $this->container['backgroundColor'] = $backgroundColor;

        return $this;
    }

    /**
     * Gets screenshot
     *
     * @return string
     */
    public function getScreenshot()
    {
        return $this->container['screenshot'];
    }

    /**
     * Sets screenshot
     *
     * @param string $screenshot If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.
     *
     * @return $this
     */
    public function setScreenshot($screenshot)
    {
        $this->container['screenshot'] = $screenshot;

        return $this;
    }

    /**
     * Gets itemTypeDisplayName
     *
     * @return string
     */
    public function getItemTypeDisplayName()
    {
        return $this->container['itemTypeDisplayName'];
    }

    /**
     * Sets itemTypeDisplayName
     *
     * @param string $itemTypeDisplayName The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.
     *
     * @return $this
     */
    public function setItemTypeDisplayName($itemTypeDisplayName)
    {
        $this->container['itemTypeDisplayName'] = $itemTypeDisplayName;

        return $this;
    }

    /**
     * Gets uiItemDisplayStyle
     *
     * @return string
     */
    public function getUiItemDisplayStyle()
    {
        return $this->container['uiItemDisplayStyle'];
    }

    /**
     * Sets uiItemDisplayStyle
     *
     * @param string $uiItemDisplayStyle A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!
     *
     * @return $this
     */
    public function setUiItemDisplayStyle($uiItemDisplayStyle)
    {
        $this->container['uiItemDisplayStyle'] = $uiItemDisplayStyle;

        return $this;
    }

    /**
     * Gets itemTypeAndTierDisplayName
     *
     * @return string
     */
    public function getItemTypeAndTierDisplayName()
    {
        return $this->container['itemTypeAndTierDisplayName'];
    }

    /**
     * Sets itemTypeAndTierDisplayName
     *
     * @param string $itemTypeAndTierDisplayName It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.
     *
     * @return $this
     */
    public function setItemTypeAndTierDisplayName($itemTypeAndTierDisplayName)
    {
        $this->container['itemTypeAndTierDisplayName'] = $itemTypeAndTierDisplayName;

        return $this;
    }

    /**
     * Gets displaySource
     *
     * @return string
     */
    public function getDisplaySource()
    {
        return $this->container['displaySource'];
    }

    /**
     * Sets displaySource
     *
     * @param string $displaySource In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.
     *
     * @return $this
     */
    public function setDisplaySource($displaySource)
    {
        $this->container['displaySource'] = $displaySource;

        return $this;
    }

    /**
     * Gets tooltipStyle
     *
     * @return string
     */
    public function getTooltipStyle()
    {
        return $this->container['tooltipStyle'];
    }

    /**
     * Sets tooltipStyle
     *
     * @param string $tooltipStyle An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).
     *
     * @return $this
     */
    public function setTooltipStyle($tooltipStyle)
    {
        $this->container['tooltipStyle'] = $tooltipStyle;

        return $this;
    }

    /**
     * Gets action
     *
     * @return object
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param object $action If the item can be \"used\", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is \"dismantle\". Shocker)
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return object
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param object $inventory If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets setData
     *
     * @return object
     */
    public function getSetData()
    {
        return $this->container['setData'];
    }

    /**
     * Sets setData
     *
     * @param object $setData If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.
     *
     * @return $this
     */
    public function setSetData($setData)
    {
        $this->container['setData'] = $setData;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return object
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param object $stats If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets emblemObjectiveHash
     *
     * @return int
     */
    public function getEmblemObjectiveHash()
    {
        return $this->container['emblemObjectiveHash'];
    }

    /**
     * Sets emblemObjectiveHash
     *
     * @param int $emblemObjectiveHash If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the \"art channel\". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.
     *
     * @return $this
     */
    public function setEmblemObjectiveHash($emblemObjectiveHash)
    {
        $this->container['emblemObjectiveHash'] = $emblemObjectiveHash;

        return $this;
    }

    /**
     * Gets equippingBlock
     *
     * @return object
     */
    public function getEquippingBlock()
    {
        return $this->container['equippingBlock'];
    }

    /**
     * Sets equippingBlock
     *
     * @param object $equippingBlock If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.
     *
     * @return $this
     */
    public function setEquippingBlock($equippingBlock)
    {
        $this->container['equippingBlock'] = $equippingBlock;

        return $this;
    }

    /**
     * Gets translationBlock
     *
     * @return object
     */
    public function getTranslationBlock()
    {
        return $this->container['translationBlock'];
    }

    /**
     * Sets translationBlock
     *
     * @param object $translationBlock If this item can be rendered, this block will be non-null and will be populated with rendering information.
     *
     * @return $this
     */
    public function setTranslationBlock($translationBlock)
    {
        $this->container['translationBlock'] = $translationBlock;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return object
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param object $preview If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.
     *
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return object
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param object $quality If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, \"quality\", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value The conceptual \"Value\" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets sourceData
     *
     * @return object
     */
    public function getSourceData()
    {
        return $this->container['sourceData'];
    }

    /**
     * Sets sourceData
     *
     * @param object $sourceData If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.
     *
     * @return $this
     */
    public function setSourceData($sourceData)
    {
        $this->container['sourceData'] = $sourceData;

        return $this;
    }

    /**
     * Gets objectives
     *
     * @return object
     */
    public function getObjectives()
    {
        return $this->container['objectives'];
    }

    /**
     * Sets objectives
     *
     * @param object $objectives If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.
     *
     * @return $this
     */
    public function setObjectives($objectives)
    {
        $this->container['objectives'] = $objectives;

        return $this;
    }

    /**
     * Gets plug
     *
     * @return object
     */
    public function getPlug()
    {
        return $this->container['plug'];
    }

    /**
     * Sets plug
     *
     * @param object $plug If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.
     *
     * @return $this
     */
    public function setPlug($plug)
    {
        $this->container['plug'] = $plug;

        return $this;
    }

    /**
     * Gets gearset
     *
     * @return object
     */
    public function getGearset()
    {
        return $this->container['gearset'];
    }

    /**
     * Sets gearset
     *
     * @param object $gearset If this item has related items in a \"Gear Set\", this will be non-null and the relationships defined herein.
     *
     * @return $this
     */
    public function setGearset($gearset)
    {
        $this->container['gearset'] = $gearset;

        return $this;
    }

    /**
     * Gets sack
     *
     * @return object
     */
    public function getSack()
    {
        return $this->container['sack'];
    }

    /**
     * Sets sack
     *
     * @param object $sack If this item is a \"reward sack\" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.
     *
     * @return $this
     */
    public function setSack($sack)
    {
        $this->container['sack'] = $sack;

        return $this;
    }

    /**
     * Gets sockets
     *
     * @return object
     */
    public function getSockets()
    {
        return $this->container['sockets'];
    }

    /**
     * Sets sockets
     *
     * @param object $sockets If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.
     *
     * @return $this
     */
    public function setSockets($sockets)
    {
        $this->container['sockets'] = $sockets;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return object
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param object $summary Summary data about the item.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets talentGrid
     *
     * @return object
     */
    public function getTalentGrid()
    {
        return $this->container['talentGrid'];
    }

    /**
     * Sets talentGrid
     *
     * @param object $talentGrid If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/\"Build\" items.
     *
     * @return $this
     */
    public function setTalentGrid($talentGrid)
    {
        $this->container['talentGrid'] = $talentGrid;

        return $this;
    }

    /**
     * Gets investmentStats
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyItemInvestmentStatDefinition[]
     */
    public function getInvestmentStats()
    {
        return $this->container['investmentStats'];
    }

    /**
     * Sets investmentStats
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyItemInvestmentStatDefinition[] $investmentStats If the item has stats, this block will be defined. It has the \"raw\" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.
     *
     * @return $this
     */
    public function setInvestmentStats($investmentStats)
    {
        $this->container['investmentStats'] = $investmentStats;

        return $this;
    }

    /**
     * Gets perks
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyItemPerkEntryDefinition[]
     */
    public function getPerks()
    {
        return $this->container['perks'];
    }

    /**
     * Sets perks
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyItemPerkEntryDefinition[] $perks If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.
     *
     * @return $this
     */
    public function setPerks($perks)
    {
        $this->container['perks'] = $perks;

        return $this;
    }

    /**
     * Gets loreHash
     *
     * @return int
     */
    public function getLoreHash()
    {
        return $this->container['loreHash'];
    }

    /**
     * Sets loreHash
     *
     * @param int $loreHash If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.
     *
     * @return $this
     */
    public function setLoreHash($loreHash)
    {
        $this->container['loreHash'] = $loreHash;

        return $this;
    }

    /**
     * Gets summaryItemHash
     *
     * @return int
     */
    public function getSummaryItemHash()
    {
        return $this->container['summaryItemHash'];
    }

    /**
     * Sets summaryItemHash
     *
     * @param int $summaryItemHash There are times when the game will show you a \"summary/vague\" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.  This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.
     *
     * @return $this
     */
    public function setSummaryItemHash($summaryItemHash)
    {
        $this->container['summaryItemHash'] = $summaryItemHash;

        return $this;
    }

    /**
     * Gets animations
     *
     * @return \Bungie\Model\DestinyDefinitionsAnimationsDestinyAnimationReference[]
     */
    public function getAnimations()
    {
        return $this->container['animations'];
    }

    /**
     * Sets animations
     *
     * @param \Bungie\Model\DestinyDefinitionsAnimationsDestinyAnimationReference[] $animations If any animations were extracted from game content for this item, these will be the definitions of those animations.
     *
     * @return $this
     */
    public function setAnimations($animations)
    {
        $this->container['animations'] = $animations;

        return $this;
    }

    /**
     * Gets allowActions
     *
     * @return bool
     */
    public function getAllowActions()
    {
        return $this->container['allowActions'];
    }

    /**
     * Sets allowActions
     *
     * @param bool $allowActions BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.
     *
     * @return $this
     */
    public function setAllowActions($allowActions)
    {
        $this->container['allowActions'] = $allowActions;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Bungie\Model\LinksHyperlinkReference[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Bungie\Model\LinksHyperlinkReference[] $links If we added any help or informational URLs about this item, these will be those links.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets doesPostmasterPullHaveSideEffects
     *
     * @return bool
     */
    public function getDoesPostmasterPullHaveSideEffects()
    {
        return $this->container['doesPostmasterPullHaveSideEffects'];
    }

    /**
     * Sets doesPostmasterPullHaveSideEffects
     *
     * @param bool $doesPostmasterPullHaveSideEffects The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a \"destructive\" action.  It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.
     *
     * @return $this
     */
    public function setDoesPostmasterPullHaveSideEffects($doesPostmasterPullHaveSideEffects)
    {
        $this->container['doesPostmasterPullHaveSideEffects'] = $doesPostmasterPullHaveSideEffects;

        return $this;
    }

    /**
     * Gets nonTransferrable
     *
     * @return bool
     */
    public function getNonTransferrable()
    {
        return $this->container['nonTransferrable'];
    }

    /**
     * Sets nonTransferrable
     *
     * @param bool $nonTransferrable The intrinsic transferability of an item.  I hate that this boolean is negative - but there's a reason.  Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.
     *
     * @return $this
     */
    public function setNonTransferrable($nonTransferrable)
    {
        $this->container['nonTransferrable'] = $nonTransferrable;

        return $this;
    }

    /**
     * Gets itemCategoryHashes
     *
     * @return int[]
     */
    public function getItemCategoryHashes()
    {
        return $this->container['itemCategoryHashes'];
    }

    /**
     * Sets itemCategoryHashes
     *
     * @param int[] $itemCategoryHashes BNet attempts to make a more formal definition of item \"Categories\", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a \"Weapon\", that it's an \"Auto Rifle\", etc...)  The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.
     *
     * @return $this
     */
    public function setItemCategoryHashes($itemCategoryHashes)
    {
        $this->container['itemCategoryHashes'] = $itemCategoryHashes;

        return $this;
    }

    /**
     * Gets specialItemType
     *
     * @return object
     */
    public function getSpecialItemType()
    {
        return $this->container['specialItemType'];
    }

    /**
     * Sets specialItemType
     *
     * @param object $specialItemType In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
     *
     * @return $this
     */
    public function setSpecialItemType($specialItemType)
    {
        $this->container['specialItemType'] = $specialItemType;

        return $this;
    }

    /**
     * Gets itemType
     *
     * @return object
     */
    public function getItemType()
    {
        return $this->container['itemType'];
    }

    /**
     * Sets itemType
     *
     * @param object $itemType A value indicating the \"base\" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a \"Type\". Still, it's handy in many situations.  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
     *
     * @return $this
     */
    public function setItemType($itemType)
    {
        $this->container['itemType'] = $itemType;

        return $this;
    }

    /**
     * Gets itemSubType
     *
     * @return object
     */
    public function getItemSubType()
    {
        return $this->container['itemSubType'];
    }

    /**
     * Sets itemSubType
     *
     * @param object $itemSubType A value indicating the \"sub-type\" of the item. For instance, where an item might have an itemType value \"Weapon\", this will be something more specific like \"Auto Rifle\".  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
     *
     * @return $this
     */
    public function setItemSubType($itemSubType)
    {
        $this->container['itemSubType'] = $itemSubType;

        return $this;
    }

    /**
     * Gets classType
     *
     * @return object
     */
    public function getClassType()
    {
        return $this->container['classType'];
    }

    /**
     * Sets classType
     *
     * @param object $classType We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.  If you see a mis-classed item, please inform the developers in the Bungie API forum.
     *
     * @return $this
     */
    public function setClassType($classType)
    {
        $this->container['classType'] = $classType;

        return $this;
    }

    /**
     * Gets equippable
     *
     * @return bool
     */
    public function getEquippable()
    {
        return $this->container['equippable'];
    }

    /**
     * Sets equippable
     *
     * @param bool $equippable If true, then you will be allowed to equip the item if you pass its other requirements.  This being false means that you cannot equip the item under any circumstances.
     *
     * @return $this
     */
    public function setEquippable($equippable)
    {
        $this->container['equippable'] = $equippable;

        return $this;
    }

    /**
     * Gets damageTypeHashes
     *
     * @return int[]
     */
    public function getDamageTypeHashes()
    {
        return $this->container['damageTypeHashes'];
    }

    /**
     * Sets damageTypeHashes
     *
     * @param int[] $damageTypeHashes Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.
     *
     * @return $this
     */
    public function setDamageTypeHashes($damageTypeHashes)
    {
        $this->container['damageTypeHashes'] = $damageTypeHashes;

        return $this;
    }

    /**
     * Gets damageTypes
     *
     * @return \Bungie\Model\DestinyDamageType[]
     */
    public function getDamageTypes()
    {
        return $this->container['damageTypes'];
    }

    /**
     * Sets damageTypes
     *
     * @param \Bungie\Model\DestinyDamageType[] $damageTypes This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.  This damage type prediction will only use the following to determine potential damage types:  - Intrinsic perks  - Talent Node perks  - Known, reusable plugs for sockets
     *
     * @return $this
     */
    public function setDamageTypes($damageTypes)
    {
        $this->container['damageTypes'] = $damageTypes;

        return $this;
    }

    /**
     * Gets defaultDamageType
     *
     * @return object
     */
    public function getDefaultDamageType()
    {
        return $this->container['defaultDamageType'];
    }

    /**
     * Sets defaultDamageType
     *
     * @param object $defaultDamageType If the item has a damage type that could be considered to be default, it will be populated here.  For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.
     *
     * @return $this
     */
    public function setDefaultDamageType($defaultDamageType)
    {
        $this->container['defaultDamageType'] = $defaultDamageType;

        return $this;
    }

    /**
     * Gets defaultDamageTypeHash
     *
     * @return int
     */
    public function getDefaultDamageTypeHash()
    {
        return $this->container['defaultDamageTypeHash'];
    }

    /**
     * Sets defaultDamageTypeHash
     *
     * @param int $defaultDamageTypeHash Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.  I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.
     *
     * @return $this
     */
    public function setDefaultDamageTypeHash($defaultDamageTypeHash)
    {
        $this->container['defaultDamageTypeHash'] = $defaultDamageTypeHash;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


