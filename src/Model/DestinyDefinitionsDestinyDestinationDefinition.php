<?php
/**
 * DestinyDefinitionsDestinyDestinationDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyDestinationDefinition Class Doc Comment
 *
 * @category Class
 * @description On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?  A \&quot;Destination\&quot; is a specific region/city/area of a larger \&quot;Place\&quot;. For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyDestinationDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyDestinationDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'displayProperties' => '\Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'placeHash' => 'int',
        'defaultFreeroamActivityHash' => 'int',
        'activityGraphEntries' => '\Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[]',
        'bubbleSettings' => '\Bungie\Model\DestinyDefinitionsDestinyDestinationBubbleSettingDefinition[]',
        'bubbles' => '\Bungie\Model\DestinyDefinitionsDestinyBubbleDefinition[]',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'displayProperties' => null,
        'placeHash' => 'uint32',
        'defaultFreeroamActivityHash' => 'uint32',
        'activityGraphEntries' => null,
        'bubbleSettings' => null,
        'bubbles' => null,
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'placeHash' => 'placeHash',
        'defaultFreeroamActivityHash' => 'defaultFreeroamActivityHash',
        'activityGraphEntries' => 'activityGraphEntries',
        'bubbleSettings' => 'bubbleSettings',
        'bubbles' => 'bubbles',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'placeHash' => 'setPlaceHash',
        'defaultFreeroamActivityHash' => 'setDefaultFreeroamActivityHash',
        'activityGraphEntries' => 'setActivityGraphEntries',
        'bubbleSettings' => 'setBubbleSettings',
        'bubbles' => 'setBubbles',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'placeHash' => 'getPlaceHash',
        'defaultFreeroamActivityHash' => 'getDefaultFreeroamActivityHash',
        'activityGraphEntries' => 'getActivityGraphEntries',
        'bubbleSettings' => 'getBubbleSettings',
        'bubbles' => 'getBubbles',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['placeHash'] = isset($data['placeHash']) ? $data['placeHash'] : null;
        $this->container['defaultFreeroamActivityHash'] = isset($data['defaultFreeroamActivityHash']) ? $data['defaultFreeroamActivityHash'] : null;
        $this->container['activityGraphEntries'] = isset($data['activityGraphEntries']) ? $data['activityGraphEntries'] : null;
        $this->container['bubbleSettings'] = isset($data['bubbleSettings']) ? $data['bubbleSettings'] : null;
        $this->container['bubbles'] = isset($data['bubbles']) ? $data['bubbles'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets displayProperties
     *
     * @return \Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param \Bungie\Model\DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition $displayProperties displayProperties
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets placeHash
     *
     * @return int
     */
    public function getPlaceHash()
    {
        return $this->container['placeHash'];
    }

    /**
     * Sets placeHash
     *
     * @param int $placeHash The place that \"owns\" this Destination. Use this hash to look up the DestinyPlaceDefinition.
     *
     * @return $this
     */
    public function setPlaceHash($placeHash)
    {
        $this->container['placeHash'] = $placeHash;

        return $this;
    }

    /**
     * Gets defaultFreeroamActivityHash
     *
     * @return int
     */
    public function getDefaultFreeroamActivityHash()
    {
        return $this->container['defaultFreeroamActivityHash'];
    }

    /**
     * Sets defaultFreeroamActivityHash
     *
     * @param int $defaultFreeroamActivityHash If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.
     *
     * @return $this
     */
    public function setDefaultFreeroamActivityHash($defaultFreeroamActivityHash)
    {
        $this->container['defaultFreeroamActivityHash'] = $defaultFreeroamActivityHash;

        return $this;
    }

    /**
     * Gets activityGraphEntries
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[]
     */
    public function getActivityGraphEntries()
    {
        return $this->container['activityGraphEntries'];
    }

    /**
     * Sets activityGraphEntries
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[] $activityGraphEntries If the Destination has default Activity Graphs (i.e. \"Map\") that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.
     *
     * @return $this
     */
    public function setActivityGraphEntries($activityGraphEntries)
    {
        $this->container['activityGraphEntries'] = $activityGraphEntries;

        return $this;
    }

    /**
     * Gets bubbleSettings
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyDestinationBubbleSettingDefinition[]
     */
    public function getBubbleSettings()
    {
        return $this->container['bubbleSettings'];
    }

    /**
     * Sets bubbleSettings
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyDestinationBubbleSettingDefinition[] $bubbleSettings A Destination may have many \"Bubbles\" zones with human readable properties.  We don't get as much info as I'd like about them - I'd love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.  DEPRECATED - Just use bubbles, it now has this data.
     *
     * @return $this
     */
    public function setBubbleSettings($bubbleSettings)
    {
        $this->container['bubbleSettings'] = $bubbleSettings;

        return $this;
    }

    /**
     * Gets bubbles
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyBubbleDefinition[]
     */
    public function getBubbles()
    {
        return $this->container['bubbles'];
    }

    /**
     * Sets bubbles
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyBubbleDefinition[] $bubbles This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.  bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
     *
     * @return $this
     */
    public function setBubbles($bubbles)
    {
        $this->container['bubbles'] = $bubbles;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


