<?php
/**
 * DestinyDefinitionsRecordsDestinyRecordCompletionBlock
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsRecordsDestinyRecordCompletionBlock Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsRecordsDestinyRecordCompletionBlock implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.Records.DestinyRecordCompletionBlock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partialCompletionObjectiveCountThreshold' => 'int',
        'scoreValue' => 'int',
        'shouldFireToast' => 'bool',
        'toastStyle' => '\Bungie\Model\DestinyDestinyRecordToastStyle'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partialCompletionObjectiveCountThreshold' => 'int32',
        'scoreValue' => 'int32',
        'shouldFireToast' => null,
        'toastStyle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partialCompletionObjectiveCountThreshold' => 'partialCompletionObjectiveCountThreshold',
        'scoreValue' => 'ScoreValue',
        'shouldFireToast' => 'shouldFireToast',
        'toastStyle' => 'toastStyle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partialCompletionObjectiveCountThreshold' => 'setPartialCompletionObjectiveCountThreshold',
        'scoreValue' => 'setScoreValue',
        'shouldFireToast' => 'setShouldFireToast',
        'toastStyle' => 'setToastStyle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partialCompletionObjectiveCountThreshold' => 'getPartialCompletionObjectiveCountThreshold',
        'scoreValue' => 'getScoreValue',
        'shouldFireToast' => 'getShouldFireToast',
        'toastStyle' => 'getToastStyle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partialCompletionObjectiveCountThreshold'] = isset($data['partialCompletionObjectiveCountThreshold']) ? $data['partialCompletionObjectiveCountThreshold'] : null;
        $this->container['scoreValue'] = isset($data['scoreValue']) ? $data['scoreValue'] : null;
        $this->container['shouldFireToast'] = isset($data['shouldFireToast']) ? $data['shouldFireToast'] : null;
        $this->container['toastStyle'] = isset($data['toastStyle']) ? $data['toastStyle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets partialCompletionObjectiveCountThreshold
     *
     * @return int
     */
    public function getPartialCompletionObjectiveCountThreshold()
    {
        return $this->container['partialCompletionObjectiveCountThreshold'];
    }

    /**
     * Sets partialCompletionObjectiveCountThreshold
     *
     * @param int $partialCompletionObjectiveCountThreshold partialCompletionObjectiveCountThreshold
     *
     * @return $this
     */
    public function setPartialCompletionObjectiveCountThreshold($partialCompletionObjectiveCountThreshold)
    {
        $this->container['partialCompletionObjectiveCountThreshold'] = $partialCompletionObjectiveCountThreshold;

        return $this;
    }

    /**
     * Gets scoreValue
     *
     * @return int
     */
    public function getScoreValue()
    {
        return $this->container['scoreValue'];
    }

    /**
     * Sets scoreValue
     *
     * @param int $scoreValue scoreValue
     *
     * @return $this
     */
    public function setScoreValue($scoreValue)
    {
        $this->container['scoreValue'] = $scoreValue;

        return $this;
    }

    /**
     * Gets shouldFireToast
     *
     * @return bool
     */
    public function getShouldFireToast()
    {
        return $this->container['shouldFireToast'];
    }

    /**
     * Sets shouldFireToast
     *
     * @param bool $shouldFireToast shouldFireToast
     *
     * @return $this
     */
    public function setShouldFireToast($shouldFireToast)
    {
        $this->container['shouldFireToast'] = $shouldFireToast;

        return $this;
    }

    /**
     * Gets toastStyle
     *
     * @return \Bungie\Model\DestinyDestinyRecordToastStyle
     */
    public function getToastStyle()
    {
        return $this->container['toastStyle'];
    }

    /**
     * Sets toastStyle
     *
     * @param \Bungie\Model\DestinyDestinyRecordToastStyle $toastStyle toastStyle
     *
     * @return $this
     */
    public function setToastStyle($toastStyle)
    {
        $this->container['toastStyle'] = $toastStyle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


