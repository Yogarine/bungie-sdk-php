<?php
/**
 * DestinyMilestonesDestinyMilestoneActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyMilestonesDestinyMilestoneActivity Class Doc Comment
 *
 * @category Class
 * @description Sometimes, we know the specific activity that the Milestone wants you to play. This entity provides additional information about that Activity and all of its variants. (sometimes there&#39;s only one variant, but I think you get the point)
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyMilestonesDestinyMilestoneActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Milestones.DestinyMilestoneActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activityHash' => 'int',
        'activityModeHash' => 'int',
        'activityModeType' => 'int',
        'modifierHashes' => 'int[]',
        'variants' => '\Bungie\Model\DestinyMilestonesDestinyMilestoneActivityVariant[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'activityHash' => 'uint32',
        'activityModeHash' => 'uint32',
        'activityModeType' => 'int32',
        'modifierHashes' => 'uint32',
        'variants' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityHash' => 'activityHash',
        'activityModeHash' => 'activityModeHash',
        'activityModeType' => 'activityModeType',
        'modifierHashes' => 'modifierHashes',
        'variants' => 'variants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityHash' => 'setActivityHash',
        'activityModeHash' => 'setActivityModeHash',
        'activityModeType' => 'setActivityModeType',
        'modifierHashes' => 'setModifierHashes',
        'variants' => 'setVariants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityHash' => 'getActivityHash',
        'activityModeHash' => 'getActivityModeHash',
        'activityModeType' => 'getActivityModeType',
        'modifierHashes' => 'getModifierHashes',
        'variants' => 'getVariants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTIVITY_MODE_TYPE_NONE = 0;
    const ACTIVITY_MODE_TYPE_STORY = 2;
    const ACTIVITY_MODE_TYPE_STRIKE = 3;
    const ACTIVITY_MODE_TYPE_RAID = 4;
    const ACTIVITY_MODE_TYPE_ALLPVP = 5;
    const ACTIVITY_MODE_TYPE_PATROL = 6;
    const ACTIVITY_MODE_TYPE_ALLPVE = 7;
    const ACTIVITY_MODE_TYPE_RESERVED9 = 9;
    const ACTIVITY_MODE_TYPE_CONTROL = 10;
    const ACTIVITY_MODE_TYPE_RESERVED11 = 11;
    const ACTIVITY_MODE_TYPE_CLASH = 12;
    const ACTIVITY_MODE_TYPE_RESERVED13 = 13;
    const ACTIVITY_MODE_TYPE_CRIMSONDOUBLES = 15;
    const ACTIVITY_MODE_TYPE_NIGHTFALL = 16;
    const ACTIVITY_MODE_TYPE_HEROICNIGHTFALL = 17;
    const ACTIVITY_MODE_TYPE_ALLSTRIKES = 18;
    const ACTIVITY_MODE_TYPE_IRONBANNER = 19;
    const ACTIVITY_MODE_TYPE_RESERVED20 = 20;
    const ACTIVITY_MODE_TYPE_RESERVED21 = 21;
    const ACTIVITY_MODE_TYPE_RESERVED22 = 22;
    const ACTIVITY_MODE_TYPE_RESERVED24 = 24;
    const ACTIVITY_MODE_TYPE_ALLMAYHEM = 25;
    const ACTIVITY_MODE_TYPE_RESERVED26 = 26;
    const ACTIVITY_MODE_TYPE_RESERVED27 = 27;
    const ACTIVITY_MODE_TYPE_RESERVED28 = 28;
    const ACTIVITY_MODE_TYPE_RESERVED29 = 29;
    const ACTIVITY_MODE_TYPE_RESERVED30 = 30;
    const ACTIVITY_MODE_TYPE_SUPREMACY = 31;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESALL = 32;
    const ACTIVITY_MODE_TYPE_SURVIVAL = 37;
    const ACTIVITY_MODE_TYPE_COUNTDOWN = 38;
    const ACTIVITY_MODE_TYPE_TRIALSOFTHENINE = 39;
    const ACTIVITY_MODE_TYPE_SOCIAL = 40;
    const ACTIVITY_MODE_TYPE_TRIALSCOUNTDOWN = 41;
    const ACTIVITY_MODE_TYPE_TRIALSSURVIVAL = 42;
    const ACTIVITY_MODE_TYPE_IRONBANNERCONTROL = 43;
    const ACTIVITY_MODE_TYPE_IRONBANNERCLASH = 44;
    const ACTIVITY_MODE_TYPE_IRONBANNERSUPREMACY = 45;
    const ACTIVITY_MODE_TYPE_SCOREDNIGHTFALL = 46;
    const ACTIVITY_MODE_TYPE_SCOREDHEROICNIGHTFALL = 47;
    const ACTIVITY_MODE_TYPE_RUMBLE = 48;
    const ACTIVITY_MODE_TYPE_ALLDOUBLES = 49;
    const ACTIVITY_MODE_TYPE_DOUBLES = 50;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESCLASH = 51;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESCONTROL = 52;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESSUPREMACY = 53;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESCOUNTDOWN = 54;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESSURVIVAL = 55;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESMAYHEM = 56;
    const ACTIVITY_MODE_TYPE_PRIVATEMATCHESRUMBLE = 57;
    const ACTIVITY_MODE_TYPE_HEROICADVENTURE = 58;
    const ACTIVITY_MODE_TYPE_SHOWDOWN = 59;
    const ACTIVITY_MODE_TYPE_LOCKDOWN = 60;
    const ACTIVITY_MODE_TYPE_SCORCHED = 61;
    const ACTIVITY_MODE_TYPE_SCORCHEDTEAM = 62;
    const ACTIVITY_MODE_TYPE_GAMBIT = 63;
    const ACTIVITY_MODE_TYPE_ALLPVECOMPETITIVE = 64;
    const ACTIVITY_MODE_TYPE_BREAKTHROUGH = 65;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityModeTypeAllowableValues()
    {
        return [
            self::ACTIVITY_MODE_TYPE_NONE,
            self::ACTIVITY_MODE_TYPE_STORY,
            self::ACTIVITY_MODE_TYPE_STRIKE,
            self::ACTIVITY_MODE_TYPE_RAID,
            self::ACTIVITY_MODE_TYPE_ALLPVP,
            self::ACTIVITY_MODE_TYPE_PATROL,
            self::ACTIVITY_MODE_TYPE_ALLPVE,
            self::ACTIVITY_MODE_TYPE_RESERVED9,
            self::ACTIVITY_MODE_TYPE_CONTROL,
            self::ACTIVITY_MODE_TYPE_RESERVED11,
            self::ACTIVITY_MODE_TYPE_CLASH,
            self::ACTIVITY_MODE_TYPE_RESERVED13,
            self::ACTIVITY_MODE_TYPE_CRIMSONDOUBLES,
            self::ACTIVITY_MODE_TYPE_NIGHTFALL,
            self::ACTIVITY_MODE_TYPE_HEROICNIGHTFALL,
            self::ACTIVITY_MODE_TYPE_ALLSTRIKES,
            self::ACTIVITY_MODE_TYPE_IRONBANNER,
            self::ACTIVITY_MODE_TYPE_RESERVED20,
            self::ACTIVITY_MODE_TYPE_RESERVED21,
            self::ACTIVITY_MODE_TYPE_RESERVED22,
            self::ACTIVITY_MODE_TYPE_RESERVED24,
            self::ACTIVITY_MODE_TYPE_ALLMAYHEM,
            self::ACTIVITY_MODE_TYPE_RESERVED26,
            self::ACTIVITY_MODE_TYPE_RESERVED27,
            self::ACTIVITY_MODE_TYPE_RESERVED28,
            self::ACTIVITY_MODE_TYPE_RESERVED29,
            self::ACTIVITY_MODE_TYPE_RESERVED30,
            self::ACTIVITY_MODE_TYPE_SUPREMACY,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESALL,
            self::ACTIVITY_MODE_TYPE_SURVIVAL,
            self::ACTIVITY_MODE_TYPE_COUNTDOWN,
            self::ACTIVITY_MODE_TYPE_TRIALSOFTHENINE,
            self::ACTIVITY_MODE_TYPE_SOCIAL,
            self::ACTIVITY_MODE_TYPE_TRIALSCOUNTDOWN,
            self::ACTIVITY_MODE_TYPE_TRIALSSURVIVAL,
            self::ACTIVITY_MODE_TYPE_IRONBANNERCONTROL,
            self::ACTIVITY_MODE_TYPE_IRONBANNERCLASH,
            self::ACTIVITY_MODE_TYPE_IRONBANNERSUPREMACY,
            self::ACTIVITY_MODE_TYPE_SCOREDNIGHTFALL,
            self::ACTIVITY_MODE_TYPE_SCOREDHEROICNIGHTFALL,
            self::ACTIVITY_MODE_TYPE_RUMBLE,
            self::ACTIVITY_MODE_TYPE_ALLDOUBLES,
            self::ACTIVITY_MODE_TYPE_DOUBLES,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESCLASH,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESCONTROL,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESSUPREMACY,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESCOUNTDOWN,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESSURVIVAL,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESMAYHEM,
            self::ACTIVITY_MODE_TYPE_PRIVATEMATCHESRUMBLE,
            self::ACTIVITY_MODE_TYPE_HEROICADVENTURE,
            self::ACTIVITY_MODE_TYPE_SHOWDOWN,
            self::ACTIVITY_MODE_TYPE_LOCKDOWN,
            self::ACTIVITY_MODE_TYPE_SCORCHED,
            self::ACTIVITY_MODE_TYPE_SCORCHEDTEAM,
            self::ACTIVITY_MODE_TYPE_GAMBIT,
            self::ACTIVITY_MODE_TYPE_ALLPVECOMPETITIVE,
            self::ACTIVITY_MODE_TYPE_BREAKTHROUGH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityHash'] = isset($data['activityHash']) ? $data['activityHash'] : null;
        $this->container['activityModeHash'] = isset($data['activityModeHash']) ? $data['activityModeHash'] : null;
        $this->container['activityModeType'] = isset($data['activityModeType']) ? $data['activityModeType'] : null;
        $this->container['modifierHashes'] = isset($data['modifierHashes']) ? $data['modifierHashes'] : null;
        $this->container['variants'] = isset($data['variants']) ? $data['variants'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActivityModeTypeAllowableValues();
        if (!is_null($this->container['activityModeType']) && !in_array($this->container['activityModeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activityModeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityHash
     *
     * @return int|null
     */
    public function getActivityHash()
    {
        return $this->container['activityHash'];
    }

    /**
     * Sets activityHash
     *
     * @param int|null $activityHash The hash of an arbitrarily chosen variant of this activity. We'll go ahead and call that the \"canonical\" activity, because if you're using this value you should only use it for properties that are common across the variants: things like the name of the activity, it's location, etc... Use this hash to look up the DestinyActivityDefinition of this activity for rendering data.
     *
     * @return $this
     */
    public function setActivityHash($activityHash)
    {
        $this->container['activityHash'] = $activityHash;

        return $this;
    }

    /**
     * Gets activityModeHash
     *
     * @return int|null
     */
    public function getActivityModeHash()
    {
        return $this->container['activityModeHash'];
    }

    /**
     * Sets activityModeHash
     *
     * @param int|null $activityModeHash The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
     *
     * @return $this
     */
    public function setActivityModeHash($activityModeHash)
    {
        $this->container['activityModeHash'] = $activityModeHash;

        return $this;
    }

    /**
     * Gets activityModeType
     *
     * @return int|null
     */
    public function getActivityModeType()
    {
        return $this->container['activityModeType'];
    }

    /**
     * Sets activityModeType
     *
     * @param int|null $activityModeType The enumeration equivalent of the most specific Activity Mode under which this activity is played.
     *
     * @return $this
     */
    public function setActivityModeType($activityModeType)
    {
        $allowedValues = $this->getActivityModeTypeAllowableValues();
        if (!is_null($activityModeType) && !in_array($activityModeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activityModeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activityModeType'] = $activityModeType;

        return $this;
    }

    /**
     * Gets modifierHashes
     *
     * @return int[]|null
     */
    public function getModifierHashes()
    {
        return $this->container['modifierHashes'];
    }

    /**
     * Sets modifierHashes
     *
     * @param int[]|null $modifierHashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data. Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
     *
     * @return $this
     */
    public function setModifierHashes($modifierHashes)
    {
        $this->container['modifierHashes'] = $modifierHashes;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \Bungie\Model\DestinyMilestonesDestinyMilestoneActivityVariant[]|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \Bungie\Model\DestinyMilestonesDestinyMilestoneActivityVariant[]|null $variants If you want more than just name/location/etc... you're going to have to dig into and show the variants of the conceptual activity. These will differ in seemingly arbitrary ways, like difficulty level and modifiers applied. Show it in whatever way tickles your fancy.
     *
     * @return $this
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


