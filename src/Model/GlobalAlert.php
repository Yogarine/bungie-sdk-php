<?php
/**
 * GlobalAlert
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GlobalAlert Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobalAlert implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GlobalAlert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alertKey' => 'string',
        'alertHtml' => 'string',
        'alertTimestamp' => '\DateTime',
        'alertLink' => 'string',
        'alertLevel' => '\Bungie\Model\GlobalAlertLevel',
        'alertType' => '\Bungie\Model\GlobalAlertType',
        'streamInfo' => '\Bungie\Model\StreamInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alertKey' => null,
        'alertHtml' => null,
        'alertTimestamp' => 'date-time',
        'alertLink' => null,
        'alertLevel' => null,
        'alertType' => null,
        'streamInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alertKey' => 'AlertKey',
        'alertHtml' => 'AlertHtml',
        'alertTimestamp' => 'AlertTimestamp',
        'alertLink' => 'AlertLink',
        'alertLevel' => 'AlertLevel',
        'alertType' => 'AlertType',
        'streamInfo' => 'StreamInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alertKey' => 'setAlertKey',
        'alertHtml' => 'setAlertHtml',
        'alertTimestamp' => 'setAlertTimestamp',
        'alertLink' => 'setAlertLink',
        'alertLevel' => 'setAlertLevel',
        'alertType' => 'setAlertType',
        'streamInfo' => 'setStreamInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alertKey' => 'getAlertKey',
        'alertHtml' => 'getAlertHtml',
        'alertTimestamp' => 'getAlertTimestamp',
        'alertLink' => 'getAlertLink',
        'alertLevel' => 'getAlertLevel',
        'alertType' => 'getAlertType',
        'streamInfo' => 'getStreamInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alertKey'] = isset($data['alertKey']) ? $data['alertKey'] : null;
        $this->container['alertHtml'] = isset($data['alertHtml']) ? $data['alertHtml'] : null;
        $this->container['alertTimestamp'] = isset($data['alertTimestamp']) ? $data['alertTimestamp'] : null;
        $this->container['alertLink'] = isset($data['alertLink']) ? $data['alertLink'] : null;
        $this->container['alertLevel'] = isset($data['alertLevel']) ? $data['alertLevel'] : null;
        $this->container['alertType'] = isset($data['alertType']) ? $data['alertType'] : null;
        $this->container['streamInfo'] = isset($data['streamInfo']) ? $data['streamInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets alertKey
     *
     * @return string
     */
    public function getAlertKey()
    {
        return $this->container['alertKey'];
    }

    /**
     * Sets alertKey
     *
     * @param string $alertKey alertKey
     *
     * @return $this
     */
    public function setAlertKey($alertKey)
    {
        $this->container['alertKey'] = $alertKey;

        return $this;
    }

    /**
     * Gets alertHtml
     *
     * @return string
     */
    public function getAlertHtml()
    {
        return $this->container['alertHtml'];
    }

    /**
     * Sets alertHtml
     *
     * @param string $alertHtml alertHtml
     *
     * @return $this
     */
    public function setAlertHtml($alertHtml)
    {
        $this->container['alertHtml'] = $alertHtml;

        return $this;
    }

    /**
     * Gets alertTimestamp
     *
     * @return \DateTime
     */
    public function getAlertTimestamp()
    {
        return $this->container['alertTimestamp'];
    }

    /**
     * Sets alertTimestamp
     *
     * @param \DateTime $alertTimestamp alertTimestamp
     *
     * @return $this
     */
    public function setAlertTimestamp($alertTimestamp)
    {
        $this->container['alertTimestamp'] = $alertTimestamp;

        return $this;
    }

    /**
     * Gets alertLink
     *
     * @return string
     */
    public function getAlertLink()
    {
        return $this->container['alertLink'];
    }

    /**
     * Sets alertLink
     *
     * @param string $alertLink alertLink
     *
     * @return $this
     */
    public function setAlertLink($alertLink)
    {
        $this->container['alertLink'] = $alertLink;

        return $this;
    }

    /**
     * Gets alertLevel
     *
     * @return \Bungie\Model\GlobalAlertLevel
     */
    public function getAlertLevel()
    {
        return $this->container['alertLevel'];
    }

    /**
     * Sets alertLevel
     *
     * @param \Bungie\Model\GlobalAlertLevel $alertLevel alertLevel
     *
     * @return $this
     */
    public function setAlertLevel($alertLevel)
    {
        $this->container['alertLevel'] = $alertLevel;

        return $this;
    }

    /**
     * Gets alertType
     *
     * @return \Bungie\Model\GlobalAlertType
     */
    public function getAlertType()
    {
        return $this->container['alertType'];
    }

    /**
     * Sets alertType
     *
     * @param \Bungie\Model\GlobalAlertType $alertType alertType
     *
     * @return $this
     */
    public function setAlertType($alertType)
    {
        $this->container['alertType'] = $alertType;

        return $this;
    }

    /**
     * Gets streamInfo
     *
     * @return \Bungie\Model\StreamInfo
     */
    public function getStreamInfo()
    {
        return $this->container['streamInfo'];
    }

    /**
     * Sets streamInfo
     *
     * @param \Bungie\Model\StreamInfo $streamInfo streamInfo
     *
     * @return $this
     */
    public function setStreamInfo($streamInfo)
    {
        $this->container['streamInfo'] = $streamInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


