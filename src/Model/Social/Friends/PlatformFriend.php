<?php
/**
 * PlatformFriend
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Social\Friends;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * PlatformFriend Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlatformFriend implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Social.Friends.PlatformFriend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'platformDisplayName' => 'string',
        'friendPlatform' => 'int',
        'destinyMembershipId' => 'int',
        'destinyMembershipType' => 'int',
        'bungieNetMembershipId' => 'int',
        'bungieGlobalDisplayName' => 'string',
        'bungieGlobalDisplayNameCode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'platformDisplayName' => null,
        'friendPlatform' => 'int32',
        'destinyMembershipId' => 'int64',
        'destinyMembershipType' => 'int32',
        'bungieNetMembershipId' => 'int64',
        'bungieGlobalDisplayName' => null,
        'bungieGlobalDisplayNameCode' => 'int16'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'platformDisplayName' => 'platformDisplayName',
        'friendPlatform' => 'friendPlatform',
        'destinyMembershipId' => 'destinyMembershipId',
        'destinyMembershipType' => 'destinyMembershipType',
        'bungieNetMembershipId' => 'bungieNetMembershipId',
        'bungieGlobalDisplayName' => 'bungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'bungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'platformDisplayName' => 'setPlatformDisplayName',
        'friendPlatform' => 'setFriendPlatform',
        'destinyMembershipId' => 'setDestinyMembershipId',
        'destinyMembershipType' => 'setDestinyMembershipType',
        'bungieNetMembershipId' => 'setBungieNetMembershipId',
        'bungieGlobalDisplayName' => 'setBungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'setBungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'platformDisplayName' => 'getPlatformDisplayName',
        'friendPlatform' => 'getFriendPlatform',
        'destinyMembershipId' => 'getDestinyMembershipId',
        'destinyMembershipType' => 'getDestinyMembershipType',
        'bungieNetMembershipId' => 'getBungieNetMembershipId',
        'bungieGlobalDisplayName' => 'getBungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'getBungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DESTINY_MEMBERSHIP_TYPE_NONE = 0;
    const DESTINY_MEMBERSHIP_TYPE_TIGERXBOX = 1;
    const DESTINY_MEMBERSHIP_TYPE_TIGERPSN = 2;
    const DESTINY_MEMBERSHIP_TYPE_TIGERSTEAM = 3;
    const DESTINY_MEMBERSHIP_TYPE_TIGERBLIZZARD = 4;
    const DESTINY_MEMBERSHIP_TYPE_TIGERSTADIA = 5;
    const DESTINY_MEMBERSHIP_TYPE_TIGEREGS = 6;
    const DESTINY_MEMBERSHIP_TYPE_TIGERDEMON = 10;
    const DESTINY_MEMBERSHIP_TYPE_BUNGIENEXT = 254;
    const DESTINY_MEMBERSHIP_TYPE_ALL = -1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDestinyMembershipTypeAllowableValues()
    {
        return [
            self::DESTINY_MEMBERSHIP_TYPE_NONE,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERXBOX,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERPSN,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERSTEAM,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERBLIZZARD,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERSTADIA,
            self::DESTINY_MEMBERSHIP_TYPE_TIGEREGS,
            self::DESTINY_MEMBERSHIP_TYPE_TIGERDEMON,
            self::DESTINY_MEMBERSHIP_TYPE_BUNGIENEXT,
            self::DESTINY_MEMBERSHIP_TYPE_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['platformDisplayName'] = isset($data['platformDisplayName']) ? $data['platformDisplayName'] : null;
        $this->container['friendPlatform'] = isset($data['friendPlatform']) ? $data['friendPlatform'] : null;
        $this->container['destinyMembershipId'] = isset($data['destinyMembershipId']) ? $data['destinyMembershipId'] : null;
        $this->container['destinyMembershipType'] = isset($data['destinyMembershipType']) ? $data['destinyMembershipType'] : null;
        $this->container['bungieNetMembershipId'] = isset($data['bungieNetMembershipId']) ? $data['bungieNetMembershipId'] : null;
        $this->container['bungieGlobalDisplayName'] = isset($data['bungieGlobalDisplayName']) ? $data['bungieGlobalDisplayName'] : null;
        $this->container['bungieGlobalDisplayNameCode'] = isset($data['bungieGlobalDisplayNameCode']) ? $data['bungieGlobalDisplayNameCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDestinyMembershipTypeAllowableValues();
        if (!is_null($this->container['destinyMembershipType']) && !in_array($this->container['destinyMembershipType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'destinyMembershipType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets platformDisplayName
     *
     * @return string|null
     */
    public function getPlatformDisplayName()
    {
        return $this->container['platformDisplayName'];
    }

    /**
     * Sets platformDisplayName
     *
     * @param string|null $platformDisplayName platformDisplayName
     *
     * @return $this
     */
    public function setPlatformDisplayName($platformDisplayName)
    {
        $this->container['platformDisplayName'] = $platformDisplayName;

        return $this;
    }

    /**
     * Gets friendPlatform
     *
     * @return int|null
     */
    public function getFriendPlatform()
    {
        return $this->container['friendPlatform'];
    }

    /**
     * Sets friendPlatform
     *
     * @param int|null $friendPlatform friendPlatform
     *
     * @return $this
     */
    public function setFriendPlatform($friendPlatform)
    {
        $this->container['friendPlatform'] = $friendPlatform;

        return $this;
    }

    /**
     * Gets destinyMembershipId
     *
     * @return int|null
     */
    public function getDestinyMembershipId()
    {
        return $this->container['destinyMembershipId'];
    }

    /**
     * Sets destinyMembershipId
     *
     * @param int|null $destinyMembershipId destinyMembershipId
     *
     * @return $this
     */
    public function setDestinyMembershipId($destinyMembershipId)
    {
        $this->container['destinyMembershipId'] = $destinyMembershipId;

        return $this;
    }

    /**
     * Gets destinyMembershipType
     *
     * @return int|null
     */
    public function getDestinyMembershipType()
    {
        return $this->container['destinyMembershipType'];
    }

    /**
     * Sets destinyMembershipType
     *
     * @param int|null $destinyMembershipType destinyMembershipType
     *
     * @return $this
     */
    public function setDestinyMembershipType($destinyMembershipType)
    {
        $allowedValues = $this->getDestinyMembershipTypeAllowableValues();
        if (!is_null($destinyMembershipType) && !in_array($destinyMembershipType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'destinyMembershipType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['destinyMembershipType'] = $destinyMembershipType;

        return $this;
    }

    /**
     * Gets bungieNetMembershipId
     *
     * @return int|null
     */
    public function getBungieNetMembershipId()
    {
        return $this->container['bungieNetMembershipId'];
    }

    /**
     * Sets bungieNetMembershipId
     *
     * @param int|null $bungieNetMembershipId bungieNetMembershipId
     *
     * @return $this
     */
    public function setBungieNetMembershipId($bungieNetMembershipId)
    {
        $this->container['bungieNetMembershipId'] = $bungieNetMembershipId;

        return $this;
    }

    /**
     * Gets bungieGlobalDisplayName
     *
     * @return string|null
     */
    public function getBungieGlobalDisplayName()
    {
        return $this->container['bungieGlobalDisplayName'];
    }

    /**
     * Sets bungieGlobalDisplayName
     *
     * @param string|null $bungieGlobalDisplayName bungieGlobalDisplayName
     *
     * @return $this
     */
    public function setBungieGlobalDisplayName($bungieGlobalDisplayName)
    {
        $this->container['bungieGlobalDisplayName'] = $bungieGlobalDisplayName;

        return $this;
    }

    /**
     * Gets bungieGlobalDisplayNameCode
     *
     * @return int|null
     */
    public function getBungieGlobalDisplayNameCode()
    {
        return $this->container['bungieGlobalDisplayNameCode'];
    }

    /**
     * Sets bungieGlobalDisplayNameCode
     *
     * @param int|null $bungieGlobalDisplayNameCode bungieGlobalDisplayNameCode
     *
     * @return $this
     */
    public function setBungieGlobalDisplayNameCode($bungieGlobalDisplayNameCode)
    {
        $this->container['bungieGlobalDisplayNameCode'] = $bungieGlobalDisplayNameCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


