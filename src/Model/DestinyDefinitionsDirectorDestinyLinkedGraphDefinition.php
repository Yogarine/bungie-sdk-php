<?php
/**
 * DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDirectorDestinyLinkedGraphDefinition Class Doc Comment
 *
 * @category Class
 * @description This describes links between the current graph and others, as well as when that link is relevant.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDirectorDestinyLinkedGraphDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.Director.DestinyLinkedGraphDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'name' => 'string',
        'unlockExpression' => '\Bungie\Model\DestinyDefinitionsDestinyUnlockExpressionDefinition',
        'linkedGraphId' => 'int',
        'linkedGraphs' => '\Bungie\Model\DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition[]',
        'overview' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'name' => null,
        'unlockExpression' => null,
        'linkedGraphId' => 'uint32',
        'linkedGraphs' => null,
        'overview' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'name' => 'name',
        'unlockExpression' => 'unlockExpression',
        'linkedGraphId' => 'linkedGraphId',
        'linkedGraphs' => 'linkedGraphs',
        'overview' => 'overview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'name' => 'setName',
        'unlockExpression' => 'setUnlockExpression',
        'linkedGraphId' => 'setLinkedGraphId',
        'linkedGraphs' => 'setLinkedGraphs',
        'overview' => 'setOverview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'name' => 'getName',
        'unlockExpression' => 'getUnlockExpression',
        'linkedGraphId' => 'getLinkedGraphId',
        'linkedGraphs' => 'getLinkedGraphs',
        'overview' => 'getOverview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['unlockExpression'] = isset($data['unlockExpression']) ? $data['unlockExpression'] : null;
        $this->container['linkedGraphId'] = isset($data['linkedGraphId']) ? $data['linkedGraphId'] : null;
        $this->container['linkedGraphs'] = isset($data['linkedGraphs']) ? $data['linkedGraphs'] : null;
        $this->container['overview'] = isset($data['overview']) ? $data['overview'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unlockExpression
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyUnlockExpressionDefinition
     */
    public function getUnlockExpression()
    {
        return $this->container['unlockExpression'];
    }

    /**
     * Sets unlockExpression
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyUnlockExpressionDefinition $unlockExpression unlockExpression
     *
     * @return $this
     */
    public function setUnlockExpression($unlockExpression)
    {
        $this->container['unlockExpression'] = $unlockExpression;

        return $this;
    }

    /**
     * Gets linkedGraphId
     *
     * @return int
     */
    public function getLinkedGraphId()
    {
        return $this->container['linkedGraphId'];
    }

    /**
     * Sets linkedGraphId
     *
     * @param int $linkedGraphId linkedGraphId
     *
     * @return $this
     */
    public function setLinkedGraphId($linkedGraphId)
    {
        $this->container['linkedGraphId'] = $linkedGraphId;

        return $this;
    }

    /**
     * Gets linkedGraphs
     *
     * @return \Bungie\Model\DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition[]
     */
    public function getLinkedGraphs()
    {
        return $this->container['linkedGraphs'];
    }

    /**
     * Sets linkedGraphs
     *
     * @param \Bungie\Model\DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition[] $linkedGraphs linkedGraphs
     *
     * @return $this
     */
    public function setLinkedGraphs($linkedGraphs)
    {
        $this->container['linkedGraphs'] = $linkedGraphs;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string $overview overview
     *
     * @return $this
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


