<?php
/**
 * DestinyConfigDestinyManifest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyConfigDestinyManifest Class Doc Comment
 *
 * @category Class
 * @description DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyConfigDestinyManifest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Config.DestinyManifest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'mobileAssetContentPath' => 'string',
        'mobileGearAssetDataBases' => '\Bungie\Model\DestinyConfigGearAssetDataBaseDefinition[]',
        'mobileWorldContentPaths' => 'map[string,string]',
        'mobileClanBannerDatabasePath' => 'string',
        'mobileGearCDN' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'mobileAssetContentPath' => null,
        'mobileGearAssetDataBases' => null,
        'mobileWorldContentPaths' => null,
        'mobileClanBannerDatabasePath' => null,
        'mobileGearCDN' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'mobileAssetContentPath' => 'mobileAssetContentPath',
        'mobileGearAssetDataBases' => 'mobileGearAssetDataBases',
        'mobileWorldContentPaths' => 'mobileWorldContentPaths',
        'mobileClanBannerDatabasePath' => 'mobileClanBannerDatabasePath',
        'mobileGearCDN' => 'mobileGearCDN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'mobileAssetContentPath' => 'setMobileAssetContentPath',
        'mobileGearAssetDataBases' => 'setMobileGearAssetDataBases',
        'mobileWorldContentPaths' => 'setMobileWorldContentPaths',
        'mobileClanBannerDatabasePath' => 'setMobileClanBannerDatabasePath',
        'mobileGearCDN' => 'setMobileGearCDN'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'mobileAssetContentPath' => 'getMobileAssetContentPath',
        'mobileGearAssetDataBases' => 'getMobileGearAssetDataBases',
        'mobileWorldContentPaths' => 'getMobileWorldContentPaths',
        'mobileClanBannerDatabasePath' => 'getMobileClanBannerDatabasePath',
        'mobileGearCDN' => 'getMobileGearCDN'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['mobileAssetContentPath'] = isset($data['mobileAssetContentPath']) ? $data['mobileAssetContentPath'] : null;
        $this->container['mobileGearAssetDataBases'] = isset($data['mobileGearAssetDataBases']) ? $data['mobileGearAssetDataBases'] : null;
        $this->container['mobileWorldContentPaths'] = isset($data['mobileWorldContentPaths']) ? $data['mobileWorldContentPaths'] : null;
        $this->container['mobileClanBannerDatabasePath'] = isset($data['mobileClanBannerDatabasePath']) ? $data['mobileClanBannerDatabasePath'] : null;
        $this->container['mobileGearCDN'] = isset($data['mobileGearCDN']) ? $data['mobileGearCDN'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets mobileAssetContentPath
     *
     * @return string
     */
    public function getMobileAssetContentPath()
    {
        return $this->container['mobileAssetContentPath'];
    }

    /**
     * Sets mobileAssetContentPath
     *
     * @param string $mobileAssetContentPath mobileAssetContentPath
     *
     * @return $this
     */
    public function setMobileAssetContentPath($mobileAssetContentPath)
    {
        $this->container['mobileAssetContentPath'] = $mobileAssetContentPath;

        return $this;
    }

    /**
     * Gets mobileGearAssetDataBases
     *
     * @return \Bungie\Model\DestinyConfigGearAssetDataBaseDefinition[]
     */
    public function getMobileGearAssetDataBases()
    {
        return $this->container['mobileGearAssetDataBases'];
    }

    /**
     * Sets mobileGearAssetDataBases
     *
     * @param \Bungie\Model\DestinyConfigGearAssetDataBaseDefinition[] $mobileGearAssetDataBases mobileGearAssetDataBases
     *
     * @return $this
     */
    public function setMobileGearAssetDataBases($mobileGearAssetDataBases)
    {
        $this->container['mobileGearAssetDataBases'] = $mobileGearAssetDataBases;

        return $this;
    }

    /**
     * Gets mobileWorldContentPaths
     *
     * @return map[string,string]
     */
    public function getMobileWorldContentPaths()
    {
        return $this->container['mobileWorldContentPaths'];
    }

    /**
     * Sets mobileWorldContentPaths
     *
     * @param map[string,string] $mobileWorldContentPaths mobileWorldContentPaths
     *
     * @return $this
     */
    public function setMobileWorldContentPaths($mobileWorldContentPaths)
    {
        $this->container['mobileWorldContentPaths'] = $mobileWorldContentPaths;

        return $this;
    }

    /**
     * Gets mobileClanBannerDatabasePath
     *
     * @return string
     */
    public function getMobileClanBannerDatabasePath()
    {
        return $this->container['mobileClanBannerDatabasePath'];
    }

    /**
     * Sets mobileClanBannerDatabasePath
     *
     * @param string $mobileClanBannerDatabasePath mobileClanBannerDatabasePath
     *
     * @return $this
     */
    public function setMobileClanBannerDatabasePath($mobileClanBannerDatabasePath)
    {
        $this->container['mobileClanBannerDatabasePath'] = $mobileClanBannerDatabasePath;

        return $this;
    }

    /**
     * Gets mobileGearCDN
     *
     * @return map[string,string]
     */
    public function getMobileGearCDN()
    {
        return $this->container['mobileGearCDN'];
    }

    /**
     * Sets mobileGearCDN
     *
     * @param map[string,string] $mobileGearCDN mobileGearCDN
     *
     * @return $this
     */
    public function setMobileGearCDN($mobileGearCDN)
    {
        $this->container['mobileGearCDN'] = $mobileGearCDN;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


