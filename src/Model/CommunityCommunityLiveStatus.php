<?php
/**
 * CommunityCommunityLiveStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * CommunityCommunityLiveStatus Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommunityCommunityLiveStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Community.CommunityLiveStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateStatusUpdated' => '\DateTime',
        'url' => 'string',
        'partnershipIdentifier' => 'string',
        'partnershipType' => '\Bungie\Model\PartnershipsPartnershipType',
        'thumbnail' => 'string',
        'thumbnailSmall' => 'string',
        'thumbnailLarge' => 'string',
        'destinyCharacterId' => 'int',
        'userInfo' => '\Bungie\Model\UserUserInfoCard',
        'currentActivityHash' => 'int',
        'dateLastPlayed' => '\DateTime',
        'dateStreamStarted' => '\DateTime',
        'locale' => 'string',
        'currentViewers' => 'int',
        'followers' => 'int',
        'overallViewers' => 'int',
        'isFeatured' => 'bool',
        'title' => 'string',
        'activityModeHash' => 'int',
        'dateFeatured' => '\DateTime',
        'trendingValue' => 'float',
        'isSubscribable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'dateStatusUpdated' => 'date-time',
        'url' => null,
        'partnershipIdentifier' => null,
        'partnershipType' => null,
        'thumbnail' => null,
        'thumbnailSmall' => null,
        'thumbnailLarge' => null,
        'destinyCharacterId' => 'int64',
        'userInfo' => null,
        'currentActivityHash' => 'uint32',
        'dateLastPlayed' => 'date-time',
        'dateStreamStarted' => 'date-time',
        'locale' => null,
        'currentViewers' => 'int32',
        'followers' => 'int32',
        'overallViewers' => 'int32',
        'isFeatured' => null,
        'title' => null,
        'activityModeHash' => 'uint32',
        'dateFeatured' => 'date-time',
        'trendingValue' => 'float',
        'isSubscribable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateStatusUpdated' => 'dateStatusUpdated',
        'url' => 'url',
        'partnershipIdentifier' => 'partnershipIdentifier',
        'partnershipType' => 'partnershipType',
        'thumbnail' => 'thumbnail',
        'thumbnailSmall' => 'thumbnailSmall',
        'thumbnailLarge' => 'thumbnailLarge',
        'destinyCharacterId' => 'destinyCharacterId',
        'userInfo' => 'userInfo',
        'currentActivityHash' => 'currentActivityHash',
        'dateLastPlayed' => 'dateLastPlayed',
        'dateStreamStarted' => 'dateStreamStarted',
        'locale' => 'locale',
        'currentViewers' => 'currentViewers',
        'followers' => 'followers',
        'overallViewers' => 'overallViewers',
        'isFeatured' => 'isFeatured',
        'title' => 'title',
        'activityModeHash' => 'activityModeHash',
        'dateFeatured' => 'dateFeatured',
        'trendingValue' => 'trendingValue',
        'isSubscribable' => 'isSubscribable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateStatusUpdated' => 'setDateStatusUpdated',
        'url' => 'setUrl',
        'partnershipIdentifier' => 'setPartnershipIdentifier',
        'partnershipType' => 'setPartnershipType',
        'thumbnail' => 'setThumbnail',
        'thumbnailSmall' => 'setThumbnailSmall',
        'thumbnailLarge' => 'setThumbnailLarge',
        'destinyCharacterId' => 'setDestinyCharacterId',
        'userInfo' => 'setUserInfo',
        'currentActivityHash' => 'setCurrentActivityHash',
        'dateLastPlayed' => 'setDateLastPlayed',
        'dateStreamStarted' => 'setDateStreamStarted',
        'locale' => 'setLocale',
        'currentViewers' => 'setCurrentViewers',
        'followers' => 'setFollowers',
        'overallViewers' => 'setOverallViewers',
        'isFeatured' => 'setIsFeatured',
        'title' => 'setTitle',
        'activityModeHash' => 'setActivityModeHash',
        'dateFeatured' => 'setDateFeatured',
        'trendingValue' => 'setTrendingValue',
        'isSubscribable' => 'setIsSubscribable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateStatusUpdated' => 'getDateStatusUpdated',
        'url' => 'getUrl',
        'partnershipIdentifier' => 'getPartnershipIdentifier',
        'partnershipType' => 'getPartnershipType',
        'thumbnail' => 'getThumbnail',
        'thumbnailSmall' => 'getThumbnailSmall',
        'thumbnailLarge' => 'getThumbnailLarge',
        'destinyCharacterId' => 'getDestinyCharacterId',
        'userInfo' => 'getUserInfo',
        'currentActivityHash' => 'getCurrentActivityHash',
        'dateLastPlayed' => 'getDateLastPlayed',
        'dateStreamStarted' => 'getDateStreamStarted',
        'locale' => 'getLocale',
        'currentViewers' => 'getCurrentViewers',
        'followers' => 'getFollowers',
        'overallViewers' => 'getOverallViewers',
        'isFeatured' => 'getIsFeatured',
        'title' => 'getTitle',
        'activityModeHash' => 'getActivityModeHash',
        'dateFeatured' => 'getDateFeatured',
        'trendingValue' => 'getTrendingValue',
        'isSubscribable' => 'getIsSubscribable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateStatusUpdated'] = isset($data['dateStatusUpdated']) ? $data['dateStatusUpdated'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['partnershipIdentifier'] = isset($data['partnershipIdentifier']) ? $data['partnershipIdentifier'] : null;
        $this->container['partnershipType'] = isset($data['partnershipType']) ? $data['partnershipType'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['thumbnailSmall'] = isset($data['thumbnailSmall']) ? $data['thumbnailSmall'] : null;
        $this->container['thumbnailLarge'] = isset($data['thumbnailLarge']) ? $data['thumbnailLarge'] : null;
        $this->container['destinyCharacterId'] = isset($data['destinyCharacterId']) ? $data['destinyCharacterId'] : null;
        $this->container['userInfo'] = isset($data['userInfo']) ? $data['userInfo'] : null;
        $this->container['currentActivityHash'] = isset($data['currentActivityHash']) ? $data['currentActivityHash'] : null;
        $this->container['dateLastPlayed'] = isset($data['dateLastPlayed']) ? $data['dateLastPlayed'] : null;
        $this->container['dateStreamStarted'] = isset($data['dateStreamStarted']) ? $data['dateStreamStarted'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['currentViewers'] = isset($data['currentViewers']) ? $data['currentViewers'] : null;
        $this->container['followers'] = isset($data['followers']) ? $data['followers'] : null;
        $this->container['overallViewers'] = isset($data['overallViewers']) ? $data['overallViewers'] : null;
        $this->container['isFeatured'] = isset($data['isFeatured']) ? $data['isFeatured'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['activityModeHash'] = isset($data['activityModeHash']) ? $data['activityModeHash'] : null;
        $this->container['dateFeatured'] = isset($data['dateFeatured']) ? $data['dateFeatured'] : null;
        $this->container['trendingValue'] = isset($data['trendingValue']) ? $data['trendingValue'] : null;
        $this->container['isSubscribable'] = isset($data['isSubscribable']) ? $data['isSubscribable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateStatusUpdated
     *
     * @return \DateTime|null
     */
    public function getDateStatusUpdated()
    {
        return $this->container['dateStatusUpdated'];
    }

    /**
     * Sets dateStatusUpdated
     *
     * @param \DateTime|null $dateStatusUpdated dateStatusUpdated
     *
     * @return $this
     */
    public function setDateStatusUpdated($dateStatusUpdated)
    {
        $this->container['dateStatusUpdated'] = $dateStatusUpdated;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets partnershipIdentifier
     *
     * @return string|null
     */
    public function getPartnershipIdentifier()
    {
        return $this->container['partnershipIdentifier'];
    }

    /**
     * Sets partnershipIdentifier
     *
     * @param string|null $partnershipIdentifier partnershipIdentifier
     *
     * @return $this
     */
    public function setPartnershipIdentifier($partnershipIdentifier)
    {
        $this->container['partnershipIdentifier'] = $partnershipIdentifier;

        return $this;
    }

    /**
     * Gets partnershipType
     *
     * @return \Bungie\Model\PartnershipsPartnershipType|null
     */
    public function getPartnershipType()
    {
        return $this->container['partnershipType'];
    }

    /**
     * Sets partnershipType
     *
     * @param \Bungie\Model\PartnershipsPartnershipType|null $partnershipType partnershipType
     *
     * @return $this
     */
    public function setPartnershipType($partnershipType)
    {
        $this->container['partnershipType'] = $partnershipType;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string|null
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string|null $thumbnail thumbnail
     *
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets thumbnailSmall
     *
     * @return string|null
     */
    public function getThumbnailSmall()
    {
        return $this->container['thumbnailSmall'];
    }

    /**
     * Sets thumbnailSmall
     *
     * @param string|null $thumbnailSmall thumbnailSmall
     *
     * @return $this
     */
    public function setThumbnailSmall($thumbnailSmall)
    {
        $this->container['thumbnailSmall'] = $thumbnailSmall;

        return $this;
    }

    /**
     * Gets thumbnailLarge
     *
     * @return string|null
     */
    public function getThumbnailLarge()
    {
        return $this->container['thumbnailLarge'];
    }

    /**
     * Sets thumbnailLarge
     *
     * @param string|null $thumbnailLarge thumbnailLarge
     *
     * @return $this
     */
    public function setThumbnailLarge($thumbnailLarge)
    {
        $this->container['thumbnailLarge'] = $thumbnailLarge;

        return $this;
    }

    /**
     * Gets destinyCharacterId
     *
     * @return int|null
     */
    public function getDestinyCharacterId()
    {
        return $this->container['destinyCharacterId'];
    }

    /**
     * Sets destinyCharacterId
     *
     * @param int|null $destinyCharacterId destinyCharacterId
     *
     * @return $this
     */
    public function setDestinyCharacterId($destinyCharacterId)
    {
        $this->container['destinyCharacterId'] = $destinyCharacterId;

        return $this;
    }

    /**
     * Gets userInfo
     *
     * @return \Bungie\Model\UserUserInfoCard|null
     */
    public function getUserInfo()
    {
        return $this->container['userInfo'];
    }

    /**
     * Sets userInfo
     *
     * @param \Bungie\Model\UserUserInfoCard|null $userInfo userInfo
     *
     * @return $this
     */
    public function setUserInfo($userInfo)
    {
        $this->container['userInfo'] = $userInfo;

        return $this;
    }

    /**
     * Gets currentActivityHash
     *
     * @return int|null
     */
    public function getCurrentActivityHash()
    {
        return $this->container['currentActivityHash'];
    }

    /**
     * Sets currentActivityHash
     *
     * @param int|null $currentActivityHash currentActivityHash
     *
     * @return $this
     */
    public function setCurrentActivityHash($currentActivityHash)
    {
        $this->container['currentActivityHash'] = $currentActivityHash;

        return $this;
    }

    /**
     * Gets dateLastPlayed
     *
     * @return \DateTime|null
     */
    public function getDateLastPlayed()
    {
        return $this->container['dateLastPlayed'];
    }

    /**
     * Sets dateLastPlayed
     *
     * @param \DateTime|null $dateLastPlayed dateLastPlayed
     *
     * @return $this
     */
    public function setDateLastPlayed($dateLastPlayed)
    {
        $this->container['dateLastPlayed'] = $dateLastPlayed;

        return $this;
    }

    /**
     * Gets dateStreamStarted
     *
     * @return \DateTime|null
     */
    public function getDateStreamStarted()
    {
        return $this->container['dateStreamStarted'];
    }

    /**
     * Sets dateStreamStarted
     *
     * @param \DateTime|null $dateStreamStarted dateStreamStarted
     *
     * @return $this
     */
    public function setDateStreamStarted($dateStreamStarted)
    {
        $this->container['dateStreamStarted'] = $dateStreamStarted;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets currentViewers
     *
     * @return int|null
     */
    public function getCurrentViewers()
    {
        return $this->container['currentViewers'];
    }

    /**
     * Sets currentViewers
     *
     * @param int|null $currentViewers currentViewers
     *
     * @return $this
     */
    public function setCurrentViewers($currentViewers)
    {
        $this->container['currentViewers'] = $currentViewers;

        return $this;
    }

    /**
     * Gets followers
     *
     * @return int|null
     */
    public function getFollowers()
    {
        return $this->container['followers'];
    }

    /**
     * Sets followers
     *
     * @param int|null $followers followers
     *
     * @return $this
     */
    public function setFollowers($followers)
    {
        $this->container['followers'] = $followers;

        return $this;
    }

    /**
     * Gets overallViewers
     *
     * @return int|null
     */
    public function getOverallViewers()
    {
        return $this->container['overallViewers'];
    }

    /**
     * Sets overallViewers
     *
     * @param int|null $overallViewers overallViewers
     *
     * @return $this
     */
    public function setOverallViewers($overallViewers)
    {
        $this->container['overallViewers'] = $overallViewers;

        return $this;
    }

    /**
     * Gets isFeatured
     *
     * @return bool|null
     */
    public function getIsFeatured()
    {
        return $this->container['isFeatured'];
    }

    /**
     * Sets isFeatured
     *
     * @param bool|null $isFeatured isFeatured
     *
     * @return $this
     */
    public function setIsFeatured($isFeatured)
    {
        $this->container['isFeatured'] = $isFeatured;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets activityModeHash
     *
     * @return int|null
     */
    public function getActivityModeHash()
    {
        return $this->container['activityModeHash'];
    }

    /**
     * Sets activityModeHash
     *
     * @param int|null $activityModeHash activityModeHash
     *
     * @return $this
     */
    public function setActivityModeHash($activityModeHash)
    {
        $this->container['activityModeHash'] = $activityModeHash;

        return $this;
    }

    /**
     * Gets dateFeatured
     *
     * @return \DateTime|null
     */
    public function getDateFeatured()
    {
        return $this->container['dateFeatured'];
    }

    /**
     * Sets dateFeatured
     *
     * @param \DateTime|null $dateFeatured dateFeatured
     *
     * @return $this
     */
    public function setDateFeatured($dateFeatured)
    {
        $this->container['dateFeatured'] = $dateFeatured;

        return $this;
    }

    /**
     * Gets trendingValue
     *
     * @return float|null
     */
    public function getTrendingValue()
    {
        return $this->container['trendingValue'];
    }

    /**
     * Sets trendingValue
     *
     * @param float|null $trendingValue trendingValue
     *
     * @return $this
     */
    public function setTrendingValue($trendingValue)
    {
        $this->container['trendingValue'] = $trendingValue;

        return $this;
    }

    /**
     * Gets isSubscribable
     *
     * @return bool|null
     */
    public function getIsSubscribable()
    {
        return $this->container['isSubscribable'];
    }

    /**
     * Sets isSubscribable
     *
     * @param bool|null $isSubscribable isSubscribable
     *
     * @return $this
     */
    public function setIsSubscribable($isSubscribable)
    {
        $this->container['isSubscribable'] = $isSubscribable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


