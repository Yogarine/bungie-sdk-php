<?php
/**
 * DestinyPublicMilestoneChallengeActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Milestones;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyPublicMilestoneChallengeActivity Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyPublicMilestoneChallengeActivity implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Milestones.DestinyPublicMilestoneChallengeActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activityHash' => 'int',
        'challengeObjectiveHashes' => 'int[]',
        'modifierHashes' => 'int[]',
        'loadoutRequirementIndex' => 'int',
        'phaseHashes' => 'int[]',
        'booleanActivityOptions' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'activityHash' => 'uint32',
        'challengeObjectiveHashes' => 'uint32',
        'modifierHashes' => 'uint32',
        'loadoutRequirementIndex' => 'int32',
        'phaseHashes' => 'uint32',
        'booleanActivityOptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityHash' => 'activityHash',
        'challengeObjectiveHashes' => 'challengeObjectiveHashes',
        'modifierHashes' => 'modifierHashes',
        'loadoutRequirementIndex' => 'loadoutRequirementIndex',
        'phaseHashes' => 'phaseHashes',
        'booleanActivityOptions' => 'booleanActivityOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityHash' => 'setActivityHash',
        'challengeObjectiveHashes' => 'setChallengeObjectiveHashes',
        'modifierHashes' => 'setModifierHashes',
        'loadoutRequirementIndex' => 'setLoadoutRequirementIndex',
        'phaseHashes' => 'setPhaseHashes',
        'booleanActivityOptions' => 'setBooleanActivityOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityHash' => 'getActivityHash',
        'challengeObjectiveHashes' => 'getChallengeObjectiveHashes',
        'modifierHashes' => 'getModifierHashes',
        'loadoutRequirementIndex' => 'getLoadoutRequirementIndex',
        'phaseHashes' => 'getPhaseHashes',
        'booleanActivityOptions' => 'getBooleanActivityOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityHash'] = isset($data['activityHash']) ? $data['activityHash'] : null;
        $this->container['challengeObjectiveHashes'] = isset($data['challengeObjectiveHashes']) ? $data['challengeObjectiveHashes'] : null;
        $this->container['modifierHashes'] = isset($data['modifierHashes']) ? $data['modifierHashes'] : null;
        $this->container['loadoutRequirementIndex'] = isset($data['loadoutRequirementIndex']) ? $data['loadoutRequirementIndex'] : null;
        $this->container['phaseHashes'] = isset($data['phaseHashes']) ? $data['phaseHashes'] : null;
        $this->container['booleanActivityOptions'] = isset($data['booleanActivityOptions']) ? $data['booleanActivityOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityHash
     *
     * @return int|null
     */
    public function getActivityHash()
    {
        return $this->container['activityHash'];
    }

    /**
     * Sets activityHash
     *
     * @param int|null $activityHash activityHash
     *
     * @return $this
     */
    public function setActivityHash($activityHash)
    {
        $this->container['activityHash'] = $activityHash;

        return $this;
    }

    /**
     * Gets challengeObjectiveHashes
     *
     * @return int[]|null
     */
    public function getChallengeObjectiveHashes()
    {
        return $this->container['challengeObjectiveHashes'];
    }

    /**
     * Sets challengeObjectiveHashes
     *
     * @param int[]|null $challengeObjectiveHashes challengeObjectiveHashes
     *
     * @return $this
     */
    public function setChallengeObjectiveHashes($challengeObjectiveHashes)
    {
        $this->container['challengeObjectiveHashes'] = $challengeObjectiveHashes;

        return $this;
    }

    /**
     * Gets modifierHashes
     *
     * @return int[]|null
     */
    public function getModifierHashes()
    {
        return $this->container['modifierHashes'];
    }

    /**
     * Sets modifierHashes
     *
     * @param int[]|null $modifierHashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
     *
     * @return $this
     */
    public function setModifierHashes($modifierHashes)
    {
        $this->container['modifierHashes'] = $modifierHashes;

        return $this;
    }

    /**
     * Gets loadoutRequirementIndex
     *
     * @return int|null
     */
    public function getLoadoutRequirementIndex()
    {
        return $this->container['loadoutRequirementIndex'];
    }

    /**
     * Sets loadoutRequirementIndex
     *
     * @param int|null $loadoutRequirementIndex If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.
     *
     * @return $this
     */
    public function setLoadoutRequirementIndex($loadoutRequirementIndex)
    {
        $this->container['loadoutRequirementIndex'] = $loadoutRequirementIndex;

        return $this;
    }

    /**
     * Gets phaseHashes
     *
     * @return int[]|null
     */
    public function getPhaseHashes()
    {
        return $this->container['phaseHashes'];
    }

    /**
     * Sets phaseHashes
     *
     * @param int[]|null $phaseHashes The ordered list of phases for this activity, if any. Note that we have no human readable info for phases, nor any entities to relate them to: relating these hashes to something human readable is up to you unfortunately.
     *
     * @return $this
     */
    public function setPhaseHashes($phaseHashes)
    {
        $this->container['phaseHashes'] = $phaseHashes;

        return $this;
    }

    /**
     * Gets booleanActivityOptions
     *
     * @return map[string,bool]|null
     */
    public function getBooleanActivityOptions()
    {
        return $this->container['booleanActivityOptions'];
    }

    /**
     * Sets booleanActivityOptions
     *
     * @param map[string,bool]|null $booleanActivityOptions The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We have no human readable information for this data, so it's up to you if you want to associate it with such info to show it.
     *
     * @return $this
     */
    public function setBooleanActivityOptions($booleanActivityOptions)
    {
        $this->container['booleanActivityOptions'] = $booleanActivityOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


