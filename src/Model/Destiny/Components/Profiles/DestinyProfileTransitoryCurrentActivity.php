<?php
/**
 * DestinyProfileTransitoryCurrentActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Components\Profiles;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyProfileTransitoryCurrentActivity Class Doc Comment
 *
 * @category Class
 * @description If you are playing in an activity, this is some information about it.  Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyProfileTransitoryCurrentActivity implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Components.Profiles.DestinyProfileTransitoryCurrentActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'startTime' => '\DateTime',
        'endTime' => '\DateTime',
        'score' => 'float',
        'highestOpposingFactionScore' => 'float',
        'numberOfOpponents' => 'int',
        'numberOfPlayers' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'startTime' => 'date-time',
        'endTime' => 'date-time',
        'score' => 'float',
        'highestOpposingFactionScore' => 'float',
        'numberOfOpponents' => 'int32',
        'numberOfPlayers' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'startTime' => 'startTime',
        'endTime' => 'endTime',
        'score' => 'score',
        'highestOpposingFactionScore' => 'highestOpposingFactionScore',
        'numberOfOpponents' => 'numberOfOpponents',
        'numberOfPlayers' => 'numberOfPlayers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'score' => 'setScore',
        'highestOpposingFactionScore' => 'setHighestOpposingFactionScore',
        'numberOfOpponents' => 'setNumberOfOpponents',
        'numberOfPlayers' => 'setNumberOfPlayers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'score' => 'getScore',
        'highestOpposingFactionScore' => 'getHighestOpposingFactionScore',
        'numberOfOpponents' => 'getNumberOfOpponents',
        'numberOfPlayers' => 'getNumberOfPlayers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['endTime'] = isset($data['endTime']) ? $data['endTime'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['highestOpposingFactionScore'] = isset($data['highestOpposingFactionScore']) ? $data['highestOpposingFactionScore'] : null;
        $this->container['numberOfOpponents'] = isset($data['numberOfOpponents']) ? $data['numberOfOpponents'] : null;
        $this->container['numberOfPlayers'] = isset($data['numberOfPlayers']) ? $data['numberOfPlayers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets startTime
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime|null $startTime When the activity started.
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime|null $endTime If you're still in it but it \"ended\" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
     *
     * @return $this
     */
    public function setEndTime($endTime)
    {
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float|null $score This is what our non-authoritative source thought the score was.
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets highestOpposingFactionScore
     *
     * @return float|null
     */
    public function getHighestOpposingFactionScore()
    {
        return $this->container['highestOpposingFactionScore'];
    }

    /**
     * Sets highestOpposingFactionScore
     *
     * @param float|null $highestOpposingFactionScore If you have human opponents, this is the highest opposing team's score.
     *
     * @return $this
     */
    public function setHighestOpposingFactionScore($highestOpposingFactionScore)
    {
        $this->container['highestOpposingFactionScore'] = $highestOpposingFactionScore;

        return $this;
    }

    /**
     * Gets numberOfOpponents
     *
     * @return int|null
     */
    public function getNumberOfOpponents()
    {
        return $this->container['numberOfOpponents'];
    }

    /**
     * Sets numberOfOpponents
     *
     * @param int|null $numberOfOpponents This is how many human or poorly crafted aimbot opponents you have.
     *
     * @return $this
     */
    public function setNumberOfOpponents($numberOfOpponents)
    {
        $this->container['numberOfOpponents'] = $numberOfOpponents;

        return $this;
    }

    /**
     * Gets numberOfPlayers
     *
     * @return int|null
     */
    public function getNumberOfPlayers()
    {
        return $this->container['numberOfPlayers'];
    }

    /**
     * Sets numberOfPlayers
     *
     * @param int|null $numberOfPlayers This is how many human or poorly crafted aimbots are on your team.
     *
     * @return $this
     */
    public function setNumberOfPlayers($numberOfPlayers)
    {
        $this->container['numberOfPlayers'] = $numberOfPlayers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


