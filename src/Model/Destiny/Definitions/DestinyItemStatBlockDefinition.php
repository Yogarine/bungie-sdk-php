<?php
/**
 * DestinyItemStatBlockDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyItemStatBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description Information about the item&#39;s calculated stats, with as much data as we can find for the stats without having an actual instance of the item.  Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.  It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyItemStatBlockDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemStatBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disablePrimaryStatDisplay' => 'bool',
        'statGroupHash' => 'int',
        'stats' => 'map[string,\Bungie\Model\Destiny\Definitions\DestinyInventoryItemStatDefinition]',
        'hasDisplayableStats' => 'bool',
        'primaryBaseStatHash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'disablePrimaryStatDisplay' => null,
        'statGroupHash' => 'uint32',
        'stats' => null,
        'hasDisplayableStats' => null,
        'primaryBaseStatHash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disablePrimaryStatDisplay' => 'disablePrimaryStatDisplay',
        'statGroupHash' => 'statGroupHash',
        'stats' => 'stats',
        'hasDisplayableStats' => 'hasDisplayableStats',
        'primaryBaseStatHash' => 'primaryBaseStatHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disablePrimaryStatDisplay' => 'setDisablePrimaryStatDisplay',
        'statGroupHash' => 'setStatGroupHash',
        'stats' => 'setStats',
        'hasDisplayableStats' => 'setHasDisplayableStats',
        'primaryBaseStatHash' => 'setPrimaryBaseStatHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disablePrimaryStatDisplay' => 'getDisablePrimaryStatDisplay',
        'statGroupHash' => 'getStatGroupHash',
        'stats' => 'getStats',
        'hasDisplayableStats' => 'getHasDisplayableStats',
        'primaryBaseStatHash' => 'getPrimaryBaseStatHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disablePrimaryStatDisplay'] = isset($data['disablePrimaryStatDisplay']) ? $data['disablePrimaryStatDisplay'] : null;
        $this->container['statGroupHash'] = isset($data['statGroupHash']) ? $data['statGroupHash'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['hasDisplayableStats'] = isset($data['hasDisplayableStats']) ? $data['hasDisplayableStats'] : null;
        $this->container['primaryBaseStatHash'] = isset($data['primaryBaseStatHash']) ? $data['primaryBaseStatHash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disablePrimaryStatDisplay
     *
     * @return bool|null
     */
    public function getDisablePrimaryStatDisplay()
    {
        return $this->container['disablePrimaryStatDisplay'];
    }

    /**
     * Sets disablePrimaryStatDisplay
     *
     * @param bool|null $disablePrimaryStatDisplay If true, the game won't show the \"primary\" stat on this item when you inspect it.  NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.
     *
     * @return $this
     */
    public function setDisablePrimaryStatDisplay($disablePrimaryStatDisplay)
    {
        $this->container['disablePrimaryStatDisplay'] = $disablePrimaryStatDisplay;

        return $this;
    }

    /**
     * Gets statGroupHash
     *
     * @return int|null
     */
    public function getStatGroupHash()
    {
        return $this->container['statGroupHash'];
    }

    /**
     * Sets statGroupHash
     *
     * @param int|null $statGroupHash If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.  If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.
     *
     * @return $this
     */
    public function setStatGroupHash($statGroupHash)
    {
        $this->container['statGroupHash'] = $statGroupHash;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return map[string,\Bungie\Model\Destiny\Definitions\DestinyInventoryItemStatDefinition]|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param map[string,\Bungie\Model\Destiny\Definitions\DestinyInventoryItemStatDefinition]|null $stats If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the \"Display\" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.  These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets hasDisplayableStats
     *
     * @return bool|null
     */
    public function getHasDisplayableStats()
    {
        return $this->container['hasDisplayableStats'];
    }

    /**
     * Sets hasDisplayableStats
     *
     * @param bool|null $hasDisplayableStats A quick and lazy way to determine whether any stat other than the \"primary\" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the \"Stat Group\" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.
     *
     * @return $this
     */
    public function setHasDisplayableStats($hasDisplayableStats)
    {
        $this->container['hasDisplayableStats'] = $hasDisplayableStats;

        return $this;
    }

    /**
     * Gets primaryBaseStatHash
     *
     * @return int|null
     */
    public function getPrimaryBaseStatHash()
    {
        return $this->container['primaryBaseStatHash'];
    }

    /**
     * Sets primaryBaseStatHash
     *
     * @param int|null $primaryBaseStatHash This stat is determined to be the \"primary\" stat, and can be looked up in the stats or any other stat collection related to the item.  Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.
     *
     * @return $this
     */
    public function setPrimaryBaseStatHash($primaryBaseStatHash)
    {
        $this->container['primaryBaseStatHash'] = $primaryBaseStatHash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


