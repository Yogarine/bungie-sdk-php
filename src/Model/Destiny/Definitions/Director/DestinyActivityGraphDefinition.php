<?php
/**
 * DestinyActivityGraphDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Director;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyActivityGraphDefinition Class Doc Comment
 *
 * @category Class
 * @description Represents a Map View in the director: be them overview views, destination views, or other.  They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.  Activity graphs, most importantly, have nodes which can have activities in various states of playability.  Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don&#39;t get in these definitions.  If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game&#39;s content changed. So don&#39;t bet the farm on us providing that content in this definition.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyActivityGraphDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Director.DestinyActivityGraphDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nodes' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphNodeDefinition[]',
        'artElements' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphArtElementDefinition[]',
        'connections' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphConnectionDefinition[]',
        'displayObjectives' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayObjectiveDefinition[]',
        'displayProgressions' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayProgressionDefinition[]',
        'linkedGraphs' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyLinkedGraphDefinition[]',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'nodes' => null,
        'artElements' => null,
        'connections' => null,
        'displayObjectives' => null,
        'displayProgressions' => null,
        'linkedGraphs' => null,
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nodes' => 'nodes',
        'artElements' => 'artElements',
        'connections' => 'connections',
        'displayObjectives' => 'displayObjectives',
        'displayProgressions' => 'displayProgressions',
        'linkedGraphs' => 'linkedGraphs',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nodes' => 'setNodes',
        'artElements' => 'setArtElements',
        'connections' => 'setConnections',
        'displayObjectives' => 'setDisplayObjectives',
        'displayProgressions' => 'setDisplayProgressions',
        'linkedGraphs' => 'setLinkedGraphs',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nodes' => 'getNodes',
        'artElements' => 'getArtElements',
        'connections' => 'getConnections',
        'displayObjectives' => 'getDisplayObjectives',
        'displayProgressions' => 'getDisplayProgressions',
        'linkedGraphs' => 'getLinkedGraphs',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nodes'] = isset($data['nodes']) ? $data['nodes'] : null;
        $this->container['artElements'] = isset($data['artElements']) ? $data['artElements'] : null;
        $this->container['connections'] = isset($data['connections']) ? $data['connections'] : null;
        $this->container['displayObjectives'] = isset($data['displayObjectives']) ? $data['displayObjectives'] : null;
        $this->container['displayProgressions'] = isset($data['displayProgressions']) ? $data['displayProgressions'] : null;
        $this->container['linkedGraphs'] = isset($data['linkedGraphs']) ? $data['linkedGraphs'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nodes
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphNodeDefinition[]|null
     */
    public function getNodes()
    {
        return $this->container['nodes'];
    }

    /**
     * Sets nodes
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphNodeDefinition[]|null $nodes These represent the visual \"nodes\" on the map's view. These are the activities you can click on in the map.
     *
     * @return $this
     */
    public function setNodes($nodes)
    {
        $this->container['nodes'] = $nodes;

        return $this;
    }

    /**
     * Gets artElements
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphArtElementDefinition[]|null
     */
    public function getArtElements()
    {
        return $this->container['artElements'];
    }

    /**
     * Sets artElements
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphArtElementDefinition[]|null $artElements Represents one-off/special UI elements that appear on the map.
     *
     * @return $this
     */
    public function setArtElements($artElements)
    {
        $this->container['artElements'] = $artElements;

        return $this;
    }

    /**
     * Gets connections
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphConnectionDefinition[]|null
     */
    public function getConnections()
    {
        return $this->container['connections'];
    }

    /**
     * Sets connections
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphConnectionDefinition[]|null $connections Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.
     *
     * @return $this
     */
    public function setConnections($connections)
    {
        $this->container['connections'] = $connections;

        return $this;
    }

    /**
     * Gets displayObjectives
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayObjectiveDefinition[]|null
     */
    public function getDisplayObjectives()
    {
        return $this->container['displayObjectives'];
    }

    /**
     * Sets displayObjectives
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayObjectiveDefinition[]|null $displayObjectives Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.
     *
     * @return $this
     */
    public function setDisplayObjectives($displayObjectives)
    {
        $this->container['displayObjectives'] = $displayObjectives;

        return $this;
    }

    /**
     * Gets displayProgressions
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayProgressionDefinition[]|null
     */
    public function getDisplayProgressions()
    {
        return $this->container['displayProgressions'];
    }

    /**
     * Sets displayProgressions
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyActivityGraphDisplayProgressionDefinition[]|null $displayProgressions Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.
     *
     * @return $this
     */
    public function setDisplayProgressions($displayProgressions)
    {
        $this->container['displayProgressions'] = $displayProgressions;

        return $this;
    }

    /**
     * Gets linkedGraphs
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyLinkedGraphDefinition[]|null
     */
    public function getLinkedGraphs()
    {
        return $this->container['linkedGraphs'];
    }

    /**
     * Sets linkedGraphs
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Director\DestinyLinkedGraphDefinition[]|null $linkedGraphs Represents links between this Activity Graph and other ones.
     *
     * @return $this
     */
    public function setLinkedGraphs($linkedGraphs)
    {
        $this->container['linkedGraphs'] = $linkedGraphs;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


