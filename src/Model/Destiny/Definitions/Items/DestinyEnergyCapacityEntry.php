<?php
/**
 * DestinyEnergyCapacityEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.8.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Items;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyEnergyCapacityEntry Class Doc Comment
 *
 * @category Class
 * @description Items can have Energy Capacity, and plugs can provide that capacity such as on a piece of Armor in Armor 2.0. This is how much \&quot;Energy\&quot; can be spent on activating plugs for this item.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyEnergyCapacityEntry implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Items.DestinyEnergyCapacityEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capacityValue' => 'int',
        'energyTypeHash' => 'int',
        'energyType' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'capacityValue' => 'int32',
        'energyTypeHash' => 'uint32',
        'energyType' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capacityValue' => 'capacityValue',
        'energyTypeHash' => 'energyTypeHash',
        'energyType' => 'energyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capacityValue' => 'setCapacityValue',
        'energyTypeHash' => 'setEnergyTypeHash',
        'energyType' => 'setEnergyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capacityValue' => 'getCapacityValue',
        'energyTypeHash' => 'getEnergyTypeHash',
        'energyType' => 'getEnergyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capacityValue'] = isset($data['capacityValue']) ? $data['capacityValue'] : null;
        $this->container['energyTypeHash'] = isset($data['energyTypeHash']) ? $data['energyTypeHash'] : null;
        $this->container['energyType'] = isset($data['energyType']) ? $data['energyType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capacityValue
     *
     * @return int|null
     */
    public function getCapacityValue()
    {
        return $this->container['capacityValue'];
    }

    /**
     * Sets capacityValue
     *
     * @param int|null $capacityValue How much energy capacity this plug provides.
     *
     * @return $this
     */
    public function setCapacityValue($capacityValue)
    {
        $this->container['capacityValue'] = $capacityValue;

        return $this;
    }

    /**
     * Gets energyTypeHash
     *
     * @return int|null
     */
    public function getEnergyTypeHash()
    {
        return $this->container['energyTypeHash'];
    }

    /**
     * Sets energyTypeHash
     *
     * @param int|null $energyTypeHash Energy provided by a plug is always of a specific type - this is the hash identifier for the energy type for which it provides Capacity.
     *
     * @return $this
     */
    public function setEnergyTypeHash($energyTypeHash)
    {
        $this->container['energyTypeHash'] = $energyTypeHash;

        return $this;
    }

    /**
     * Gets energyType
     *
     * @return int|null
     */
    public function getEnergyType()
    {
        return $this->container['energyType'];
    }

    /**
     * Sets energyType
     *
     * @param int|null $energyType The Energy Type for this energy capacity, in enum form for easy use.
     *
     * @return $this
     */
    public function setEnergyType($energyType)
    {
        $this->container['energyType'] = $energyType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


