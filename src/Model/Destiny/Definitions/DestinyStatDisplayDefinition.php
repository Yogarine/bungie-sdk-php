<?php
/**
 * DestinyStatDisplayDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyStatDisplayDefinition Class Doc Comment
 *
 * @category Class
 * @description Describes the way that an Item Stat (see DestinyStatDefinition) is transformed using the DestinyStatGroupDefinition related to that item. See both of the aforementioned definitions for more information about the stages of stat transformation.  This represents the transformation of a stat into a \&quot;Display\&quot; stat (the closest value that BNet can get to the in-game display value of the stat)
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyStatDisplayDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyStatDisplayDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'statHash' => 'int',
        'maximumValue' => 'int',
        'displayAsNumeric' => 'bool',
        'displayInterpolation' => '\Bungie\Model\Interpolation\InterpolationPoint[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'statHash' => 'uint32',
        'maximumValue' => 'int32',
        'displayAsNumeric' => null,
        'displayInterpolation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statHash' => 'statHash',
        'maximumValue' => 'maximumValue',
        'displayAsNumeric' => 'displayAsNumeric',
        'displayInterpolation' => 'displayInterpolation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statHash' => 'setStatHash',
        'maximumValue' => 'setMaximumValue',
        'displayAsNumeric' => 'setDisplayAsNumeric',
        'displayInterpolation' => 'setDisplayInterpolation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statHash' => 'getStatHash',
        'maximumValue' => 'getMaximumValue',
        'displayAsNumeric' => 'getDisplayAsNumeric',
        'displayInterpolation' => 'getDisplayInterpolation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['statHash'] = isset($data['statHash']) ? $data['statHash'] : null;
        $this->container['maximumValue'] = isset($data['maximumValue']) ? $data['maximumValue'] : null;
        $this->container['displayAsNumeric'] = isset($data['displayAsNumeric']) ? $data['displayAsNumeric'] : null;
        $this->container['displayInterpolation'] = isset($data['displayInterpolation']) ? $data['displayInterpolation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statHash
     *
     * @return int|null
     */
    public function getStatHash()
    {
        return $this->container['statHash'];
    }

    /**
     * Sets statHash
     *
     * @param int|null $statHash The hash identifier for the stat being transformed into a Display stat.  Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition's stats property.
     *
     * @return $this
     */
    public function setStatHash($statHash)
    {
        $this->container['statHash'] = $statHash;

        return $this;
    }

    /**
     * Gets maximumValue
     *
     * @return int|null
     */
    public function getMaximumValue()
    {
        return $this->container['maximumValue'];
    }

    /**
     * Sets maximumValue
     *
     * @param int|null $maximumValue Regardless of the output of interpolation, this is the maximum possible value that the stat can be. It should also be used as the upper bound for displaying the stat as a progress bar (the minimum always being 0)
     *
     * @return $this
     */
    public function setMaximumValue($maximumValue)
    {
        $this->container['maximumValue'] = $maximumValue;

        return $this;
    }

    /**
     * Gets displayAsNumeric
     *
     * @return bool|null
     */
    public function getDisplayAsNumeric()
    {
        return $this->container['displayAsNumeric'];
    }

    /**
     * Sets displayAsNumeric
     *
     * @param bool|null $displayAsNumeric If this is true, the stat should be displayed as a number. Otherwise, display it as a progress bar. Or, you know, do whatever you want. There's no displayAsNumeric police.
     *
     * @return $this
     */
    public function setDisplayAsNumeric($displayAsNumeric)
    {
        $this->container['displayAsNumeric'] = $displayAsNumeric;

        return $this;
    }

    /**
     * Gets displayInterpolation
     *
     * @return \Bungie\Model\Interpolation\InterpolationPoint[]|null
     */
    public function getDisplayInterpolation()
    {
        return $this->container['displayInterpolation'];
    }

    /**
     * Sets displayInterpolation
     *
     * @param \Bungie\Model\Interpolation\InterpolationPoint[]|null $displayInterpolation The interpolation table representing how the Investment Stat is transformed into a Display Stat.   See DestinyStatDefinition for a description of the stages of stat transformation.
     *
     * @return $this
     */
    public function setDisplayInterpolation($displayInterpolation)
    {
        $this->container['displayInterpolation'] = $displayInterpolation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


