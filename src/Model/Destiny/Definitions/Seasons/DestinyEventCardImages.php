<?php
/**
 * DestinyEventCardImages
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.17.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Seasons;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyEventCardImages Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyEventCardImages implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Seasons.DestinyEventCardImages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unownedCardSleeveImagePath' => 'string',
        'unownedCardSleeveWrapImagePath' => 'string',
        'cardIncompleteImagePath' => 'string',
        'cardCompleteImagePath' => 'string',
        'cardCompleteWrapImagePath' => 'string',
        'progressIconImagePath' => 'string',
        'themeBackgroundImagePath' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'unownedCardSleeveImagePath' => null,
        'unownedCardSleeveWrapImagePath' => null,
        'cardIncompleteImagePath' => null,
        'cardCompleteImagePath' => null,
        'cardCompleteWrapImagePath' => null,
        'progressIconImagePath' => null,
        'themeBackgroundImagePath' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unownedCardSleeveImagePath' => 'unownedCardSleeveImagePath',
        'unownedCardSleeveWrapImagePath' => 'unownedCardSleeveWrapImagePath',
        'cardIncompleteImagePath' => 'cardIncompleteImagePath',
        'cardCompleteImagePath' => 'cardCompleteImagePath',
        'cardCompleteWrapImagePath' => 'cardCompleteWrapImagePath',
        'progressIconImagePath' => 'progressIconImagePath',
        'themeBackgroundImagePath' => 'themeBackgroundImagePath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unownedCardSleeveImagePath' => 'setUnownedCardSleeveImagePath',
        'unownedCardSleeveWrapImagePath' => 'setUnownedCardSleeveWrapImagePath',
        'cardIncompleteImagePath' => 'setCardIncompleteImagePath',
        'cardCompleteImagePath' => 'setCardCompleteImagePath',
        'cardCompleteWrapImagePath' => 'setCardCompleteWrapImagePath',
        'progressIconImagePath' => 'setProgressIconImagePath',
        'themeBackgroundImagePath' => 'setThemeBackgroundImagePath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unownedCardSleeveImagePath' => 'getUnownedCardSleeveImagePath',
        'unownedCardSleeveWrapImagePath' => 'getUnownedCardSleeveWrapImagePath',
        'cardIncompleteImagePath' => 'getCardIncompleteImagePath',
        'cardCompleteImagePath' => 'getCardCompleteImagePath',
        'cardCompleteWrapImagePath' => 'getCardCompleteWrapImagePath',
        'progressIconImagePath' => 'getProgressIconImagePath',
        'themeBackgroundImagePath' => 'getThemeBackgroundImagePath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unownedCardSleeveImagePath'] = isset($data['unownedCardSleeveImagePath']) ? $data['unownedCardSleeveImagePath'] : null;
        $this->container['unownedCardSleeveWrapImagePath'] = isset($data['unownedCardSleeveWrapImagePath']) ? $data['unownedCardSleeveWrapImagePath'] : null;
        $this->container['cardIncompleteImagePath'] = isset($data['cardIncompleteImagePath']) ? $data['cardIncompleteImagePath'] : null;
        $this->container['cardCompleteImagePath'] = isset($data['cardCompleteImagePath']) ? $data['cardCompleteImagePath'] : null;
        $this->container['cardCompleteWrapImagePath'] = isset($data['cardCompleteWrapImagePath']) ? $data['cardCompleteWrapImagePath'] : null;
        $this->container['progressIconImagePath'] = isset($data['progressIconImagePath']) ? $data['progressIconImagePath'] : null;
        $this->container['themeBackgroundImagePath'] = isset($data['themeBackgroundImagePath']) ? $data['themeBackgroundImagePath'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unownedCardSleeveImagePath
     *
     * @return string|null
     */
    public function getUnownedCardSleeveImagePath()
    {
        return $this->container['unownedCardSleeveImagePath'];
    }

    /**
     * Sets unownedCardSleeveImagePath
     *
     * @param string|null $unownedCardSleeveImagePath unownedCardSleeveImagePath
     *
     * @return $this
     */
    public function setUnownedCardSleeveImagePath($unownedCardSleeveImagePath)
    {
        $this->container['unownedCardSleeveImagePath'] = $unownedCardSleeveImagePath;

        return $this;
    }

    /**
     * Gets unownedCardSleeveWrapImagePath
     *
     * @return string|null
     */
    public function getUnownedCardSleeveWrapImagePath()
    {
        return $this->container['unownedCardSleeveWrapImagePath'];
    }

    /**
     * Sets unownedCardSleeveWrapImagePath
     *
     * @param string|null $unownedCardSleeveWrapImagePath unownedCardSleeveWrapImagePath
     *
     * @return $this
     */
    public function setUnownedCardSleeveWrapImagePath($unownedCardSleeveWrapImagePath)
    {
        $this->container['unownedCardSleeveWrapImagePath'] = $unownedCardSleeveWrapImagePath;

        return $this;
    }

    /**
     * Gets cardIncompleteImagePath
     *
     * @return string|null
     */
    public function getCardIncompleteImagePath()
    {
        return $this->container['cardIncompleteImagePath'];
    }

    /**
     * Sets cardIncompleteImagePath
     *
     * @param string|null $cardIncompleteImagePath cardIncompleteImagePath
     *
     * @return $this
     */
    public function setCardIncompleteImagePath($cardIncompleteImagePath)
    {
        $this->container['cardIncompleteImagePath'] = $cardIncompleteImagePath;

        return $this;
    }

    /**
     * Gets cardCompleteImagePath
     *
     * @return string|null
     */
    public function getCardCompleteImagePath()
    {
        return $this->container['cardCompleteImagePath'];
    }

    /**
     * Sets cardCompleteImagePath
     *
     * @param string|null $cardCompleteImagePath cardCompleteImagePath
     *
     * @return $this
     */
    public function setCardCompleteImagePath($cardCompleteImagePath)
    {
        $this->container['cardCompleteImagePath'] = $cardCompleteImagePath;

        return $this;
    }

    /**
     * Gets cardCompleteWrapImagePath
     *
     * @return string|null
     */
    public function getCardCompleteWrapImagePath()
    {
        return $this->container['cardCompleteWrapImagePath'];
    }

    /**
     * Sets cardCompleteWrapImagePath
     *
     * @param string|null $cardCompleteWrapImagePath cardCompleteWrapImagePath
     *
     * @return $this
     */
    public function setCardCompleteWrapImagePath($cardCompleteWrapImagePath)
    {
        $this->container['cardCompleteWrapImagePath'] = $cardCompleteWrapImagePath;

        return $this;
    }

    /**
     * Gets progressIconImagePath
     *
     * @return string|null
     */
    public function getProgressIconImagePath()
    {
        return $this->container['progressIconImagePath'];
    }

    /**
     * Sets progressIconImagePath
     *
     * @param string|null $progressIconImagePath progressIconImagePath
     *
     * @return $this
     */
    public function setProgressIconImagePath($progressIconImagePath)
    {
        $this->container['progressIconImagePath'] = $progressIconImagePath;

        return $this;
    }

    /**
     * Gets themeBackgroundImagePath
     *
     * @return string|null
     */
    public function getThemeBackgroundImagePath()
    {
        return $this->container['themeBackgroundImagePath'];
    }

    /**
     * Sets themeBackgroundImagePath
     *
     * @param string|null $themeBackgroundImagePath themeBackgroundImagePath
     *
     * @return $this
     */
    public function setThemeBackgroundImagePath($themeBackgroundImagePath)
    {
        $this->container['themeBackgroundImagePath'] = $themeBackgroundImagePath;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


