<?php
/**
 * DestinySeasonDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.8.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Seasons;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinySeasonDefinition Class Doc Comment
 *
 * @category Class
 * @description Defines a canonical \&quot;Season\&quot; of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinySeasonDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Seasons.DestinySeasonDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'displayProperties' => '\Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition',
        'backgroundImagePath' => 'string',
        'seasonNumber' => 'int',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'seasonPassHash' => 'int',
        'seasonPassProgressionHash' => 'int',
        'artifactItemHash' => 'int',
        'sealPresentationNodeHash' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'displayProperties' => null,
        'backgroundImagePath' => null,
        'seasonNumber' => 'int32',
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'seasonPassHash' => 'uint32',
        'seasonPassProgressionHash' => 'uint32',
        'artifactItemHash' => 'uint32',
        'sealPresentationNodeHash' => 'uint32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'backgroundImagePath' => 'backgroundImagePath',
        'seasonNumber' => 'seasonNumber',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'seasonPassHash' => 'seasonPassHash',
        'seasonPassProgressionHash' => 'seasonPassProgressionHash',
        'artifactItemHash' => 'artifactItemHash',
        'sealPresentationNodeHash' => 'sealPresentationNodeHash',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'backgroundImagePath' => 'setBackgroundImagePath',
        'seasonNumber' => 'setSeasonNumber',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'seasonPassHash' => 'setSeasonPassHash',
        'seasonPassProgressionHash' => 'setSeasonPassProgressionHash',
        'artifactItemHash' => 'setArtifactItemHash',
        'sealPresentationNodeHash' => 'setSealPresentationNodeHash',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'backgroundImagePath' => 'getBackgroundImagePath',
        'seasonNumber' => 'getSeasonNumber',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'seasonPassHash' => 'getSeasonPassHash',
        'seasonPassProgressionHash' => 'getSeasonPassProgressionHash',
        'artifactItemHash' => 'getArtifactItemHash',
        'sealPresentationNodeHash' => 'getSealPresentationNodeHash',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['backgroundImagePath'] = isset($data['backgroundImagePath']) ? $data['backgroundImagePath'] : null;
        $this->container['seasonNumber'] = isset($data['seasonNumber']) ? $data['seasonNumber'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['seasonPassHash'] = isset($data['seasonPassHash']) ? $data['seasonPassHash'] : null;
        $this->container['seasonPassProgressionHash'] = isset($data['seasonPassProgressionHash']) ? $data['seasonPassProgressionHash'] : null;
        $this->container['artifactItemHash'] = isset($data['artifactItemHash']) ? $data['artifactItemHash'] : null;
        $this->container['sealPresentationNodeHash'] = isset($data['sealPresentationNodeHash']) ? $data['sealPresentationNodeHash'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets displayProperties
     *
     * @return \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null $displayProperties displayProperties
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets backgroundImagePath
     *
     * @return string|null
     */
    public function getBackgroundImagePath()
    {
        return $this->container['backgroundImagePath'];
    }

    /**
     * Sets backgroundImagePath
     *
     * @param string|null $backgroundImagePath backgroundImagePath
     *
     * @return $this
     */
    public function setBackgroundImagePath($backgroundImagePath)
    {
        $this->container['backgroundImagePath'] = $backgroundImagePath;

        return $this;
    }

    /**
     * Gets seasonNumber
     *
     * @return int|null
     */
    public function getSeasonNumber()
    {
        return $this->container['seasonNumber'];
    }

    /**
     * Sets seasonNumber
     *
     * @param int|null $seasonNumber seasonNumber
     *
     * @return $this
     */
    public function setSeasonNumber($seasonNumber)
    {
        $this->container['seasonNumber'] = $seasonNumber;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets seasonPassHash
     *
     * @return int|null
     */
    public function getSeasonPassHash()
    {
        return $this->container['seasonPassHash'];
    }

    /**
     * Sets seasonPassHash
     *
     * @param int|null $seasonPassHash seasonPassHash
     *
     * @return $this
     */
    public function setSeasonPassHash($seasonPassHash)
    {
        $this->container['seasonPassHash'] = $seasonPassHash;

        return $this;
    }

    /**
     * Gets seasonPassProgressionHash
     *
     * @return int|null
     */
    public function getSeasonPassProgressionHash()
    {
        return $this->container['seasonPassProgressionHash'];
    }

    /**
     * Sets seasonPassProgressionHash
     *
     * @param int|null $seasonPassProgressionHash seasonPassProgressionHash
     *
     * @return $this
     */
    public function setSeasonPassProgressionHash($seasonPassProgressionHash)
    {
        $this->container['seasonPassProgressionHash'] = $seasonPassProgressionHash;

        return $this;
    }

    /**
     * Gets artifactItemHash
     *
     * @return int|null
     */
    public function getArtifactItemHash()
    {
        return $this->container['artifactItemHash'];
    }

    /**
     * Sets artifactItemHash
     *
     * @param int|null $artifactItemHash artifactItemHash
     *
     * @return $this
     */
    public function setArtifactItemHash($artifactItemHash)
    {
        $this->container['artifactItemHash'] = $artifactItemHash;

        return $this;
    }

    /**
     * Gets sealPresentationNodeHash
     *
     * @return int|null
     */
    public function getSealPresentationNodeHash()
    {
        return $this->container['sealPresentationNodeHash'];
    }

    /**
     * Sets sealPresentationNodeHash
     *
     * @param int|null $sealPresentationNodeHash sealPresentationNodeHash
     *
     * @return $this
     */
    public function setSealPresentationNodeHash($sealPresentationNodeHash)
    {
        $this->container['sealPresentationNodeHash'] = $sealPresentationNodeHash;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


