<?php
/**
 * DestinyObjectiveDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyObjectiveDefinition Class Doc Comment
 *
 * @category Class
 * @description Defines an \&quot;Objective\&quot;.  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyObjectiveDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyObjectiveDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'displayProperties' => '\Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition',
        'completionValue' => 'int',
        'scope' => 'int',
        'locationHash' => 'int',
        'allowNegativeValue' => 'bool',
        'allowValueChangeWhenCompleted' => 'bool',
        'isCountingDownward' => 'bool',
        'valueStyle' => 'int',
        'progressDescription' => 'string',
        'perks' => '\Bungie\Model\Destiny\Definitions\DestinyObjectivePerkEntryDefinition',
        'stats' => '\Bungie\Model\Destiny\Definitions\DestinyObjectiveStatEntryDefinition',
        'minimumVisibilityThreshold' => 'int',
        'allowOvercompletion' => 'bool',
        'showValueOnComplete' => 'bool',
        'completedValueStyle' => 'int',
        'inProgressValueStyle' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'displayProperties' => null,
        'completionValue' => 'int32',
        'scope' => 'int32',
        'locationHash' => 'uint32',
        'allowNegativeValue' => null,
        'allowValueChangeWhenCompleted' => null,
        'isCountingDownward' => null,
        'valueStyle' => 'int32',
        'progressDescription' => null,
        'perks' => null,
        'stats' => null,
        'minimumVisibilityThreshold' => 'int32',
        'allowOvercompletion' => null,
        'showValueOnComplete' => null,
        'completedValueStyle' => 'int32',
        'inProgressValueStyle' => 'int32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'completionValue' => 'completionValue',
        'scope' => 'scope',
        'locationHash' => 'locationHash',
        'allowNegativeValue' => 'allowNegativeValue',
        'allowValueChangeWhenCompleted' => 'allowValueChangeWhenCompleted',
        'isCountingDownward' => 'isCountingDownward',
        'valueStyle' => 'valueStyle',
        'progressDescription' => 'progressDescription',
        'perks' => 'perks',
        'stats' => 'stats',
        'minimumVisibilityThreshold' => 'minimumVisibilityThreshold',
        'allowOvercompletion' => 'allowOvercompletion',
        'showValueOnComplete' => 'showValueOnComplete',
        'completedValueStyle' => 'completedValueStyle',
        'inProgressValueStyle' => 'inProgressValueStyle',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'completionValue' => 'setCompletionValue',
        'scope' => 'setScope',
        'locationHash' => 'setLocationHash',
        'allowNegativeValue' => 'setAllowNegativeValue',
        'allowValueChangeWhenCompleted' => 'setAllowValueChangeWhenCompleted',
        'isCountingDownward' => 'setIsCountingDownward',
        'valueStyle' => 'setValueStyle',
        'progressDescription' => 'setProgressDescription',
        'perks' => 'setPerks',
        'stats' => 'setStats',
        'minimumVisibilityThreshold' => 'setMinimumVisibilityThreshold',
        'allowOvercompletion' => 'setAllowOvercompletion',
        'showValueOnComplete' => 'setShowValueOnComplete',
        'completedValueStyle' => 'setCompletedValueStyle',
        'inProgressValueStyle' => 'setInProgressValueStyle',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'completionValue' => 'getCompletionValue',
        'scope' => 'getScope',
        'locationHash' => 'getLocationHash',
        'allowNegativeValue' => 'getAllowNegativeValue',
        'allowValueChangeWhenCompleted' => 'getAllowValueChangeWhenCompleted',
        'isCountingDownward' => 'getIsCountingDownward',
        'valueStyle' => 'getValueStyle',
        'progressDescription' => 'getProgressDescription',
        'perks' => 'getPerks',
        'stats' => 'getStats',
        'minimumVisibilityThreshold' => 'getMinimumVisibilityThreshold',
        'allowOvercompletion' => 'getAllowOvercompletion',
        'showValueOnComplete' => 'getShowValueOnComplete',
        'completedValueStyle' => 'getCompletedValueStyle',
        'inProgressValueStyle' => 'getInProgressValueStyle',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['completionValue'] = isset($data['completionValue']) ? $data['completionValue'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['locationHash'] = isset($data['locationHash']) ? $data['locationHash'] : null;
        $this->container['allowNegativeValue'] = isset($data['allowNegativeValue']) ? $data['allowNegativeValue'] : null;
        $this->container['allowValueChangeWhenCompleted'] = isset($data['allowValueChangeWhenCompleted']) ? $data['allowValueChangeWhenCompleted'] : null;
        $this->container['isCountingDownward'] = isset($data['isCountingDownward']) ? $data['isCountingDownward'] : null;
        $this->container['valueStyle'] = isset($data['valueStyle']) ? $data['valueStyle'] : null;
        $this->container['progressDescription'] = isset($data['progressDescription']) ? $data['progressDescription'] : null;
        $this->container['perks'] = isset($data['perks']) ? $data['perks'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['minimumVisibilityThreshold'] = isset($data['minimumVisibilityThreshold']) ? $data['minimumVisibilityThreshold'] : null;
        $this->container['allowOvercompletion'] = isset($data['allowOvercompletion']) ? $data['allowOvercompletion'] : null;
        $this->container['showValueOnComplete'] = isset($data['showValueOnComplete']) ? $data['showValueOnComplete'] : null;
        $this->container['completedValueStyle'] = isset($data['completedValueStyle']) ? $data['completedValueStyle'] : null;
        $this->container['inProgressValueStyle'] = isset($data['inProgressValueStyle']) ? $data['inProgressValueStyle'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets displayProperties
     *
     * @return \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null $displayProperties Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets completionValue
     *
     * @return int|null
     */
    public function getCompletionValue()
    {
        return $this->container['completionValue'];
    }

    /**
     * Sets completionValue
     *
     * @param int|null $completionValue The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
     *
     * @return $this
     */
    public function setCompletionValue($completionValue)
    {
        $this->container['completionValue'] = $completionValue;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return int|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param int|null $scope A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets locationHash
     *
     * @return int|null
     */
    public function getLocationHash()
    {
        return $this->container['locationHash'];
    }

    /**
     * Sets locationHash
     *
     * @param int|null $locationHash OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
     *
     * @return $this
     */
    public function setLocationHash($locationHash)
    {
        $this->container['locationHash'] = $locationHash;

        return $this;
    }

    /**
     * Gets allowNegativeValue
     *
     * @return bool|null
     */
    public function getAllowNegativeValue()
    {
        return $this->container['allowNegativeValue'];
    }

    /**
     * Sets allowNegativeValue
     *
     * @param bool|null $allowNegativeValue If true, the value is allowed to go negative.
     *
     * @return $this
     */
    public function setAllowNegativeValue($allowNegativeValue)
    {
        $this->container['allowNegativeValue'] = $allowNegativeValue;

        return $this;
    }

    /**
     * Gets allowValueChangeWhenCompleted
     *
     * @return bool|null
     */
    public function getAllowValueChangeWhenCompleted()
    {
        return $this->container['allowValueChangeWhenCompleted'];
    }

    /**
     * Sets allowValueChangeWhenCompleted
     *
     * @param bool|null $allowValueChangeWhenCompleted If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.
     *
     * @return $this
     */
    public function setAllowValueChangeWhenCompleted($allowValueChangeWhenCompleted)
    {
        $this->container['allowValueChangeWhenCompleted'] = $allowValueChangeWhenCompleted;

        return $this;
    }

    /**
     * Gets isCountingDownward
     *
     * @return bool|null
     */
    public function getIsCountingDownward()
    {
        return $this->container['isCountingDownward'];
    }

    /**
     * Sets isCountingDownward
     *
     * @param bool|null $isCountingDownward If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.
     *
     * @return $this
     */
    public function setIsCountingDownward($isCountingDownward)
    {
        $this->container['isCountingDownward'] = $isCountingDownward;

        return $this;
    }

    /**
     * Gets valueStyle
     *
     * @return int|null
     */
    public function getValueStyle()
    {
        return $this->container['valueStyle'];
    }

    /**
     * Sets valueStyle
     *
     * @param int|null $valueStyle The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.
     *
     * @return $this
     */
    public function setValueStyle($valueStyle)
    {
        $this->container['valueStyle'] = $valueStyle;

        return $this;
    }

    /**
     * Gets progressDescription
     *
     * @return string|null
     */
    public function getProgressDescription()
    {
        return $this->container['progressDescription'];
    }

    /**
     * Sets progressDescription
     *
     * @param string|null $progressDescription Text to describe the progress bar.
     *
     * @return $this
     */
    public function setProgressDescription($progressDescription)
    {
        $this->container['progressDescription'] = $progressDescription;

        return $this;
    }

    /**
     * Gets perks
     *
     * @return \Bungie\Model\Destiny\Definitions\DestinyObjectivePerkEntryDefinition|null
     */
    public function getPerks()
    {
        return $this->container['perks'];
    }

    /**
     * Sets perks
     *
     * @param \Bungie\Model\Destiny\Definitions\DestinyObjectivePerkEntryDefinition|null $perks If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
     *
     * @return $this
     */
    public function setPerks($perks)
    {
        $this->container['perks'] = $perks;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Bungie\Model\Destiny\Definitions\DestinyObjectiveStatEntryDefinition|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Bungie\Model\Destiny\Definitions\DestinyObjectiveStatEntryDefinition|null $stats If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets minimumVisibilityThreshold
     *
     * @return int|null
     */
    public function getMinimumVisibilityThreshold()
    {
        return $this->container['minimumVisibilityThreshold'];
    }

    /**
     * Sets minimumVisibilityThreshold
     *
     * @param int|null $minimumVisibilityThreshold If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.
     *
     * @return $this
     */
    public function setMinimumVisibilityThreshold($minimumVisibilityThreshold)
    {
        $this->container['minimumVisibilityThreshold'] = $minimumVisibilityThreshold;

        return $this;
    }

    /**
     * Gets allowOvercompletion
     *
     * @return bool|null
     */
    public function getAllowOvercompletion()
    {
        return $this->container['allowOvercompletion'];
    }

    /**
     * Sets allowOvercompletion
     *
     * @param bool|null $allowOvercompletion If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
     *
     * @return $this
     */
    public function setAllowOvercompletion($allowOvercompletion)
    {
        $this->container['allowOvercompletion'] = $allowOvercompletion;

        return $this;
    }

    /**
     * Gets showValueOnComplete
     *
     * @return bool|null
     */
    public function getShowValueOnComplete()
    {
        return $this->container['showValueOnComplete'];
    }

    /**
     * Sets showValueOnComplete
     *
     * @param bool|null $showValueOnComplete If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
     *
     * @return $this
     */
    public function setShowValueOnComplete($showValueOnComplete)
    {
        $this->container['showValueOnComplete'] = $showValueOnComplete;

        return $this;
    }

    /**
     * Gets completedValueStyle
     *
     * @return int|null
     */
    public function getCompletedValueStyle()
    {
        return $this->container['completedValueStyle'];
    }

    /**
     * Sets completedValueStyle
     *
     * @param int|null $completedValueStyle The style to use when the objective is completed.
     *
     * @return $this
     */
    public function setCompletedValueStyle($completedValueStyle)
    {
        $this->container['completedValueStyle'] = $completedValueStyle;

        return $this;
    }

    /**
     * Gets inProgressValueStyle
     *
     * @return int|null
     */
    public function getInProgressValueStyle()
    {
        return $this->container['inProgressValueStyle'];
    }

    /**
     * Sets inProgressValueStyle
     *
     * @param int|null $inProgressValueStyle The style to use when the objective is still in progress.
     *
     * @return $this
     */
    public function setInProgressValueStyle($inProgressValueStyle)
    {
        $this->container['inProgressValueStyle'] = $inProgressValueStyle;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


