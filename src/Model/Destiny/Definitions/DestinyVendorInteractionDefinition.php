<?php
/**
 * DestinyVendorInteractionDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.6
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyVendorInteractionDefinition Class Doc Comment
 *
 * @category Class
 * @description A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyVendorInteractionDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyVendorInteractionDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interactionIndex' => 'int',
        'replies' => '\Bungie\Model\Destiny\Definitions\DestinyVendorInteractionReplyDefinition[]',
        'vendorCategoryIndex' => 'int',
        'questlineItemHash' => 'int',
        'sackInteractionList' => '\Bungie\Model\Destiny\Definitions\DestinyVendorInteractionSackEntryDefinition[]',
        'uiInteractionType' => 'int',
        'interactionType' => 'int',
        'rewardBlockLabel' => 'string',
        'rewardVendorCategoryIndex' => 'int',
        'flavorLineOne' => 'string',
        'flavorLineTwo' => 'string',
        'headerDisplayProperties' => '\Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition',
        'instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'interactionIndex' => 'int32',
        'replies' => null,
        'vendorCategoryIndex' => 'int32',
        'questlineItemHash' => 'uint32',
        'sackInteractionList' => null,
        'uiInteractionType' => 'uint32',
        'interactionType' => 'int32',
        'rewardBlockLabel' => null,
        'rewardVendorCategoryIndex' => 'int32',
        'flavorLineOne' => null,
        'flavorLineTwo' => null,
        'headerDisplayProperties' => null,
        'instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interactionIndex' => 'interactionIndex',
        'replies' => 'replies',
        'vendorCategoryIndex' => 'vendorCategoryIndex',
        'questlineItemHash' => 'questlineItemHash',
        'sackInteractionList' => 'sackInteractionList',
        'uiInteractionType' => 'uiInteractionType',
        'interactionType' => 'interactionType',
        'rewardBlockLabel' => 'rewardBlockLabel',
        'rewardVendorCategoryIndex' => 'rewardVendorCategoryIndex',
        'flavorLineOne' => 'flavorLineOne',
        'flavorLineTwo' => 'flavorLineTwo',
        'headerDisplayProperties' => 'headerDisplayProperties',
        'instructions' => 'instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interactionIndex' => 'setInteractionIndex',
        'replies' => 'setReplies',
        'vendorCategoryIndex' => 'setVendorCategoryIndex',
        'questlineItemHash' => 'setQuestlineItemHash',
        'sackInteractionList' => 'setSackInteractionList',
        'uiInteractionType' => 'setUiInteractionType',
        'interactionType' => 'setInteractionType',
        'rewardBlockLabel' => 'setRewardBlockLabel',
        'rewardVendorCategoryIndex' => 'setRewardVendorCategoryIndex',
        'flavorLineOne' => 'setFlavorLineOne',
        'flavorLineTwo' => 'setFlavorLineTwo',
        'headerDisplayProperties' => 'setHeaderDisplayProperties',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interactionIndex' => 'getInteractionIndex',
        'replies' => 'getReplies',
        'vendorCategoryIndex' => 'getVendorCategoryIndex',
        'questlineItemHash' => 'getQuestlineItemHash',
        'sackInteractionList' => 'getSackInteractionList',
        'uiInteractionType' => 'getUiInteractionType',
        'interactionType' => 'getInteractionType',
        'rewardBlockLabel' => 'getRewardBlockLabel',
        'rewardVendorCategoryIndex' => 'getRewardVendorCategoryIndex',
        'flavorLineOne' => 'getFlavorLineOne',
        'flavorLineTwo' => 'getFlavorLineTwo',
        'headerDisplayProperties' => 'getHeaderDisplayProperties',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interactionIndex'] = isset($data['interactionIndex']) ? $data['interactionIndex'] : null;
        $this->container['replies'] = isset($data['replies']) ? $data['replies'] : null;
        $this->container['vendorCategoryIndex'] = isset($data['vendorCategoryIndex']) ? $data['vendorCategoryIndex'] : null;
        $this->container['questlineItemHash'] = isset($data['questlineItemHash']) ? $data['questlineItemHash'] : null;
        $this->container['sackInteractionList'] = isset($data['sackInteractionList']) ? $data['sackInteractionList'] : null;
        $this->container['uiInteractionType'] = isset($data['uiInteractionType']) ? $data['uiInteractionType'] : null;
        $this->container['interactionType'] = isset($data['interactionType']) ? $data['interactionType'] : null;
        $this->container['rewardBlockLabel'] = isset($data['rewardBlockLabel']) ? $data['rewardBlockLabel'] : null;
        $this->container['rewardVendorCategoryIndex'] = isset($data['rewardVendorCategoryIndex']) ? $data['rewardVendorCategoryIndex'] : null;
        $this->container['flavorLineOne'] = isset($data['flavorLineOne']) ? $data['flavorLineOne'] : null;
        $this->container['flavorLineTwo'] = isset($data['flavorLineTwo']) ? $data['flavorLineTwo'] : null;
        $this->container['headerDisplayProperties'] = isset($data['headerDisplayProperties']) ? $data['headerDisplayProperties'] : null;
        $this->container['instructions'] = isset($data['instructions']) ? $data['instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interactionIndex
     *
     * @return int|null
     */
    public function getInteractionIndex()
    {
        return $this->container['interactionIndex'];
    }

    /**
     * Sets interactionIndex
     *
     * @param int|null $interactionIndex The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
     *
     * @return $this
     */
    public function setInteractionIndex($interactionIndex)
    {
        $this->container['interactionIndex'] = $interactionIndex;

        return $this;
    }

    /**
     * Gets replies
     *
     * @return \Bungie\Model\Destiny\Definitions\DestinyVendorInteractionReplyDefinition[]|null
     */
    public function getReplies()
    {
        return $this->container['replies'];
    }

    /**
     * Sets replies
     *
     * @param \Bungie\Model\Destiny\Definitions\DestinyVendorInteractionReplyDefinition[]|null $replies The potential replies that the user can make to the interaction.
     *
     * @return $this
     */
    public function setReplies($replies)
    {
        $this->container['replies'] = $replies;

        return $this;
    }

    /**
     * Gets vendorCategoryIndex
     *
     * @return int|null
     */
    public function getVendorCategoryIndex()
    {
        return $this->container['vendorCategoryIndex'];
    }

    /**
     * Sets vendorCategoryIndex
     *
     * @param int|null $vendorCategoryIndex If >= 0, this is the category of sale items to show along with this interaction dialog.
     *
     * @return $this
     */
    public function setVendorCategoryIndex($vendorCategoryIndex)
    {
        $this->container['vendorCategoryIndex'] = $vendorCategoryIndex;

        return $this;
    }

    /**
     * Gets questlineItemHash
     *
     * @return int|null
     */
    public function getQuestlineItemHash()
    {
        return $this->container['questlineItemHash'];
    }

    /**
     * Sets questlineItemHash
     *
     * @param int|null $questlineItemHash If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
     *
     * @return $this
     */
    public function setQuestlineItemHash($questlineItemHash)
    {
        $this->container['questlineItemHash'] = $questlineItemHash;

        return $this;
    }

    /**
     * Gets sackInteractionList
     *
     * @return \Bungie\Model\Destiny\Definitions\DestinyVendorInteractionSackEntryDefinition[]|null
     */
    public function getSackInteractionList()
    {
        return $this->container['sackInteractionList'];
    }

    /**
     * Sets sackInteractionList
     *
     * @param \Bungie\Model\Destiny\Definitions\DestinyVendorInteractionSackEntryDefinition[]|null $sackInteractionList If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
     *
     * @return $this
     */
    public function setSackInteractionList($sackInteractionList)
    {
        $this->container['sackInteractionList'] = $sackInteractionList;

        return $this;
    }

    /**
     * Gets uiInteractionType
     *
     * @return int|null
     */
    public function getUiInteractionType()
    {
        return $this->container['uiInteractionType'];
    }

    /**
     * Sets uiInteractionType
     *
     * @param int|null $uiInteractionType A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
     *
     * @return $this
     */
    public function setUiInteractionType($uiInteractionType)
    {
        $this->container['uiInteractionType'] = $uiInteractionType;

        return $this;
    }

    /**
     * Gets interactionType
     *
     * @return int|null
     */
    public function getInteractionType()
    {
        return $this->container['interactionType'];
    }

    /**
     * Sets interactionType
     *
     * @param int|null $interactionType The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
     *
     * @return $this
     */
    public function setInteractionType($interactionType)
    {
        $this->container['interactionType'] = $interactionType;

        return $this;
    }

    /**
     * Gets rewardBlockLabel
     *
     * @return string|null
     */
    public function getRewardBlockLabel()
    {
        return $this->container['rewardBlockLabel'];
    }

    /**
     * Sets rewardBlockLabel
     *
     * @param string|null $rewardBlockLabel If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
     *
     * @return $this
     */
    public function setRewardBlockLabel($rewardBlockLabel)
    {
        $this->container['rewardBlockLabel'] = $rewardBlockLabel;

        return $this;
    }

    /**
     * Gets rewardVendorCategoryIndex
     *
     * @return int|null
     */
    public function getRewardVendorCategoryIndex()
    {
        return $this->container['rewardVendorCategoryIndex'];
    }

    /**
     * Sets rewardVendorCategoryIndex
     *
     * @param int|null $rewardVendorCategoryIndex If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
     *
     * @return $this
     */
    public function setRewardVendorCategoryIndex($rewardVendorCategoryIndex)
    {
        $this->container['rewardVendorCategoryIndex'] = $rewardVendorCategoryIndex;

        return $this;
    }

    /**
     * Gets flavorLineOne
     *
     * @return string|null
     */
    public function getFlavorLineOne()
    {
        return $this->container['flavorLineOne'];
    }

    /**
     * Sets flavorLineOne
     *
     * @param string|null $flavorLineOne If the vendor interaction has flavor text, this is some of it.
     *
     * @return $this
     */
    public function setFlavorLineOne($flavorLineOne)
    {
        $this->container['flavorLineOne'] = $flavorLineOne;

        return $this;
    }

    /**
     * Gets flavorLineTwo
     *
     * @return string|null
     */
    public function getFlavorLineTwo()
    {
        return $this->container['flavorLineTwo'];
    }

    /**
     * Sets flavorLineTwo
     *
     * @param string|null $flavorLineTwo If the vendor interaction has flavor text, this is the rest of it.
     *
     * @return $this
     */
    public function setFlavorLineTwo($flavorLineTwo)
    {
        $this->container['flavorLineTwo'] = $flavorLineTwo;

        return $this;
    }

    /**
     * Gets headerDisplayProperties
     *
     * @return \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null
     */
    public function getHeaderDisplayProperties()
    {
        return $this->container['headerDisplayProperties'];
    }

    /**
     * Sets headerDisplayProperties
     *
     * @param \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null $headerDisplayProperties The header for the interaction dialog.
     *
     * @return $this
     */
    public function setHeaderDisplayProperties($headerDisplayProperties)
    {
        $this->container['headerDisplayProperties'] = $headerDisplayProperties;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions The localized text telling the player what to do when they see this dialog.
     *
     * @return $this
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


