<?php
/**
 * DestinyMilestoneDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.4
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Milestones;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyMilestoneDefinition Class Doc Comment
 *
 * @category Class
 * @description Milestones are an in-game concept where they&#39;re attempting to tell you what you can do next in-game.  If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.  Each Milestone represents something going on in the game right now:  - A \&quot;ritual activity\&quot; you can perform, like nightfall  - A \&quot;special event\&quot; that may have activities related to it, like Taco Tuesday (there&#39;s no Taco Tuesday in Destiny 2)  - A checklist you can fulfill, like helping your Clan complete all of its weekly objectives  - A tutorial quest you can play through, like the introduction to the Crucible.  Most of these milestones appear in game as well. Some of them are BNet only, because we&#39;re so extra. You&#39;re welcome.  There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn&#39;t have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you&#39;ll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it&#39;s talking about, like \&quot;Complete 5 Challenges\&quot;. 5 Challenges for what? What&#39;s a challenge? These are not questions that the Milestone data will answer for you unfortunately.  This isn&#39;t great, and in the future I&#39;d like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:  Start by looking at the currently active quest (ideally, you&#39;ve fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn&#39;t, fall back on the Milestone&#39;s description.  This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyMilestoneDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'displayProperties' => '\Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition',
        'image' => 'string',
        'milestoneType' => 'int',
        'recruitable' => 'bool',
        'friendlyName' => 'string',
        'showInExplorer' => 'bool',
        'showInMilestones' => 'bool',
        'explorePrioritizesActivityImage' => 'bool',
        'hasPredictableDates' => 'bool',
        'quests' => 'map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneQuestDefinition]',
        'rewards' => 'map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneRewardCategoryDefinition]',
        'vendorsDisplayTitle' => 'string',
        'vendors' => '\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneVendorDefinition[]',
        'values' => 'map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneValueDefinition]',
        'isInGameMilestone' => 'bool',
        'activities' => '\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityDefinition[]',
        'defaultOrder' => 'int',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'displayProperties' => null,
        'image' => null,
        'milestoneType' => 'int32',
        'recruitable' => null,
        'friendlyName' => null,
        'showInExplorer' => null,
        'showInMilestones' => null,
        'explorePrioritizesActivityImage' => null,
        'hasPredictableDates' => null,
        'quests' => null,
        'rewards' => null,
        'vendorsDisplayTitle' => null,
        'vendors' => null,
        'values' => null,
        'isInGameMilestone' => null,
        'activities' => null,
        'defaultOrder' => 'int32',
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'image' => 'image',
        'milestoneType' => 'milestoneType',
        'recruitable' => 'recruitable',
        'friendlyName' => 'friendlyName',
        'showInExplorer' => 'showInExplorer',
        'showInMilestones' => 'showInMilestones',
        'explorePrioritizesActivityImage' => 'explorePrioritizesActivityImage',
        'hasPredictableDates' => 'hasPredictableDates',
        'quests' => 'quests',
        'rewards' => 'rewards',
        'vendorsDisplayTitle' => 'vendorsDisplayTitle',
        'vendors' => 'vendors',
        'values' => 'values',
        'isInGameMilestone' => 'isInGameMilestone',
        'activities' => 'activities',
        'defaultOrder' => 'defaultOrder',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'image' => 'setImage',
        'milestoneType' => 'setMilestoneType',
        'recruitable' => 'setRecruitable',
        'friendlyName' => 'setFriendlyName',
        'showInExplorer' => 'setShowInExplorer',
        'showInMilestones' => 'setShowInMilestones',
        'explorePrioritizesActivityImage' => 'setExplorePrioritizesActivityImage',
        'hasPredictableDates' => 'setHasPredictableDates',
        'quests' => 'setQuests',
        'rewards' => 'setRewards',
        'vendorsDisplayTitle' => 'setVendorsDisplayTitle',
        'vendors' => 'setVendors',
        'values' => 'setValues',
        'isInGameMilestone' => 'setIsInGameMilestone',
        'activities' => 'setActivities',
        'defaultOrder' => 'setDefaultOrder',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'image' => 'getImage',
        'milestoneType' => 'getMilestoneType',
        'recruitable' => 'getRecruitable',
        'friendlyName' => 'getFriendlyName',
        'showInExplorer' => 'getShowInExplorer',
        'showInMilestones' => 'getShowInMilestones',
        'explorePrioritizesActivityImage' => 'getExplorePrioritizesActivityImage',
        'hasPredictableDates' => 'getHasPredictableDates',
        'quests' => 'getQuests',
        'rewards' => 'getRewards',
        'vendorsDisplayTitle' => 'getVendorsDisplayTitle',
        'vendors' => 'getVendors',
        'values' => 'getValues',
        'isInGameMilestone' => 'getIsInGameMilestone',
        'activities' => 'getActivities',
        'defaultOrder' => 'getDefaultOrder',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['milestoneType'] = isset($data['milestoneType']) ? $data['milestoneType'] : null;
        $this->container['recruitable'] = isset($data['recruitable']) ? $data['recruitable'] : null;
        $this->container['friendlyName'] = isset($data['friendlyName']) ? $data['friendlyName'] : null;
        $this->container['showInExplorer'] = isset($data['showInExplorer']) ? $data['showInExplorer'] : null;
        $this->container['showInMilestones'] = isset($data['showInMilestones']) ? $data['showInMilestones'] : null;
        $this->container['explorePrioritizesActivityImage'] = isset($data['explorePrioritizesActivityImage']) ? $data['explorePrioritizesActivityImage'] : null;
        $this->container['hasPredictableDates'] = isset($data['hasPredictableDates']) ? $data['hasPredictableDates'] : null;
        $this->container['quests'] = isset($data['quests']) ? $data['quests'] : null;
        $this->container['rewards'] = isset($data['rewards']) ? $data['rewards'] : null;
        $this->container['vendorsDisplayTitle'] = isset($data['vendorsDisplayTitle']) ? $data['vendorsDisplayTitle'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['isInGameMilestone'] = isset($data['isInGameMilestone']) ? $data['isInGameMilestone'] : null;
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
        $this->container['defaultOrder'] = isset($data['defaultOrder']) ? $data['defaultOrder'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets displayProperties
     *
     * @return \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param \Bungie\Model\Destiny\Definitions\Common\DestinyDisplayPropertiesDefinition|null $displayProperties displayProperties
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image A custom image someone made just for the milestone. Isn't that special?
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets milestoneType
     *
     * @return int|null
     */
    public function getMilestoneType()
    {
        return $this->container['milestoneType'];
    }

    /**
     * Sets milestoneType
     *
     * @param int|null $milestoneType An enumeration listing one of the possible types of milestones. Check out the DestinyMilestoneType enum for more info!
     *
     * @return $this
     */
    public function setMilestoneType($milestoneType)
    {
        $this->container['milestoneType'] = $milestoneType;

        return $this;
    }

    /**
     * Gets recruitable
     *
     * @return bool|null
     */
    public function getRecruitable()
    {
        return $this->container['recruitable'];
    }

    /**
     * Sets recruitable
     *
     * @param bool|null $recruitable If True, then the Milestone has been integrated with BNet's recruiting feature.
     *
     * @return $this
     */
    public function setRecruitable($recruitable)
    {
        $this->container['recruitable'] = $recruitable;

        return $this;
    }

    /**
     * Gets friendlyName
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendlyName'];
    }

    /**
     * Sets friendlyName
     *
     * @param string|null $friendlyName If the milestone has a friendly identifier for association with other features - such as Recruiting - that identifier can be found here. This is \"friendly\" in that it looks better in a URL than whatever the identifier for the Milestone actually is.
     *
     * @return $this
     */
    public function setFriendlyName($friendlyName)
    {
        $this->container['friendlyName'] = $friendlyName;

        return $this;
    }

    /**
     * Gets showInExplorer
     *
     * @return bool|null
     */
    public function getShowInExplorer()
    {
        return $this->container['showInExplorer'];
    }

    /**
     * Sets showInExplorer
     *
     * @param bool|null $showInExplorer If TRUE, this entry should be returned in the list of milestones for the \"Explore Destiny\" (i.e. new BNet homepage) features of Bungie.net (as long as the underlying event is active) Note that this is a property specifically used by BNet and the companion app for the \"Live Events\" feature of the front page/welcome view: it's not a reflection of what you see in-game.
     *
     * @return $this
     */
    public function setShowInExplorer($showInExplorer)
    {
        $this->container['showInExplorer'] = $showInExplorer;

        return $this;
    }

    /**
     * Gets showInMilestones
     *
     * @return bool|null
     */
    public function getShowInMilestones()
    {
        return $this->container['showInMilestones'];
    }

    /**
     * Sets showInMilestones
     *
     * @param bool|null $showInMilestones Determines whether we'll show this Milestone in the user's personal Milestones list.
     *
     * @return $this
     */
    public function setShowInMilestones($showInMilestones)
    {
        $this->container['showInMilestones'] = $showInMilestones;

        return $this;
    }

    /**
     * Gets explorePrioritizesActivityImage
     *
     * @return bool|null
     */
    public function getExplorePrioritizesActivityImage()
    {
        return $this->container['explorePrioritizesActivityImage'];
    }

    /**
     * Sets explorePrioritizesActivityImage
     *
     * @param bool|null $explorePrioritizesActivityImage If TRUE, \"Explore Destiny\" (the front page of BNet and the companion app) prioritize using the activity image over any overriding Quest or Milestone image provided. This unfortunate hack is brought to you by Trials of The Nine.
     *
     * @return $this
     */
    public function setExplorePrioritizesActivityImage($explorePrioritizesActivityImage)
    {
        $this->container['explorePrioritizesActivityImage'] = $explorePrioritizesActivityImage;

        return $this;
    }

    /**
     * Gets hasPredictableDates
     *
     * @return bool|null
     */
    public function getHasPredictableDates()
    {
        return $this->container['hasPredictableDates'];
    }

    /**
     * Sets hasPredictableDates
     *
     * @param bool|null $hasPredictableDates A shortcut for clients - and the server - to understand whether we can predict the start and end dates for this event. In practice, there are multiple ways that an event could have predictable date ranges, but not all events will be able to be predicted via any mechanism (for instance, events that are manually triggered on and off)
     *
     * @return $this
     */
    public function setHasPredictableDates($hasPredictableDates)
    {
        $this->container['hasPredictableDates'] = $hasPredictableDates;

        return $this;
    }

    /**
     * Gets quests
     *
     * @return map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneQuestDefinition]|null
     */
    public function getQuests()
    {
        return $this->container['quests'];
    }

    /**
     * Sets quests
     *
     * @param map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneQuestDefinition]|null $quests The full set of possible Quests that give the overview of the Milestone event/activity in question. Only one of these can be active at a time for a given Conceptual Milestone, but many of them may be \"available\" for the user to choose from. (for instance, with Milestones you can choose from the three available Quests, but only one can be active at a time) Keyed by the quest item.  As of Forsaken (~September 2018), Quest-style Milestones are being removed for many types of activities. There will likely be further revisions to the Milestone concept in the future.
     *
     * @return $this
     */
    public function setQuests($quests)
    {
        $this->container['quests'] = $quests;

        return $this;
    }

    /**
     * Gets rewards
     *
     * @return map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneRewardCategoryDefinition]|null
     */
    public function getRewards()
    {
        return $this->container['rewards'];
    }

    /**
     * Sets rewards
     *
     * @param map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneRewardCategoryDefinition]|null $rewards If this milestone can provide rewards, this will define the categories into which the individual reward entries are placed.  This is keyed by the Category's hash, which is only guaranteed to be unique within a given Milestone.
     *
     * @return $this
     */
    public function setRewards($rewards)
    {
        $this->container['rewards'] = $rewards;

        return $this;
    }

    /**
     * Gets vendorsDisplayTitle
     *
     * @return string|null
     */
    public function getVendorsDisplayTitle()
    {
        return $this->container['vendorsDisplayTitle'];
    }

    /**
     * Sets vendorsDisplayTitle
     *
     * @param string|null $vendorsDisplayTitle If you're going to show Vendors for the Milestone, you can use this as a localized \"header\" for the section where you show that vendor data. It'll provide a more context-relevant clue about what the vendor's role is in the Milestone.
     *
     * @return $this
     */
    public function setVendorsDisplayTitle($vendorsDisplayTitle)
    {
        $this->container['vendorsDisplayTitle'] = $vendorsDisplayTitle;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return \Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneVendorDefinition[]|null
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param \Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneVendorDefinition[]|null $vendors Sometimes, milestones will have rewards provided by Vendors. This definition gives the information needed to understand which vendors are relevant, the order in which they should be returned if order matters, and the conditions under which the Vendor is relevant to the user.
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }

    /**
     * Gets values
     *
     * @return map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneValueDefinition]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param map[string,\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneValueDefinition]|null $values Sometimes, milestones will have arbitrary values associated with them that are of interest to us or to third party developers. This is the collection of those values' definitions, keyed by the identifier of the value and providing useful definition information such as localizable names and descriptions for the value.
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets isInGameMilestone
     *
     * @return bool|null
     */
    public function getIsInGameMilestone()
    {
        return $this->container['isInGameMilestone'];
    }

    /**
     * Sets isInGameMilestone
     *
     * @param bool|null $isInGameMilestone Some milestones are explicit objectives that you can see and interact with in the game. Some milestones are more conceptual, built by BNet to help advise you on activities and events that happen in-game but that aren't explicitly shown in game as Milestones. If this is TRUE, you can see this as a milestone in the game. If this is FALSE, it's an event or activity you can participate in, but you won't see it as a Milestone in the game's UI.
     *
     * @return $this
     */
    public function setIsInGameMilestone($isInGameMilestone)
    {
        $this->container['isInGameMilestone'] = $isInGameMilestone;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityDefinition[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityDefinition[]|null $activities A Milestone can now be represented by one or more activities directly (without a backing Quest), and that activity can have many challenges, modifiers, and related to it.
     *
     * @return $this
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets defaultOrder
     *
     * @return int|null
     */
    public function getDefaultOrder()
    {
        return $this->container['defaultOrder'];
    }

    /**
     * Sets defaultOrder
     *
     * @param int|null $defaultOrder defaultOrder
     *
     * @return $this
     */
    public function setDefaultOrder($defaultOrder)
    {
        $this->container['defaultOrder'] = $defaultOrder;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int|null $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool|null
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool|null $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


