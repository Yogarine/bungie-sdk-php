<?php
/**
 * DestinyMilestoneChallengeActivityDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions\Milestones;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyMilestoneChallengeActivityDefinition Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyMilestoneChallengeActivityDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneChallengeActivityDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activityHash' => 'int',
        'challenges' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeDefinition[]',
        'activityGraphNodes' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityGraphNodeEntry[]',
        'phases' => '\Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityPhase[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'activityHash' => 'uint32',
        'challenges' => null,
        'activityGraphNodes' => null,
        'phases' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityHash' => 'activityHash',
        'challenges' => 'challenges',
        'activityGraphNodes' => 'activityGraphNodes',
        'phases' => 'phases'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityHash' => 'setActivityHash',
        'challenges' => 'setChallenges',
        'activityGraphNodes' => 'setActivityGraphNodes',
        'phases' => 'setPhases'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityHash' => 'getActivityHash',
        'challenges' => 'getChallenges',
        'activityGraphNodes' => 'getActivityGraphNodes',
        'phases' => 'getPhases'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityHash'] = isset($data['activityHash']) ? $data['activityHash'] : null;
        $this->container['challenges'] = isset($data['challenges']) ? $data['challenges'] : null;
        $this->container['activityGraphNodes'] = isset($data['activityGraphNodes']) ? $data['activityGraphNodes'] : null;
        $this->container['phases'] = isset($data['phases']) ? $data['phases'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityHash
     *
     * @return int|null
     */
    public function getActivityHash()
    {
        return $this->container['activityHash'];
    }

    /**
     * Sets activityHash
     *
     * @param int|null $activityHash The activity for which this challenge is active.
     *
     * @return $this
     */
    public function setActivityHash($activityHash)
    {
        $this->container['activityHash'] = $activityHash;

        return $this;
    }

    /**
     * Gets challenges
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeDefinition[]|null
     */
    public function getChallenges()
    {
        return $this->container['challenges'];
    }

    /**
     * Sets challenges
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeDefinition[]|null $challenges challenges
     *
     * @return $this
     */
    public function setChallenges($challenges)
    {
        $this->container['challenges'] = $challenges;

        return $this;
    }

    /**
     * Gets activityGraphNodes
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityGraphNodeEntry[]|null
     */
    public function getActivityGraphNodes()
    {
        return $this->container['activityGraphNodes'];
    }

    /**
     * Sets activityGraphNodes
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityGraphNodeEntry[]|null $activityGraphNodes If the activity and its challenge is visible on any of these nodes, it will be returned.
     *
     * @return $this
     */
    public function setActivityGraphNodes($activityGraphNodes)
    {
        $this->container['activityGraphNodes'] = $activityGraphNodes;

        return $this;
    }

    /**
     * Gets phases
     *
     * @return \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityPhase[]|null
     */
    public function getPhases()
    {
        return $this->container['phases'];
    }

    /**
     * Sets phases
     *
     * @param \Bungie\Model\\Bungie\Model\Destiny\Definitions\Milestones\DestinyMilestoneChallengeActivityPhase[]|null $phases Phases related to this activity, if there are any.  These will be listed in the order in which they will appear in the actual activity.
     *
     * @return $this
     */
    public function setPhases($phases)
    {
        $this->container['phases'] = $phases;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


