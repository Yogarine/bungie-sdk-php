<?php
/**
 * DestinyItemTalentGridBlockDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Definitions;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyItemTalentGridBlockDefinition Class Doc Comment
 *
 * @category Class
 * @description This defines information that can only come from a talent grid on an item. Items mostly have negligible talent grid data these days, but instanced items still retain grids as a source for some of this common information.  Builds/Subclasses are the only items left that still have talent grids with meaningful Nodes.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyItemTalentGridBlockDefinition implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.DestinyItemTalentGridBlockDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'talentGridHash' => 'int',
        'itemDetailString' => 'string',
        'buildName' => 'string',
        'hudDamageType' => '\Bungie\Model\Destiny\DamageType',
        'hudIcon' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'talentGridHash' => 'uint32',
        'itemDetailString' => null,
        'buildName' => null,
        'hudDamageType' => null,
        'hudIcon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'talentGridHash' => 'talentGridHash',
        'itemDetailString' => 'itemDetailString',
        'buildName' => 'buildName',
        'hudDamageType' => 'hudDamageType',
        'hudIcon' => 'hudIcon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'talentGridHash' => 'setTalentGridHash',
        'itemDetailString' => 'setItemDetailString',
        'buildName' => 'setBuildName',
        'hudDamageType' => 'setHudDamageType',
        'hudIcon' => 'setHudIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'talentGridHash' => 'getTalentGridHash',
        'itemDetailString' => 'getItemDetailString',
        'buildName' => 'getBuildName',
        'hudDamageType' => 'getHudDamageType',
        'hudIcon' => 'getHudIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['talentGridHash'] = isset($data['talentGridHash']) ? $data['talentGridHash'] : null;
        $this->container['itemDetailString'] = isset($data['itemDetailString']) ? $data['itemDetailString'] : null;
        $this->container['buildName'] = isset($data['buildName']) ? $data['buildName'] : null;
        $this->container['hudDamageType'] = isset($data['hudDamageType']) ? $data['hudDamageType'] : null;
        $this->container['hudIcon'] = isset($data['hudIcon']) ? $data['hudIcon'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets talentGridHash
     *
     * @return int|null
     */
    public function getTalentGridHash()
    {
        return $this->container['talentGridHash'];
    }

    /**
     * Sets talentGridHash
     *
     * @param int|null $talentGridHash The hash identifier of the DestinyTalentGridDefinition attached to this item.
     *
     * @return $this
     */
    public function setTalentGridHash($talentGridHash)
    {
        $this->container['talentGridHash'] = $talentGridHash;

        return $this;
    }

    /**
     * Gets itemDetailString
     *
     * @return string|null
     */
    public function getItemDetailString()
    {
        return $this->container['itemDetailString'];
    }

    /**
     * Sets itemDetailString
     *
     * @param string|null $itemDetailString This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for \"Details\". Great. Maybe it'll have more if talent grids ever get used for more than builds and subclasses again.
     *
     * @return $this
     */
    public function setItemDetailString($itemDetailString)
    {
        $this->container['itemDetailString'] = $itemDetailString;

        return $this;
    }

    /**
     * Gets buildName
     *
     * @return string|null
     */
    public function getBuildName()
    {
        return $this->container['buildName'];
    }

    /**
     * Sets buildName
     *
     * @param string|null $buildName A shortcut string identifier for the \"build\" in question, if this talent grid has an associated build. Doesn't map to anything we can expose at the moment.
     *
     * @return $this
     */
    public function setBuildName($buildName)
    {
        $this->container['buildName'] = $buildName;

        return $this;
    }

    /**
     * Gets hudDamageType
     *
     * @return \Bungie\Model\Destiny\DamageType|null
     */
    public function getHudDamageType()
    {
        return $this->container['hudDamageType'];
    }

    /**
     * Sets hudDamageType
     *
     * @param \Bungie\Model\Destiny\DamageType|null $hudDamageType If the talent grid implies a damage type, this is the enum value for that damage type.
     *
     * @return $this
     */
    public function setHudDamageType($hudDamageType)
    {
        $this->container['hudDamageType'] = $hudDamageType;

        return $this;
    }

    /**
     * Gets hudIcon
     *
     * @return string|null
     */
    public function getHudIcon()
    {
        return $this->container['hudIcon'];
    }

    /**
     * Sets hudIcon
     *
     * @param string|null $hudIcon If the talent grid has a special icon that's shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don't actually get that icon right now. I'll be looking to replace this with a path to the actual icon itself.
     *
     * @return $this
     */
    public function setHudIcon($hudIcon)
    {
        $this->container['hudIcon'] = $hudIcon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


