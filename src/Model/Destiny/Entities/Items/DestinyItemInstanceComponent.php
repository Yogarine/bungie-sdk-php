<?php
/**
 * DestinyItemInstanceComponent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Entities\Items;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyItemInstanceComponent Class Doc Comment
 *
 * @category Class
 * @description If an item is \&quot;instanced\&quot;, this will contain information about the item&#39;s instance that doesn&#39;t fit easily into other components. One might say this is the \&quot;essential\&quot; instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item&#39;s definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition&#39;s definition.inventory.isInstanceItem property.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyItemInstanceComponent implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Entities.Items.DestinyItemInstanceComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'damageType' => 'int',
        'damageTypeHash' => 'int',
        'primaryStat' => '\Bungie\Model\Destiny\DestinyStat',
        'itemLevel' => 'int',
        'quality' => 'int',
        'isEquipped' => 'bool',
        'canEquip' => 'bool',
        'equipRequiredLevel' => 'int',
        'unlockHashesRequiredToEquip' => 'int[]',
        'cannotEquipReason' => 'int',
        'breakerType' => 'int',
        'breakerTypeHash' => 'int',
        'energy' => '\Bungie\Model\Destiny\Entities\Items\DestinyItemInstanceEnergy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'damageType' => 'int32',
        'damageTypeHash' => 'uint32',
        'primaryStat' => null,
        'itemLevel' => 'int32',
        'quality' => 'int32',
        'isEquipped' => null,
        'canEquip' => null,
        'equipRequiredLevel' => 'int32',
        'unlockHashesRequiredToEquip' => 'uint32',
        'cannotEquipReason' => 'int32',
        'breakerType' => 'int32',
        'breakerTypeHash' => 'uint32',
        'energy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'damageType' => 'damageType',
        'damageTypeHash' => 'damageTypeHash',
        'primaryStat' => 'primaryStat',
        'itemLevel' => 'itemLevel',
        'quality' => 'quality',
        'isEquipped' => 'isEquipped',
        'canEquip' => 'canEquip',
        'equipRequiredLevel' => 'equipRequiredLevel',
        'unlockHashesRequiredToEquip' => 'unlockHashesRequiredToEquip',
        'cannotEquipReason' => 'cannotEquipReason',
        'breakerType' => 'breakerType',
        'breakerTypeHash' => 'breakerTypeHash',
        'energy' => 'energy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'damageType' => 'setDamageType',
        'damageTypeHash' => 'setDamageTypeHash',
        'primaryStat' => 'setPrimaryStat',
        'itemLevel' => 'setItemLevel',
        'quality' => 'setQuality',
        'isEquipped' => 'setIsEquipped',
        'canEquip' => 'setCanEquip',
        'equipRequiredLevel' => 'setEquipRequiredLevel',
        'unlockHashesRequiredToEquip' => 'setUnlockHashesRequiredToEquip',
        'cannotEquipReason' => 'setCannotEquipReason',
        'breakerType' => 'setBreakerType',
        'breakerTypeHash' => 'setBreakerTypeHash',
        'energy' => 'setEnergy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'damageType' => 'getDamageType',
        'damageTypeHash' => 'getDamageTypeHash',
        'primaryStat' => 'getPrimaryStat',
        'itemLevel' => 'getItemLevel',
        'quality' => 'getQuality',
        'isEquipped' => 'getIsEquipped',
        'canEquip' => 'getCanEquip',
        'equipRequiredLevel' => 'getEquipRequiredLevel',
        'unlockHashesRequiredToEquip' => 'getUnlockHashesRequiredToEquip',
        'cannotEquipReason' => 'getCannotEquipReason',
        'breakerType' => 'getBreakerType',
        'breakerTypeHash' => 'getBreakerTypeHash',
        'energy' => 'getEnergy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BREAKER_TYPE_NONE = 0;
    const BREAKER_TYPE_SHIELDPIERCING = 1;
    const BREAKER_TYPE_DISRUPTION = 2;
    const BREAKER_TYPE_STAGGER = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBreakerTypeAllowableValues()
    {
        return [
            self::BREAKER_TYPE_NONE,
            self::BREAKER_TYPE_SHIELDPIERCING,
            self::BREAKER_TYPE_DISRUPTION,
            self::BREAKER_TYPE_STAGGER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['damageType'] = isset($data['damageType']) ? $data['damageType'] : null;
        $this->container['damageTypeHash'] = isset($data['damageTypeHash']) ? $data['damageTypeHash'] : null;
        $this->container['primaryStat'] = isset($data['primaryStat']) ? $data['primaryStat'] : null;
        $this->container['itemLevel'] = isset($data['itemLevel']) ? $data['itemLevel'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['isEquipped'] = isset($data['isEquipped']) ? $data['isEquipped'] : null;
        $this->container['canEquip'] = isset($data['canEquip']) ? $data['canEquip'] : null;
        $this->container['equipRequiredLevel'] = isset($data['equipRequiredLevel']) ? $data['equipRequiredLevel'] : null;
        $this->container['unlockHashesRequiredToEquip'] = isset($data['unlockHashesRequiredToEquip']) ? $data['unlockHashesRequiredToEquip'] : null;
        $this->container['cannotEquipReason'] = isset($data['cannotEquipReason']) ? $data['cannotEquipReason'] : null;
        $this->container['breakerType'] = isset($data['breakerType']) ? $data['breakerType'] : null;
        $this->container['breakerTypeHash'] = isset($data['breakerTypeHash']) ? $data['breakerTypeHash'] : null;
        $this->container['energy'] = isset($data['energy']) ? $data['energy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBreakerTypeAllowableValues();
        if (!is_null($this->container['breakerType']) && !in_array($this->container['breakerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'breakerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets damageType
     *
     * @return int|null
     */
    public function getDamageType()
    {
        return $this->container['damageType'];
    }

    /**
     * Sets damageType
     *
     * @param int|null $damageType If the item has a damage type, this is the item's current damage type.
     *
     * @return $this
     */
    public function setDamageType($damageType)
    {
        $this->container['damageType'] = $damageType;

        return $this;
    }

    /**
     * Gets damageTypeHash
     *
     * @return int|null
     */
    public function getDamageTypeHash()
    {
        return $this->container['damageTypeHash'];
    }

    /**
     * Sets damageTypeHash
     *
     * @param int|null $damageTypeHash The current damage type's hash, so you can look up localized info and icons for it.
     *
     * @return $this
     */
    public function setDamageTypeHash($damageTypeHash)
    {
        $this->container['damageTypeHash'] = $damageTypeHash;

        return $this;
    }

    /**
     * Gets primaryStat
     *
     * @return \Bungie\Model\Destiny\DestinyStat|null
     */
    public function getPrimaryStat()
    {
        return $this->container['primaryStat'];
    }

    /**
     * Sets primaryStat
     *
     * @param \Bungie\Model\Destiny\DestinyStat|null $primaryStat The item stat that we consider to be \"primary\" for the item. For instance, this would be \"Attack\" for Weapons or \"Defense\" for armor.
     *
     * @return $this
     */
    public function setPrimaryStat($primaryStat)
    {
        $this->container['primaryStat'] = $primaryStat;

        return $this;
    }

    /**
     * Gets itemLevel
     *
     * @return int|null
     */
    public function getItemLevel()
    {
        return $this->container['itemLevel'];
    }

    /**
     * Sets itemLevel
     *
     * @param int|null $itemLevel The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.
     *
     * @return $this
     */
    public function setItemLevel($itemLevel)
    {
        $this->container['itemLevel'] = $itemLevel;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return int|null
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param int|null $quality The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets isEquipped
     *
     * @return bool|null
     */
    public function getIsEquipped()
    {
        return $this->container['isEquipped'];
    }

    /**
     * Sets isEquipped
     *
     * @param bool|null $isEquipped Is the item currently equipped on the given character?
     *
     * @return $this
     */
    public function setIsEquipped($isEquipped)
    {
        $this->container['isEquipped'] = $isEquipped;

        return $this;
    }

    /**
     * Gets canEquip
     *
     * @return bool|null
     */
    public function getCanEquip()
    {
        return $this->container['canEquip'];
    }

    /**
     * Sets canEquip
     *
     * @param bool|null $canEquip If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
     *
     * @return $this
     */
    public function setCanEquip($canEquip)
    {
        $this->container['canEquip'] = $canEquip;

        return $this;
    }

    /**
     * Gets equipRequiredLevel
     *
     * @return int|null
     */
    public function getEquipRequiredLevel()
    {
        return $this->container['equipRequiredLevel'];
    }

    /**
     * Sets equipRequiredLevel
     *
     * @param int|null $equipRequiredLevel If the item cannot be equipped until you reach a certain level, that level will be reflected here.
     *
     * @return $this
     */
    public function setEquipRequiredLevel($equipRequiredLevel)
    {
        $this->container['equipRequiredLevel'] = $equipRequiredLevel;

        return $this;
    }

    /**
     * Gets unlockHashesRequiredToEquip
     *
     * @return int[]|null
     */
    public function getUnlockHashesRequiredToEquip()
    {
        return $this->container['unlockHashesRequiredToEquip'];
    }

    /**
     * Sets unlockHashesRequiredToEquip
     *
     * @param int[]|null $unlockHashesRequiredToEquip Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
     *
     * @return $this
     */
    public function setUnlockHashesRequiredToEquip($unlockHashesRequiredToEquip)
    {
        $this->container['unlockHashesRequiredToEquip'] = $unlockHashesRequiredToEquip;

        return $this;
    }

    /**
     * Gets cannotEquipReason
     *
     * @return int|null
     */
    public function getCannotEquipReason()
    {
        return $this->container['cannotEquipReason'];
    }

    /**
     * Sets cannotEquipReason
     *
     * @param int|null $cannotEquipReason If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
     *
     * @return $this
     */
    public function setCannotEquipReason($cannotEquipReason)
    {
        $this->container['cannotEquipReason'] = $cannotEquipReason;

        return $this;
    }

    /**
     * Gets breakerType
     *
     * @return int|null
     */
    public function getBreakerType()
    {
        return $this->container['breakerType'];
    }

    /**
     * Sets breakerType
     *
     * @param int|null $breakerType If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
     *
     * @return $this
     */
    public function setBreakerType($breakerType)
    {
        $allowedValues = $this->getBreakerTypeAllowableValues();
        if (!is_null($breakerType) && !in_array($breakerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'breakerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['breakerType'] = $breakerType;

        return $this;
    }

    /**
     * Gets breakerTypeHash
     *
     * @return int|null
     */
    public function getBreakerTypeHash()
    {
        return $this->container['breakerTypeHash'];
    }

    /**
     * Sets breakerTypeHash
     *
     * @param int|null $breakerTypeHash If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.
     *
     * @return $this
     */
    public function setBreakerTypeHash($breakerTypeHash)
    {
        $this->container['breakerTypeHash'] = $breakerTypeHash;

        return $this;
    }

    /**
     * Gets energy
     *
     * @return \Bungie\Model\Destiny\Entities\Items\DestinyItemInstanceEnergy|null
     */
    public function getEnergy()
    {
        return $this->container['energy'];
    }

    /**
     * Sets energy
     *
     * @param \Bungie\Model\Destiny\Entities\Items\DestinyItemInstanceEnergy|null $energy IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.
     *
     * @return $this
     */
    public function setEnergy($energy)
    {
        $this->container['energy'] = $energy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


