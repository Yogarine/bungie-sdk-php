<?php
/**
 * DestinyPostGameCarnageReportData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.6
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\HistoricalStats;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyPostGameCarnageReportData Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyPostGameCarnageReportData implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.HistoricalStats.DestinyPostGameCarnageReportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'period' => '\DateTime',
        'startingPhaseIndex' => 'int',
        'activityDetails' => '\Bungie\Model\Destiny\HistoricalStats\DestinyHistoricalStatsActivity',
        'entries' => '\Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportEntry[]',
        'teams' => '\Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportTeamEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'period' => 'date-time',
        'startingPhaseIndex' => 'int32',
        'activityDetails' => null,
        'entries' => null,
        'teams' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period' => 'period',
        'startingPhaseIndex' => 'startingPhaseIndex',
        'activityDetails' => 'activityDetails',
        'entries' => 'entries',
        'teams' => 'teams'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period' => 'setPeriod',
        'startingPhaseIndex' => 'setStartingPhaseIndex',
        'activityDetails' => 'setActivityDetails',
        'entries' => 'setEntries',
        'teams' => 'setTeams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period' => 'getPeriod',
        'startingPhaseIndex' => 'getStartingPhaseIndex',
        'activityDetails' => 'getActivityDetails',
        'entries' => 'getEntries',
        'teams' => 'getTeams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['startingPhaseIndex'] = isset($data['startingPhaseIndex']) ? $data['startingPhaseIndex'] : null;
        $this->container['activityDetails'] = isset($data['activityDetails']) ? $data['activityDetails'] : null;
        $this->container['entries'] = isset($data['entries']) ? $data['entries'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets period
     *
     * @return \DateTime|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \DateTime|null $period Date and time for the activity.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets startingPhaseIndex
     *
     * @return int|null
     */
    public function getStartingPhaseIndex()
    {
        return $this->container['startingPhaseIndex'];
    }

    /**
     * Sets startingPhaseIndex
     *
     * @param int|null $startingPhaseIndex If this activity has \"phases\", this is the phase at which the activity was started.
     *
     * @return $this
     */
    public function setStartingPhaseIndex($startingPhaseIndex)
    {
        $this->container['startingPhaseIndex'] = $startingPhaseIndex;

        return $this;
    }

    /**
     * Gets activityDetails
     *
     * @return \Bungie\Model\Destiny\HistoricalStats\DestinyHistoricalStatsActivity|null
     */
    public function getActivityDetails()
    {
        return $this->container['activityDetails'];
    }

    /**
     * Sets activityDetails
     *
     * @param \Bungie\Model\Destiny\HistoricalStats\DestinyHistoricalStatsActivity|null $activityDetails Details about the activity.
     *
     * @return $this
     */
    public function setActivityDetails($activityDetails)
    {
        $this->container['activityDetails'] = $activityDetails;

        return $this;
    }

    /**
     * Gets entries
     *
     * @return \Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportEntry[]|null
     */
    public function getEntries()
    {
        return $this->container['entries'];
    }

    /**
     * Sets entries
     *
     * @param \Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportEntry[]|null $entries Collection of players and their data for this activity.
     *
     * @return $this
     */
    public function setEntries($entries)
    {
        $this->container['entries'] = $entries;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportTeamEntry[]|null
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Bungie\Model\Destiny\HistoricalStats\DestinyPostGameCarnageReportTeamEntry[]|null $teams Collection of stats for the player in this activity.
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


