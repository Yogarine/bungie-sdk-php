<?php
/**
 * DestinyProfileUserInfoCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Destiny\Responses;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyProfileUserInfoCard Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyProfileUserInfoCard implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Responses.DestinyProfileUserInfoCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateLastPlayed' => '\DateTime',
        'isOverridden' => 'bool',
        'isCrossSavePrimary' => 'bool',
        'platformSilver' => '\Bungie\Model\Destiny\Components\Inventory\DestinyPlatformSilverComponent',
        'unpairedGameVersions' => 'int',
        'supplementalDisplayName' => 'string',
        'iconPath' => 'string',
        'crossSaveOverride' => 'int',
        'applicableMembershipTypes' => 'int[]',
        'isPublic' => 'bool',
        'membershipType' => 'int',
        'membershipId' => 'int',
        'displayName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'dateLastPlayed' => 'date-time',
        'isOverridden' => null,
        'isCrossSavePrimary' => null,
        'platformSilver' => null,
        'unpairedGameVersions' => 'int32',
        'supplementalDisplayName' => null,
        'iconPath' => null,
        'crossSaveOverride' => 'int32',
        'applicableMembershipTypes' => 'int32',
        'isPublic' => null,
        'membershipType' => 'int32',
        'membershipId' => 'int64',
        'displayName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateLastPlayed' => 'dateLastPlayed',
        'isOverridden' => 'isOverridden',
        'isCrossSavePrimary' => 'isCrossSavePrimary',
        'platformSilver' => 'platformSilver',
        'unpairedGameVersions' => 'unpairedGameVersions',
        'supplementalDisplayName' => 'supplementalDisplayName',
        'iconPath' => 'iconPath',
        'crossSaveOverride' => 'crossSaveOverride',
        'applicableMembershipTypes' => 'applicableMembershipTypes',
        'isPublic' => 'isPublic',
        'membershipType' => 'membershipType',
        'membershipId' => 'membershipId',
        'displayName' => 'displayName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateLastPlayed' => 'setDateLastPlayed',
        'isOverridden' => 'setIsOverridden',
        'isCrossSavePrimary' => 'setIsCrossSavePrimary',
        'platformSilver' => 'setPlatformSilver',
        'unpairedGameVersions' => 'setUnpairedGameVersions',
        'supplementalDisplayName' => 'setSupplementalDisplayName',
        'iconPath' => 'setIconPath',
        'crossSaveOverride' => 'setCrossSaveOverride',
        'applicableMembershipTypes' => 'setApplicableMembershipTypes',
        'isPublic' => 'setIsPublic',
        'membershipType' => 'setMembershipType',
        'membershipId' => 'setMembershipId',
        'displayName' => 'setDisplayName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateLastPlayed' => 'getDateLastPlayed',
        'isOverridden' => 'getIsOverridden',
        'isCrossSavePrimary' => 'getIsCrossSavePrimary',
        'platformSilver' => 'getPlatformSilver',
        'unpairedGameVersions' => 'getUnpairedGameVersions',
        'supplementalDisplayName' => 'getSupplementalDisplayName',
        'iconPath' => 'getIconPath',
        'crossSaveOverride' => 'getCrossSaveOverride',
        'applicableMembershipTypes' => 'getApplicableMembershipTypes',
        'isPublic' => 'getIsPublic',
        'membershipType' => 'getMembershipType',
        'membershipId' => 'getMembershipId',
        'displayName' => 'getDisplayName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const UNPAIRED_GAME_VERSIONS_NONE = 0;
    const UNPAIRED_GAME_VERSIONS_DESTINY2 = 1;
    const UNPAIRED_GAME_VERSIONS_DLC1 = 2;
    const UNPAIRED_GAME_VERSIONS_DLC2 = 4;
    const UNPAIRED_GAME_VERSIONS_FORSAKEN = 8;
    const UNPAIRED_GAME_VERSIONS_YEARTWOANNUALPASS = 16;
    const UNPAIRED_GAME_VERSIONS_SHADOWKEEP = 32;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnpairedGameVersionsAllowableValues()
    {
        return [
            self::UNPAIRED_GAME_VERSIONS_NONE,
            self::UNPAIRED_GAME_VERSIONS_DESTINY2,
            self::UNPAIRED_GAME_VERSIONS_DLC1,
            self::UNPAIRED_GAME_VERSIONS_DLC2,
            self::UNPAIRED_GAME_VERSIONS_FORSAKEN,
            self::UNPAIRED_GAME_VERSIONS_YEARTWOANNUALPASS,
            self::UNPAIRED_GAME_VERSIONS_SHADOWKEEP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateLastPlayed'] = isset($data['dateLastPlayed']) ? $data['dateLastPlayed'] : null;
        $this->container['isOverridden'] = isset($data['isOverridden']) ? $data['isOverridden'] : null;
        $this->container['isCrossSavePrimary'] = isset($data['isCrossSavePrimary']) ? $data['isCrossSavePrimary'] : null;
        $this->container['platformSilver'] = isset($data['platformSilver']) ? $data['platformSilver'] : null;
        $this->container['unpairedGameVersions'] = isset($data['unpairedGameVersions']) ? $data['unpairedGameVersions'] : null;
        $this->container['supplementalDisplayName'] = isset($data['supplementalDisplayName']) ? $data['supplementalDisplayName'] : null;
        $this->container['iconPath'] = isset($data['iconPath']) ? $data['iconPath'] : null;
        $this->container['crossSaveOverride'] = isset($data['crossSaveOverride']) ? $data['crossSaveOverride'] : null;
        $this->container['applicableMembershipTypes'] = isset($data['applicableMembershipTypes']) ? $data['applicableMembershipTypes'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['membershipType'] = isset($data['membershipType']) ? $data['membershipType'] : null;
        $this->container['membershipId'] = isset($data['membershipId']) ? $data['membershipId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnpairedGameVersionsAllowableValues();
        if (!is_null($this->container['unpairedGameVersions']) && !in_array($this->container['unpairedGameVersions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'unpairedGameVersions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateLastPlayed
     *
     * @return \DateTime|null
     */
    public function getDateLastPlayed()
    {
        return $this->container['dateLastPlayed'];
    }

    /**
     * Sets dateLastPlayed
     *
     * @param \DateTime|null $dateLastPlayed dateLastPlayed
     *
     * @return $this
     */
    public function setDateLastPlayed($dateLastPlayed)
    {
        $this->container['dateLastPlayed'] = $dateLastPlayed;

        return $this;
    }

    /**
     * Gets isOverridden
     *
     * @return bool|null
     */
    public function getIsOverridden()
    {
        return $this->container['isOverridden'];
    }

    /**
     * Sets isOverridden
     *
     * @param bool|null $isOverridden If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.
     *
     * @return $this
     */
    public function setIsOverridden($isOverridden)
    {
        $this->container['isOverridden'] = $isOverridden;

        return $this;
    }

    /**
     * Gets isCrossSavePrimary
     *
     * @return bool|null
     */
    public function getIsCrossSavePrimary()
    {
        return $this->container['isCrossSavePrimary'];
    }

    /**
     * Sets isCrossSavePrimary
     *
     * @param bool|null $isCrossSavePrimary If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.
     *
     * @return $this
     */
    public function setIsCrossSavePrimary($isCrossSavePrimary)
    {
        $this->container['isCrossSavePrimary'] = $isCrossSavePrimary;

        return $this;
    }

    /**
     * Gets platformSilver
     *
     * @return \Bungie\Model\Destiny\Components\Inventory\DestinyPlatformSilverComponent|null
     */
    public function getPlatformSilver()
    {
        return $this->container['platformSilver'];
    }

    /**
     * Sets platformSilver
     *
     * @param \Bungie\Model\Destiny\Components\Inventory\DestinyPlatformSilverComponent|null $platformSilver This is the silver available on this Profile across any platforms on which they have purchased silver.   This is only available if you are requesting yourself.
     *
     * @return $this
     */
    public function setPlatformSilver($platformSilver)
    {
        $this->container['platformSilver'] = $platformSilver;

        return $this;
    }

    /**
     * Gets unpairedGameVersions
     *
     * @return int|null
     */
    public function getUnpairedGameVersions()
    {
        return $this->container['unpairedGameVersions'];
    }

    /**
     * Sets unpairedGameVersions
     *
     * @param int|null $unpairedGameVersions If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
     *
     * @return $this
     */
    public function setUnpairedGameVersions($unpairedGameVersions)
    {
        $allowedValues = $this->getUnpairedGameVersionsAllowableValues();
        if (!is_null($unpairedGameVersions) && !in_array($unpairedGameVersions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'unpairedGameVersions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unpairedGameVersions'] = $unpairedGameVersions;

        return $this;
    }

    /**
     * Gets supplementalDisplayName
     *
     * @return string|null
     */
    public function getSupplementalDisplayName()
    {
        return $this->container['supplementalDisplayName'];
    }

    /**
     * Sets supplementalDisplayName
     *
     * @param string|null $supplementalDisplayName A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
     *
     * @return $this
     */
    public function setSupplementalDisplayName($supplementalDisplayName)
    {
        $this->container['supplementalDisplayName'] = $supplementalDisplayName;

        return $this;
    }

    /**
     * Gets iconPath
     *
     * @return string|null
     */
    public function getIconPath()
    {
        return $this->container['iconPath'];
    }

    /**
     * Sets iconPath
     *
     * @param string|null $iconPath URL the Icon if available.
     *
     * @return $this
     */
    public function setIconPath($iconPath)
    {
        $this->container['iconPath'] = $iconPath;

        return $this;
    }

    /**
     * Gets crossSaveOverride
     *
     * @return int|null
     */
    public function getCrossSaveOverride()
    {
        return $this->container['crossSaveOverride'];
    }

    /**
     * Sets crossSaveOverride
     *
     * @param int|null $crossSaveOverride If there is a cross save override in effect, this value will tell you the type that is overridding this one.
     *
     * @return $this
     */
    public function setCrossSaveOverride($crossSaveOverride)
    {
        $this->container['crossSaveOverride'] = $crossSaveOverride;

        return $this;
    }

    /**
     * Gets applicableMembershipTypes
     *
     * @return int[]|null
     */
    public function getApplicableMembershipTypes()
    {
        return $this->container['applicableMembershipTypes'];
    }

    /**
     * Sets applicableMembershipTypes
     *
     * @param int[]|null $applicableMembershipTypes The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
     *
     * @return $this
     */
    public function setApplicableMembershipTypes($applicableMembershipTypes)
    {
        $this->container['applicableMembershipTypes'] = $applicableMembershipTypes;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool|null $isPublic If True, this is a public user membership.
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets membershipType
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membershipType'];
    }

    /**
     * Sets membershipType
     *
     * @param int|null $membershipType Type of the membership. Not necessarily the native type.
     *
     * @return $this
     */
    public function setMembershipType($membershipType)
    {
        $this->container['membershipType'] = $membershipType;

        return $this;
    }

    /**
     * Gets membershipId
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membershipId'];
    }

    /**
     * Sets membershipId
     *
     * @param int|null $membershipId Membership ID as they user is known in the Accounts service
     *
     * @return $this
     */
    public function setMembershipId($membershipId)
    {
        $this->container['membershipId'] = $membershipId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


