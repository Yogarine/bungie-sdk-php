<?php
/**
 * Destiny2CoreSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.17.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Common\Models;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * Destiny2CoreSettings Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Destiny2CoreSettings implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Common.Models.Destiny2CoreSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'collectionRootNode' => 'int',
        'badgesRootNode' => 'int',
        'recordsRootNode' => 'int',
        'medalsRootNode' => 'int',
        'metricsRootNode' => 'int',
        'activeTriumphsRootNodeHash' => 'int',
        'activeSealsRootNodeHash' => 'int',
        'legacyTriumphsRootNodeHash' => 'int',
        'legacySealsRootNodeHash' => 'int',
        'medalsRootNodeHash' => 'int',
        'exoticCatalystsRootNodeHash' => 'int',
        'loreRootNodeHash' => 'int',
        'craftingRootNodeHash' => 'int',
        'currentRankProgressionHashes' => 'int[]',
        'insertPlugFreeProtectedPlugItemHashes' => 'int[]',
        'insertPlugFreeBlockedSocketTypeHashes' => 'int[]',
        'undiscoveredCollectibleImage' => 'string',
        'ammoTypeHeavyIcon' => 'string',
        'ammoTypeSpecialIcon' => 'string',
        'ammoTypePrimaryIcon' => 'string',
        'currentSeasonalArtifactHash' => 'int',
        'currentSeasonHash' => 'int',
        'seasonalChallengesPresentationNodeHash' => 'int',
        'futureSeasonHashes' => 'int[]',
        'pastSeasonHashes' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'collectionRootNode' => 'uint32',
        'badgesRootNode' => 'uint32',
        'recordsRootNode' => 'uint32',
        'medalsRootNode' => 'uint32',
        'metricsRootNode' => 'uint32',
        'activeTriumphsRootNodeHash' => 'uint32',
        'activeSealsRootNodeHash' => 'uint32',
        'legacyTriumphsRootNodeHash' => 'uint32',
        'legacySealsRootNodeHash' => 'uint32',
        'medalsRootNodeHash' => 'uint32',
        'exoticCatalystsRootNodeHash' => 'uint32',
        'loreRootNodeHash' => 'uint32',
        'craftingRootNodeHash' => 'uint32',
        'currentRankProgressionHashes' => 'uint32',
        'insertPlugFreeProtectedPlugItemHashes' => 'uint32',
        'insertPlugFreeBlockedSocketTypeHashes' => 'uint32',
        'undiscoveredCollectibleImage' => null,
        'ammoTypeHeavyIcon' => null,
        'ammoTypeSpecialIcon' => null,
        'ammoTypePrimaryIcon' => null,
        'currentSeasonalArtifactHash' => 'uint32',
        'currentSeasonHash' => 'uint32',
        'seasonalChallengesPresentationNodeHash' => 'uint32',
        'futureSeasonHashes' => 'uint32',
        'pastSeasonHashes' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collectionRootNode' => 'collectionRootNode',
        'badgesRootNode' => 'badgesRootNode',
        'recordsRootNode' => 'recordsRootNode',
        'medalsRootNode' => 'medalsRootNode',
        'metricsRootNode' => 'metricsRootNode',
        'activeTriumphsRootNodeHash' => 'activeTriumphsRootNodeHash',
        'activeSealsRootNodeHash' => 'activeSealsRootNodeHash',
        'legacyTriumphsRootNodeHash' => 'legacyTriumphsRootNodeHash',
        'legacySealsRootNodeHash' => 'legacySealsRootNodeHash',
        'medalsRootNodeHash' => 'medalsRootNodeHash',
        'exoticCatalystsRootNodeHash' => 'exoticCatalystsRootNodeHash',
        'loreRootNodeHash' => 'loreRootNodeHash',
        'craftingRootNodeHash' => 'craftingRootNodeHash',
        'currentRankProgressionHashes' => 'currentRankProgressionHashes',
        'insertPlugFreeProtectedPlugItemHashes' => 'insertPlugFreeProtectedPlugItemHashes',
        'insertPlugFreeBlockedSocketTypeHashes' => 'insertPlugFreeBlockedSocketTypeHashes',
        'undiscoveredCollectibleImage' => 'undiscoveredCollectibleImage',
        'ammoTypeHeavyIcon' => 'ammoTypeHeavyIcon',
        'ammoTypeSpecialIcon' => 'ammoTypeSpecialIcon',
        'ammoTypePrimaryIcon' => 'ammoTypePrimaryIcon',
        'currentSeasonalArtifactHash' => 'currentSeasonalArtifactHash',
        'currentSeasonHash' => 'currentSeasonHash',
        'seasonalChallengesPresentationNodeHash' => 'seasonalChallengesPresentationNodeHash',
        'futureSeasonHashes' => 'futureSeasonHashes',
        'pastSeasonHashes' => 'pastSeasonHashes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collectionRootNode' => 'setCollectionRootNode',
        'badgesRootNode' => 'setBadgesRootNode',
        'recordsRootNode' => 'setRecordsRootNode',
        'medalsRootNode' => 'setMedalsRootNode',
        'metricsRootNode' => 'setMetricsRootNode',
        'activeTriumphsRootNodeHash' => 'setActiveTriumphsRootNodeHash',
        'activeSealsRootNodeHash' => 'setActiveSealsRootNodeHash',
        'legacyTriumphsRootNodeHash' => 'setLegacyTriumphsRootNodeHash',
        'legacySealsRootNodeHash' => 'setLegacySealsRootNodeHash',
        'medalsRootNodeHash' => 'setMedalsRootNodeHash',
        'exoticCatalystsRootNodeHash' => 'setExoticCatalystsRootNodeHash',
        'loreRootNodeHash' => 'setLoreRootNodeHash',
        'craftingRootNodeHash' => 'setCraftingRootNodeHash',
        'currentRankProgressionHashes' => 'setCurrentRankProgressionHashes',
        'insertPlugFreeProtectedPlugItemHashes' => 'setInsertPlugFreeProtectedPlugItemHashes',
        'insertPlugFreeBlockedSocketTypeHashes' => 'setInsertPlugFreeBlockedSocketTypeHashes',
        'undiscoveredCollectibleImage' => 'setUndiscoveredCollectibleImage',
        'ammoTypeHeavyIcon' => 'setAmmoTypeHeavyIcon',
        'ammoTypeSpecialIcon' => 'setAmmoTypeSpecialIcon',
        'ammoTypePrimaryIcon' => 'setAmmoTypePrimaryIcon',
        'currentSeasonalArtifactHash' => 'setCurrentSeasonalArtifactHash',
        'currentSeasonHash' => 'setCurrentSeasonHash',
        'seasonalChallengesPresentationNodeHash' => 'setSeasonalChallengesPresentationNodeHash',
        'futureSeasonHashes' => 'setFutureSeasonHashes',
        'pastSeasonHashes' => 'setPastSeasonHashes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collectionRootNode' => 'getCollectionRootNode',
        'badgesRootNode' => 'getBadgesRootNode',
        'recordsRootNode' => 'getRecordsRootNode',
        'medalsRootNode' => 'getMedalsRootNode',
        'metricsRootNode' => 'getMetricsRootNode',
        'activeTriumphsRootNodeHash' => 'getActiveTriumphsRootNodeHash',
        'activeSealsRootNodeHash' => 'getActiveSealsRootNodeHash',
        'legacyTriumphsRootNodeHash' => 'getLegacyTriumphsRootNodeHash',
        'legacySealsRootNodeHash' => 'getLegacySealsRootNodeHash',
        'medalsRootNodeHash' => 'getMedalsRootNodeHash',
        'exoticCatalystsRootNodeHash' => 'getExoticCatalystsRootNodeHash',
        'loreRootNodeHash' => 'getLoreRootNodeHash',
        'craftingRootNodeHash' => 'getCraftingRootNodeHash',
        'currentRankProgressionHashes' => 'getCurrentRankProgressionHashes',
        'insertPlugFreeProtectedPlugItemHashes' => 'getInsertPlugFreeProtectedPlugItemHashes',
        'insertPlugFreeBlockedSocketTypeHashes' => 'getInsertPlugFreeBlockedSocketTypeHashes',
        'undiscoveredCollectibleImage' => 'getUndiscoveredCollectibleImage',
        'ammoTypeHeavyIcon' => 'getAmmoTypeHeavyIcon',
        'ammoTypeSpecialIcon' => 'getAmmoTypeSpecialIcon',
        'ammoTypePrimaryIcon' => 'getAmmoTypePrimaryIcon',
        'currentSeasonalArtifactHash' => 'getCurrentSeasonalArtifactHash',
        'currentSeasonHash' => 'getCurrentSeasonHash',
        'seasonalChallengesPresentationNodeHash' => 'getSeasonalChallengesPresentationNodeHash',
        'futureSeasonHashes' => 'getFutureSeasonHashes',
        'pastSeasonHashes' => 'getPastSeasonHashes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collectionRootNode'] = isset($data['collectionRootNode']) ? $data['collectionRootNode'] : null;
        $this->container['badgesRootNode'] = isset($data['badgesRootNode']) ? $data['badgesRootNode'] : null;
        $this->container['recordsRootNode'] = isset($data['recordsRootNode']) ? $data['recordsRootNode'] : null;
        $this->container['medalsRootNode'] = isset($data['medalsRootNode']) ? $data['medalsRootNode'] : null;
        $this->container['metricsRootNode'] = isset($data['metricsRootNode']) ? $data['metricsRootNode'] : null;
        $this->container['activeTriumphsRootNodeHash'] = isset($data['activeTriumphsRootNodeHash']) ? $data['activeTriumphsRootNodeHash'] : null;
        $this->container['activeSealsRootNodeHash'] = isset($data['activeSealsRootNodeHash']) ? $data['activeSealsRootNodeHash'] : null;
        $this->container['legacyTriumphsRootNodeHash'] = isset($data['legacyTriumphsRootNodeHash']) ? $data['legacyTriumphsRootNodeHash'] : null;
        $this->container['legacySealsRootNodeHash'] = isset($data['legacySealsRootNodeHash']) ? $data['legacySealsRootNodeHash'] : null;
        $this->container['medalsRootNodeHash'] = isset($data['medalsRootNodeHash']) ? $data['medalsRootNodeHash'] : null;
        $this->container['exoticCatalystsRootNodeHash'] = isset($data['exoticCatalystsRootNodeHash']) ? $data['exoticCatalystsRootNodeHash'] : null;
        $this->container['loreRootNodeHash'] = isset($data['loreRootNodeHash']) ? $data['loreRootNodeHash'] : null;
        $this->container['craftingRootNodeHash'] = isset($data['craftingRootNodeHash']) ? $data['craftingRootNodeHash'] : null;
        $this->container['currentRankProgressionHashes'] = isset($data['currentRankProgressionHashes']) ? $data['currentRankProgressionHashes'] : null;
        $this->container['insertPlugFreeProtectedPlugItemHashes'] = isset($data['insertPlugFreeProtectedPlugItemHashes']) ? $data['insertPlugFreeProtectedPlugItemHashes'] : null;
        $this->container['insertPlugFreeBlockedSocketTypeHashes'] = isset($data['insertPlugFreeBlockedSocketTypeHashes']) ? $data['insertPlugFreeBlockedSocketTypeHashes'] : null;
        $this->container['undiscoveredCollectibleImage'] = isset($data['undiscoveredCollectibleImage']) ? $data['undiscoveredCollectibleImage'] : null;
        $this->container['ammoTypeHeavyIcon'] = isset($data['ammoTypeHeavyIcon']) ? $data['ammoTypeHeavyIcon'] : null;
        $this->container['ammoTypeSpecialIcon'] = isset($data['ammoTypeSpecialIcon']) ? $data['ammoTypeSpecialIcon'] : null;
        $this->container['ammoTypePrimaryIcon'] = isset($data['ammoTypePrimaryIcon']) ? $data['ammoTypePrimaryIcon'] : null;
        $this->container['currentSeasonalArtifactHash'] = isset($data['currentSeasonalArtifactHash']) ? $data['currentSeasonalArtifactHash'] : null;
        $this->container['currentSeasonHash'] = isset($data['currentSeasonHash']) ? $data['currentSeasonHash'] : null;
        $this->container['seasonalChallengesPresentationNodeHash'] = isset($data['seasonalChallengesPresentationNodeHash']) ? $data['seasonalChallengesPresentationNodeHash'] : null;
        $this->container['futureSeasonHashes'] = isset($data['futureSeasonHashes']) ? $data['futureSeasonHashes'] : null;
        $this->container['pastSeasonHashes'] = isset($data['pastSeasonHashes']) ? $data['pastSeasonHashes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collectionRootNode
     *
     * @return int|null
     */
    public function getCollectionRootNode()
    {
        return $this->container['collectionRootNode'];
    }

    /**
     * Sets collectionRootNode
     *
     * @param int|null $collectionRootNode collectionRootNode
     *
     * @return $this
     */
    public function setCollectionRootNode($collectionRootNode)
    {
        $this->container['collectionRootNode'] = $collectionRootNode;

        return $this;
    }

    /**
     * Gets badgesRootNode
     *
     * @return int|null
     */
    public function getBadgesRootNode()
    {
        return $this->container['badgesRootNode'];
    }

    /**
     * Sets badgesRootNode
     *
     * @param int|null $badgesRootNode badgesRootNode
     *
     * @return $this
     */
    public function setBadgesRootNode($badgesRootNode)
    {
        $this->container['badgesRootNode'] = $badgesRootNode;

        return $this;
    }

    /**
     * Gets recordsRootNode
     *
     * @return int|null
     */
    public function getRecordsRootNode()
    {
        return $this->container['recordsRootNode'];
    }

    /**
     * Sets recordsRootNode
     *
     * @param int|null $recordsRootNode recordsRootNode
     *
     * @return $this
     */
    public function setRecordsRootNode($recordsRootNode)
    {
        $this->container['recordsRootNode'] = $recordsRootNode;

        return $this;
    }

    /**
     * Gets medalsRootNode
     *
     * @return int|null
     */
    public function getMedalsRootNode()
    {
        return $this->container['medalsRootNode'];
    }

    /**
     * Sets medalsRootNode
     *
     * @param int|null $medalsRootNode medalsRootNode
     *
     * @return $this
     */
    public function setMedalsRootNode($medalsRootNode)
    {
        $this->container['medalsRootNode'] = $medalsRootNode;

        return $this;
    }

    /**
     * Gets metricsRootNode
     *
     * @return int|null
     */
    public function getMetricsRootNode()
    {
        return $this->container['metricsRootNode'];
    }

    /**
     * Sets metricsRootNode
     *
     * @param int|null $metricsRootNode metricsRootNode
     *
     * @return $this
     */
    public function setMetricsRootNode($metricsRootNode)
    {
        $this->container['metricsRootNode'] = $metricsRootNode;

        return $this;
    }

    /**
     * Gets activeTriumphsRootNodeHash
     *
     * @return int|null
     */
    public function getActiveTriumphsRootNodeHash()
    {
        return $this->container['activeTriumphsRootNodeHash'];
    }

    /**
     * Sets activeTriumphsRootNodeHash
     *
     * @param int|null $activeTriumphsRootNodeHash activeTriumphsRootNodeHash
     *
     * @return $this
     */
    public function setActiveTriumphsRootNodeHash($activeTriumphsRootNodeHash)
    {
        $this->container['activeTriumphsRootNodeHash'] = $activeTriumphsRootNodeHash;

        return $this;
    }

    /**
     * Gets activeSealsRootNodeHash
     *
     * @return int|null
     */
    public function getActiveSealsRootNodeHash()
    {
        return $this->container['activeSealsRootNodeHash'];
    }

    /**
     * Sets activeSealsRootNodeHash
     *
     * @param int|null $activeSealsRootNodeHash activeSealsRootNodeHash
     *
     * @return $this
     */
    public function setActiveSealsRootNodeHash($activeSealsRootNodeHash)
    {
        $this->container['activeSealsRootNodeHash'] = $activeSealsRootNodeHash;

        return $this;
    }

    /**
     * Gets legacyTriumphsRootNodeHash
     *
     * @return int|null
     */
    public function getLegacyTriumphsRootNodeHash()
    {
        return $this->container['legacyTriumphsRootNodeHash'];
    }

    /**
     * Sets legacyTriumphsRootNodeHash
     *
     * @param int|null $legacyTriumphsRootNodeHash legacyTriumphsRootNodeHash
     *
     * @return $this
     */
    public function setLegacyTriumphsRootNodeHash($legacyTriumphsRootNodeHash)
    {
        $this->container['legacyTriumphsRootNodeHash'] = $legacyTriumphsRootNodeHash;

        return $this;
    }

    /**
     * Gets legacySealsRootNodeHash
     *
     * @return int|null
     */
    public function getLegacySealsRootNodeHash()
    {
        return $this->container['legacySealsRootNodeHash'];
    }

    /**
     * Sets legacySealsRootNodeHash
     *
     * @param int|null $legacySealsRootNodeHash legacySealsRootNodeHash
     *
     * @return $this
     */
    public function setLegacySealsRootNodeHash($legacySealsRootNodeHash)
    {
        $this->container['legacySealsRootNodeHash'] = $legacySealsRootNodeHash;

        return $this;
    }

    /**
     * Gets medalsRootNodeHash
     *
     * @return int|null
     */
    public function getMedalsRootNodeHash()
    {
        return $this->container['medalsRootNodeHash'];
    }

    /**
     * Sets medalsRootNodeHash
     *
     * @param int|null $medalsRootNodeHash medalsRootNodeHash
     *
     * @return $this
     */
    public function setMedalsRootNodeHash($medalsRootNodeHash)
    {
        $this->container['medalsRootNodeHash'] = $medalsRootNodeHash;

        return $this;
    }

    /**
     * Gets exoticCatalystsRootNodeHash
     *
     * @return int|null
     */
    public function getExoticCatalystsRootNodeHash()
    {
        return $this->container['exoticCatalystsRootNodeHash'];
    }

    /**
     * Sets exoticCatalystsRootNodeHash
     *
     * @param int|null $exoticCatalystsRootNodeHash exoticCatalystsRootNodeHash
     *
     * @return $this
     */
    public function setExoticCatalystsRootNodeHash($exoticCatalystsRootNodeHash)
    {
        $this->container['exoticCatalystsRootNodeHash'] = $exoticCatalystsRootNodeHash;

        return $this;
    }

    /**
     * Gets loreRootNodeHash
     *
     * @return int|null
     */
    public function getLoreRootNodeHash()
    {
        return $this->container['loreRootNodeHash'];
    }

    /**
     * Sets loreRootNodeHash
     *
     * @param int|null $loreRootNodeHash loreRootNodeHash
     *
     * @return $this
     */
    public function setLoreRootNodeHash($loreRootNodeHash)
    {
        $this->container['loreRootNodeHash'] = $loreRootNodeHash;

        return $this;
    }

    /**
     * Gets craftingRootNodeHash
     *
     * @return int|null
     */
    public function getCraftingRootNodeHash()
    {
        return $this->container['craftingRootNodeHash'];
    }

    /**
     * Sets craftingRootNodeHash
     *
     * @param int|null $craftingRootNodeHash craftingRootNodeHash
     *
     * @return $this
     */
    public function setCraftingRootNodeHash($craftingRootNodeHash)
    {
        $this->container['craftingRootNodeHash'] = $craftingRootNodeHash;

        return $this;
    }

    /**
     * Gets currentRankProgressionHashes
     *
     * @return int[]|null
     */
    public function getCurrentRankProgressionHashes()
    {
        return $this->container['currentRankProgressionHashes'];
    }

    /**
     * Sets currentRankProgressionHashes
     *
     * @param int[]|null $currentRankProgressionHashes currentRankProgressionHashes
     *
     * @return $this
     */
    public function setCurrentRankProgressionHashes($currentRankProgressionHashes)
    {
        $this->container['currentRankProgressionHashes'] = $currentRankProgressionHashes;

        return $this;
    }

    /**
     * Gets insertPlugFreeProtectedPlugItemHashes
     *
     * @return int[]|null
     */
    public function getInsertPlugFreeProtectedPlugItemHashes()
    {
        return $this->container['insertPlugFreeProtectedPlugItemHashes'];
    }

    /**
     * Sets insertPlugFreeProtectedPlugItemHashes
     *
     * @param int[]|null $insertPlugFreeProtectedPlugItemHashes insertPlugFreeProtectedPlugItemHashes
     *
     * @return $this
     */
    public function setInsertPlugFreeProtectedPlugItemHashes($insertPlugFreeProtectedPlugItemHashes)
    {
        $this->container['insertPlugFreeProtectedPlugItemHashes'] = $insertPlugFreeProtectedPlugItemHashes;

        return $this;
    }

    /**
     * Gets insertPlugFreeBlockedSocketTypeHashes
     *
     * @return int[]|null
     */
    public function getInsertPlugFreeBlockedSocketTypeHashes()
    {
        return $this->container['insertPlugFreeBlockedSocketTypeHashes'];
    }

    /**
     * Sets insertPlugFreeBlockedSocketTypeHashes
     *
     * @param int[]|null $insertPlugFreeBlockedSocketTypeHashes insertPlugFreeBlockedSocketTypeHashes
     *
     * @return $this
     */
    public function setInsertPlugFreeBlockedSocketTypeHashes($insertPlugFreeBlockedSocketTypeHashes)
    {
        $this->container['insertPlugFreeBlockedSocketTypeHashes'] = $insertPlugFreeBlockedSocketTypeHashes;

        return $this;
    }

    /**
     * Gets undiscoveredCollectibleImage
     *
     * @return string|null
     */
    public function getUndiscoveredCollectibleImage()
    {
        return $this->container['undiscoveredCollectibleImage'];
    }

    /**
     * Sets undiscoveredCollectibleImage
     *
     * @param string|null $undiscoveredCollectibleImage undiscoveredCollectibleImage
     *
     * @return $this
     */
    public function setUndiscoveredCollectibleImage($undiscoveredCollectibleImage)
    {
        $this->container['undiscoveredCollectibleImage'] = $undiscoveredCollectibleImage;

        return $this;
    }

    /**
     * Gets ammoTypeHeavyIcon
     *
     * @return string|null
     */
    public function getAmmoTypeHeavyIcon()
    {
        return $this->container['ammoTypeHeavyIcon'];
    }

    /**
     * Sets ammoTypeHeavyIcon
     *
     * @param string|null $ammoTypeHeavyIcon ammoTypeHeavyIcon
     *
     * @return $this
     */
    public function setAmmoTypeHeavyIcon($ammoTypeHeavyIcon)
    {
        $this->container['ammoTypeHeavyIcon'] = $ammoTypeHeavyIcon;

        return $this;
    }

    /**
     * Gets ammoTypeSpecialIcon
     *
     * @return string|null
     */
    public function getAmmoTypeSpecialIcon()
    {
        return $this->container['ammoTypeSpecialIcon'];
    }

    /**
     * Sets ammoTypeSpecialIcon
     *
     * @param string|null $ammoTypeSpecialIcon ammoTypeSpecialIcon
     *
     * @return $this
     */
    public function setAmmoTypeSpecialIcon($ammoTypeSpecialIcon)
    {
        $this->container['ammoTypeSpecialIcon'] = $ammoTypeSpecialIcon;

        return $this;
    }

    /**
     * Gets ammoTypePrimaryIcon
     *
     * @return string|null
     */
    public function getAmmoTypePrimaryIcon()
    {
        return $this->container['ammoTypePrimaryIcon'];
    }

    /**
     * Sets ammoTypePrimaryIcon
     *
     * @param string|null $ammoTypePrimaryIcon ammoTypePrimaryIcon
     *
     * @return $this
     */
    public function setAmmoTypePrimaryIcon($ammoTypePrimaryIcon)
    {
        $this->container['ammoTypePrimaryIcon'] = $ammoTypePrimaryIcon;

        return $this;
    }

    /**
     * Gets currentSeasonalArtifactHash
     *
     * @return int|null
     */
    public function getCurrentSeasonalArtifactHash()
    {
        return $this->container['currentSeasonalArtifactHash'];
    }

    /**
     * Sets currentSeasonalArtifactHash
     *
     * @param int|null $currentSeasonalArtifactHash currentSeasonalArtifactHash
     *
     * @return $this
     */
    public function setCurrentSeasonalArtifactHash($currentSeasonalArtifactHash)
    {
        $this->container['currentSeasonalArtifactHash'] = $currentSeasonalArtifactHash;

        return $this;
    }

    /**
     * Gets currentSeasonHash
     *
     * @return int|null
     */
    public function getCurrentSeasonHash()
    {
        return $this->container['currentSeasonHash'];
    }

    /**
     * Sets currentSeasonHash
     *
     * @param int|null $currentSeasonHash currentSeasonHash
     *
     * @return $this
     */
    public function setCurrentSeasonHash($currentSeasonHash)
    {
        $this->container['currentSeasonHash'] = $currentSeasonHash;

        return $this;
    }

    /**
     * Gets seasonalChallengesPresentationNodeHash
     *
     * @return int|null
     */
    public function getSeasonalChallengesPresentationNodeHash()
    {
        return $this->container['seasonalChallengesPresentationNodeHash'];
    }

    /**
     * Sets seasonalChallengesPresentationNodeHash
     *
     * @param int|null $seasonalChallengesPresentationNodeHash seasonalChallengesPresentationNodeHash
     *
     * @return $this
     */
    public function setSeasonalChallengesPresentationNodeHash($seasonalChallengesPresentationNodeHash)
    {
        $this->container['seasonalChallengesPresentationNodeHash'] = $seasonalChallengesPresentationNodeHash;

        return $this;
    }

    /**
     * Gets futureSeasonHashes
     *
     * @return int[]|null
     */
    public function getFutureSeasonHashes()
    {
        return $this->container['futureSeasonHashes'];
    }

    /**
     * Sets futureSeasonHashes
     *
     * @param int[]|null $futureSeasonHashes futureSeasonHashes
     *
     * @return $this
     */
    public function setFutureSeasonHashes($futureSeasonHashes)
    {
        $this->container['futureSeasonHashes'] = $futureSeasonHashes;

        return $this;
    }

    /**
     * Gets pastSeasonHashes
     *
     * @return int[]|null
     */
    public function getPastSeasonHashes()
    {
        return $this->container['pastSeasonHashes'];
    }

    /**
     * Sets pastSeasonHashes
     *
     * @param int[]|null $pastSeasonHashes pastSeasonHashes
     *
     * @return $this
     */
    public function setPastSeasonHashes($pastSeasonHashes)
    {
        $this->container['pastSeasonHashes'] = $pastSeasonHashes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


