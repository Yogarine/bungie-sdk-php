<?php
/**
 * TrendingTrendingDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * TrendingTrendingDetail Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrendingTrendingDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Trending.TrendingDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identifier' => 'string',
        'entityType' => '\Bungie\Model\TrendingTrendingEntryType',
        'news' => '\Bungie\Model\TrendingTrendingEntryNews',
        'support' => '\Bungie\Model\TrendingTrendingEntrySupportArticle',
        'destinyItem' => '\Bungie\Model\TrendingTrendingEntryDestinyItem',
        'destinyActivity' => '\Bungie\Model\TrendingTrendingEntryDestinyActivity',
        'destinyRitual' => '\Bungie\Model\TrendingTrendingEntryDestinyRitual',
        'creation' => '\Bungie\Model\TrendingTrendingEntryCommunityCreation',
        'stream' => '\Bungie\Model\TrendingTrendingEntryCommunityStream'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'identifier' => null,
        'entityType' => null,
        'news' => null,
        'support' => null,
        'destinyItem' => null,
        'destinyActivity' => null,
        'destinyRitual' => null,
        'creation' => null,
        'stream' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'entityType' => 'entityType',
        'news' => 'news',
        'support' => 'support',
        'destinyItem' => 'destinyItem',
        'destinyActivity' => 'destinyActivity',
        'destinyRitual' => 'destinyRitual',
        'creation' => 'creation',
        'stream' => 'stream'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'entityType' => 'setEntityType',
        'news' => 'setNews',
        'support' => 'setSupport',
        'destinyItem' => 'setDestinyItem',
        'destinyActivity' => 'setDestinyActivity',
        'destinyRitual' => 'setDestinyRitual',
        'creation' => 'setCreation',
        'stream' => 'setStream'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'entityType' => 'getEntityType',
        'news' => 'getNews',
        'support' => 'getSupport',
        'destinyItem' => 'getDestinyItem',
        'destinyActivity' => 'getDestinyActivity',
        'destinyRitual' => 'getDestinyRitual',
        'creation' => 'getCreation',
        'stream' => 'getStream'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['news'] = isset($data['news']) ? $data['news'] : null;
        $this->container['support'] = isset($data['support']) ? $data['support'] : null;
        $this->container['destinyItem'] = isset($data['destinyItem']) ? $data['destinyItem'] : null;
        $this->container['destinyActivity'] = isset($data['destinyActivity']) ? $data['destinyActivity'] : null;
        $this->container['destinyRitual'] = isset($data['destinyRitual']) ? $data['destinyRitual'] : null;
        $this->container['creation'] = isset($data['creation']) ? $data['creation'] : null;
        $this->container['stream'] = isset($data['stream']) ? $data['stream'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return \Bungie\Model\TrendingTrendingEntryType
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param \Bungie\Model\TrendingTrendingEntryType $entityType entityType
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets news
     *
     * @return \Bungie\Model\TrendingTrendingEntryNews
     */
    public function getNews()
    {
        return $this->container['news'];
    }

    /**
     * Sets news
     *
     * @param \Bungie\Model\TrendingTrendingEntryNews $news news
     *
     * @return $this
     */
    public function setNews($news)
    {
        $this->container['news'] = $news;

        return $this;
    }

    /**
     * Gets support
     *
     * @return \Bungie\Model\TrendingTrendingEntrySupportArticle
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param \Bungie\Model\TrendingTrendingEntrySupportArticle $support support
     *
     * @return $this
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets destinyItem
     *
     * @return \Bungie\Model\TrendingTrendingEntryDestinyItem
     */
    public function getDestinyItem()
    {
        return $this->container['destinyItem'];
    }

    /**
     * Sets destinyItem
     *
     * @param \Bungie\Model\TrendingTrendingEntryDestinyItem $destinyItem destinyItem
     *
     * @return $this
     */
    public function setDestinyItem($destinyItem)
    {
        $this->container['destinyItem'] = $destinyItem;

        return $this;
    }

    /**
     * Gets destinyActivity
     *
     * @return \Bungie\Model\TrendingTrendingEntryDestinyActivity
     */
    public function getDestinyActivity()
    {
        return $this->container['destinyActivity'];
    }

    /**
     * Sets destinyActivity
     *
     * @param \Bungie\Model\TrendingTrendingEntryDestinyActivity $destinyActivity destinyActivity
     *
     * @return $this
     */
    public function setDestinyActivity($destinyActivity)
    {
        $this->container['destinyActivity'] = $destinyActivity;

        return $this;
    }

    /**
     * Gets destinyRitual
     *
     * @return \Bungie\Model\TrendingTrendingEntryDestinyRitual
     */
    public function getDestinyRitual()
    {
        return $this->container['destinyRitual'];
    }

    /**
     * Sets destinyRitual
     *
     * @param \Bungie\Model\TrendingTrendingEntryDestinyRitual $destinyRitual destinyRitual
     *
     * @return $this
     */
    public function setDestinyRitual($destinyRitual)
    {
        $this->container['destinyRitual'] = $destinyRitual;

        return $this;
    }

    /**
     * Gets creation
     *
     * @return \Bungie\Model\TrendingTrendingEntryCommunityCreation
     */
    public function getCreation()
    {
        return $this->container['creation'];
    }

    /**
     * Sets creation
     *
     * @param \Bungie\Model\TrendingTrendingEntryCommunityCreation $creation creation
     *
     * @return $this
     */
    public function setCreation($creation)
    {
        $this->container['creation'] = $creation;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return \Bungie\Model\TrendingTrendingEntryCommunityStream
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param \Bungie\Model\TrendingTrendingEntryCommunityStream $stream stream
     *
     * @return $this
     */
    public function setStream($stream)
    {
        $this->container['stream'] = $stream;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


