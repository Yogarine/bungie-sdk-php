<?php
/**
 * DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition Class Doc Comment
 *
 * @category Class
 * @description The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Destiny.Definitions.Milestones.DestinyMilestoneRewardEntryDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rewardEntryHash' => 'int',
        'rewardEntryIdentifier' => 'string',
        'items' => '\Bungie\Model\DestinyDestinyItemQuantity[]',
        'vendorHash' => 'int',
        'displayProperties' => 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'order' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'rewardEntryHash' => 'uint32',
        'rewardEntryIdentifier' => null,
        'items' => null,
        'vendorHash' => 'uint32',
        'displayProperties' => null,
        'order' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rewardEntryHash' => 'rewardEntryHash',
        'rewardEntryIdentifier' => 'rewardEntryIdentifier',
        'items' => 'items',
        'vendorHash' => 'vendorHash',
        'displayProperties' => 'displayProperties',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rewardEntryHash' => 'setRewardEntryHash',
        'rewardEntryIdentifier' => 'setRewardEntryIdentifier',
        'items' => 'setItems',
        'vendorHash' => 'setVendorHash',
        'displayProperties' => 'setDisplayProperties',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rewardEntryHash' => 'getRewardEntryHash',
        'rewardEntryIdentifier' => 'getRewardEntryIdentifier',
        'items' => 'getItems',
        'vendorHash' => 'getVendorHash',
        'displayProperties' => 'getDisplayProperties',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rewardEntryHash'] = isset($data['rewardEntryHash']) ? $data['rewardEntryHash'] : null;
        $this->container['rewardEntryIdentifier'] = isset($data['rewardEntryIdentifier']) ? $data['rewardEntryIdentifier'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['vendorHash'] = isset($data['vendorHash']) ? $data['vendorHash'] : null;
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rewardEntryHash
     *
     * @return int|null
     */
    public function getRewardEntryHash()
    {
        return $this->container['rewardEntryHash'];
    }

    /**
     * Sets rewardEntryHash
     *
     * @param int|null $rewardEntryHash The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.
     *
     * @return $this
     */
    public function setRewardEntryHash($rewardEntryHash)
    {
        $this->container['rewardEntryHash'] = $rewardEntryHash;

        return $this;
    }

    /**
     * Gets rewardEntryIdentifier
     *
     * @return string|null
     */
    public function getRewardEntryIdentifier()
    {
        return $this->container['rewardEntryIdentifier'];
    }

    /**
     * Sets rewardEntryIdentifier
     *
     * @param string|null $rewardEntryIdentifier The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.
     *
     * @return $this
     */
    public function setRewardEntryIdentifier($rewardEntryIdentifier)
    {
        $this->container['rewardEntryIdentifier'] = $rewardEntryIdentifier;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Bungie\Model\DestinyDestinyItemQuantity[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Bungie\Model\DestinyDestinyItemQuantity[]|null $items The items you will get as rewards, and how much of it you'll get.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets vendorHash
     *
     * @return int|null
     */
    public function getVendorHash()
    {
        return $this->container['vendorHash'];
    }

    /**
     * Sets vendorHash
     *
     * @param int|null $vendorHash If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.
     *
     * @return $this
     */
    public function setVendorHash($vendorHash)
    {
        $this->container['vendorHash'] = $vendorHash;

        return $this;
    }

    /**
     * Gets displayProperties
     *
     * @return DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition|null $displayProperties For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


