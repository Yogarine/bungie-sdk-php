<?php
/**
 * DestinyDefinitionsDestinyActivityDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyActivityDefinition Class Doc Comment
 *
 * @category Class
 * @description The static data about Activities in Destiny 2.  Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is \&quot;Playing\&quot;.  In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.  However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You&#39;ll need to know the Activity Mode they&#39;re playing to know that they&#39;re playing Mode X on Map Y.  Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you&#39;ll need to combine the definition with \&quot;Live\&quot; data from one of the Destiny endpoints.  Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we&#39;re going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyActivityDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyActivityDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'displayProperties' => 'object',
        'originalDisplayProperties' => 'object',
        'selectionScreenDisplayProperties' => 'object',
        'releaseIcon' => 'string',
        'releaseTime' => 'int',
        'activityLevel' => 'int',
        'activityLightLevel' => 'int',
        'destinationHash' => 'int',
        'placeHash' => 'int',
        'activityTypeHash' => 'int',
        'tier' => 'int',
        'pgcrImage' => 'string',
        'rewards' => '\Bungie\Model\DestinyDefinitionsDestinyActivityRewardDefinition[]',
        'modifiers' => '\Bungie\Model\DestinyDefinitionsDestinyActivityModifierReferenceDefinition[]',
        'isPlaylist' => 'bool',
        'challenges' => '\Bungie\Model\DestinyDefinitionsDestinyActivityChallengeDefinition[]',
        'optionalUnlockStrings' => '\Bungie\Model\DestinyDefinitionsDestinyActivityUnlockStringDefinition[]',
        'playlistItems' => '\Bungie\Model\DestinyDefinitionsDestinyActivityPlaylistItemDefinition[]',
        'activityGraphList' => '\Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[]',
        'matchmaking' => 'object',
        'guidedGame' => 'object',
        'directActivityModeHash' => 'int',
        'directActivityModeType' => 'int',
        'loadouts' => '\Bungie\Model\DestinyDefinitionsDestinyActivityLoadoutRequirementSet[]',
        'activityModeHashes' => 'int[]',
        'activityModeTypes' => '\Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]',
        'isPvP' => 'bool',
        'insertionPoints' => '\Bungie\Model\DestinyDefinitionsDestinyActivityInsertionPointDefinition[]',
        'activityLocationMappings' => '\Bungie\Model\DestinyConstantsDestinyEnvironmentLocationMapping[]',
        'hash' => 'int',
        'index' => 'int',
        'redacted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'displayProperties' => null,
        'originalDisplayProperties' => null,
        'selectionScreenDisplayProperties' => null,
        'releaseIcon' => null,
        'releaseTime' => 'int32',
        'activityLevel' => 'int32',
        'activityLightLevel' => 'int32',
        'destinationHash' => 'uint32',
        'placeHash' => 'uint32',
        'activityTypeHash' => 'uint32',
        'tier' => 'int32',
        'pgcrImage' => null,
        'rewards' => null,
        'modifiers' => null,
        'isPlaylist' => null,
        'challenges' => null,
        'optionalUnlockStrings' => null,
        'playlistItems' => null,
        'activityGraphList' => null,
        'matchmaking' => null,
        'guidedGame' => null,
        'directActivityModeHash' => 'uint32',
        'directActivityModeType' => 'int32',
        'loadouts' => null,
        'activityModeHashes' => 'uint32',
        'activityModeTypes' => null,
        'isPvP' => null,
        'insertionPoints' => null,
        'activityLocationMappings' => null,
        'hash' => 'uint32',
        'index' => 'int32',
        'redacted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'displayProperties' => 'displayProperties',
        'originalDisplayProperties' => 'originalDisplayProperties',
        'selectionScreenDisplayProperties' => 'selectionScreenDisplayProperties',
        'releaseIcon' => 'releaseIcon',
        'releaseTime' => 'releaseTime',
        'activityLevel' => 'activityLevel',
        'activityLightLevel' => 'activityLightLevel',
        'destinationHash' => 'destinationHash',
        'placeHash' => 'placeHash',
        'activityTypeHash' => 'activityTypeHash',
        'tier' => 'tier',
        'pgcrImage' => 'pgcrImage',
        'rewards' => 'rewards',
        'modifiers' => 'modifiers',
        'isPlaylist' => 'isPlaylist',
        'challenges' => 'challenges',
        'optionalUnlockStrings' => 'optionalUnlockStrings',
        'playlistItems' => 'playlistItems',
        'activityGraphList' => 'activityGraphList',
        'matchmaking' => 'matchmaking',
        'guidedGame' => 'guidedGame',
        'directActivityModeHash' => 'directActivityModeHash',
        'directActivityModeType' => 'directActivityModeType',
        'loadouts' => 'loadouts',
        'activityModeHashes' => 'activityModeHashes',
        'activityModeTypes' => 'activityModeTypes',
        'isPvP' => 'isPvP',
        'insertionPoints' => 'insertionPoints',
        'activityLocationMappings' => 'activityLocationMappings',
        'hash' => 'hash',
        'index' => 'index',
        'redacted' => 'redacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'displayProperties' => 'setDisplayProperties',
        'originalDisplayProperties' => 'setOriginalDisplayProperties',
        'selectionScreenDisplayProperties' => 'setSelectionScreenDisplayProperties',
        'releaseIcon' => 'setReleaseIcon',
        'releaseTime' => 'setReleaseTime',
        'activityLevel' => 'setActivityLevel',
        'activityLightLevel' => 'setActivityLightLevel',
        'destinationHash' => 'setDestinationHash',
        'placeHash' => 'setPlaceHash',
        'activityTypeHash' => 'setActivityTypeHash',
        'tier' => 'setTier',
        'pgcrImage' => 'setPgcrImage',
        'rewards' => 'setRewards',
        'modifiers' => 'setModifiers',
        'isPlaylist' => 'setIsPlaylist',
        'challenges' => 'setChallenges',
        'optionalUnlockStrings' => 'setOptionalUnlockStrings',
        'playlistItems' => 'setPlaylistItems',
        'activityGraphList' => 'setActivityGraphList',
        'matchmaking' => 'setMatchmaking',
        'guidedGame' => 'setGuidedGame',
        'directActivityModeHash' => 'setDirectActivityModeHash',
        'directActivityModeType' => 'setDirectActivityModeType',
        'loadouts' => 'setLoadouts',
        'activityModeHashes' => 'setActivityModeHashes',
        'activityModeTypes' => 'setActivityModeTypes',
        'isPvP' => 'setIsPvP',
        'insertionPoints' => 'setInsertionPoints',
        'activityLocationMappings' => 'setActivityLocationMappings',
        'hash' => 'setHash',
        'index' => 'setIndex',
        'redacted' => 'setRedacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'displayProperties' => 'getDisplayProperties',
        'originalDisplayProperties' => 'getOriginalDisplayProperties',
        'selectionScreenDisplayProperties' => 'getSelectionScreenDisplayProperties',
        'releaseIcon' => 'getReleaseIcon',
        'releaseTime' => 'getReleaseTime',
        'activityLevel' => 'getActivityLevel',
        'activityLightLevel' => 'getActivityLightLevel',
        'destinationHash' => 'getDestinationHash',
        'placeHash' => 'getPlaceHash',
        'activityTypeHash' => 'getActivityTypeHash',
        'tier' => 'getTier',
        'pgcrImage' => 'getPgcrImage',
        'rewards' => 'getRewards',
        'modifiers' => 'getModifiers',
        'isPlaylist' => 'getIsPlaylist',
        'challenges' => 'getChallenges',
        'optionalUnlockStrings' => 'getOptionalUnlockStrings',
        'playlistItems' => 'getPlaylistItems',
        'activityGraphList' => 'getActivityGraphList',
        'matchmaking' => 'getMatchmaking',
        'guidedGame' => 'getGuidedGame',
        'directActivityModeHash' => 'getDirectActivityModeHash',
        'directActivityModeType' => 'getDirectActivityModeType',
        'loadouts' => 'getLoadouts',
        'activityModeHashes' => 'getActivityModeHashes',
        'activityModeTypes' => 'getActivityModeTypes',
        'isPvP' => 'getIsPvP',
        'insertionPoints' => 'getInsertionPoints',
        'activityLocationMappings' => 'getActivityLocationMappings',
        'hash' => 'getHash',
        'index' => 'getIndex',
        'redacted' => 'getRedacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECT_ACTIVITY_MODE_TYPE_0 = 0;
    const DIRECT_ACTIVITY_MODE_TYPE_2 = 2;
    const DIRECT_ACTIVITY_MODE_TYPE_3 = 3;
    const DIRECT_ACTIVITY_MODE_TYPE_4 = 4;
    const DIRECT_ACTIVITY_MODE_TYPE_5 = 5;
    const DIRECT_ACTIVITY_MODE_TYPE_6 = 6;
    const DIRECT_ACTIVITY_MODE_TYPE_7 = 7;
    const DIRECT_ACTIVITY_MODE_TYPE_9 = 9;
    const DIRECT_ACTIVITY_MODE_TYPE_10 = 10;
    const DIRECT_ACTIVITY_MODE_TYPE_11 = 11;
    const DIRECT_ACTIVITY_MODE_TYPE_12 = 12;
    const DIRECT_ACTIVITY_MODE_TYPE_13 = 13;
    const DIRECT_ACTIVITY_MODE_TYPE_15 = 15;
    const DIRECT_ACTIVITY_MODE_TYPE_16 = 16;
    const DIRECT_ACTIVITY_MODE_TYPE_17 = 17;
    const DIRECT_ACTIVITY_MODE_TYPE_18 = 18;
    const DIRECT_ACTIVITY_MODE_TYPE_19 = 19;
    const DIRECT_ACTIVITY_MODE_TYPE_20 = 20;
    const DIRECT_ACTIVITY_MODE_TYPE_21 = 21;
    const DIRECT_ACTIVITY_MODE_TYPE_22 = 22;
    const DIRECT_ACTIVITY_MODE_TYPE_24 = 24;
    const DIRECT_ACTIVITY_MODE_TYPE_25 = 25;
    const DIRECT_ACTIVITY_MODE_TYPE_26 = 26;
    const DIRECT_ACTIVITY_MODE_TYPE_27 = 27;
    const DIRECT_ACTIVITY_MODE_TYPE_28 = 28;
    const DIRECT_ACTIVITY_MODE_TYPE_29 = 29;
    const DIRECT_ACTIVITY_MODE_TYPE_30 = 30;
    const DIRECT_ACTIVITY_MODE_TYPE_31 = 31;
    const DIRECT_ACTIVITY_MODE_TYPE_32 = 32;
    const DIRECT_ACTIVITY_MODE_TYPE_37 = 37;
    const DIRECT_ACTIVITY_MODE_TYPE_38 = 38;
    const DIRECT_ACTIVITY_MODE_TYPE_39 = 39;
    const DIRECT_ACTIVITY_MODE_TYPE_40 = 40;
    const DIRECT_ACTIVITY_MODE_TYPE_41 = 41;
    const DIRECT_ACTIVITY_MODE_TYPE_42 = 42;
    const DIRECT_ACTIVITY_MODE_TYPE_43 = 43;
    const DIRECT_ACTIVITY_MODE_TYPE_44 = 44;
    const DIRECT_ACTIVITY_MODE_TYPE_45 = 45;
    const DIRECT_ACTIVITY_MODE_TYPE_46 = 46;
    const DIRECT_ACTIVITY_MODE_TYPE_47 = 47;
    const DIRECT_ACTIVITY_MODE_TYPE_48 = 48;
    const DIRECT_ACTIVITY_MODE_TYPE_49 = 49;
    const DIRECT_ACTIVITY_MODE_TYPE_50 = 50;
    const DIRECT_ACTIVITY_MODE_TYPE_51 = 51;
    const DIRECT_ACTIVITY_MODE_TYPE_52 = 52;
    const DIRECT_ACTIVITY_MODE_TYPE_53 = 53;
    const DIRECT_ACTIVITY_MODE_TYPE_54 = 54;
    const DIRECT_ACTIVITY_MODE_TYPE_55 = 55;
    const DIRECT_ACTIVITY_MODE_TYPE_56 = 56;
    const DIRECT_ACTIVITY_MODE_TYPE_57 = 57;
    const DIRECT_ACTIVITY_MODE_TYPE_58 = 58;
    const DIRECT_ACTIVITY_MODE_TYPE_59 = 59;
    const DIRECT_ACTIVITY_MODE_TYPE_60 = 60;
    const DIRECT_ACTIVITY_MODE_TYPE_61 = 61;
    const DIRECT_ACTIVITY_MODE_TYPE_62 = 62;
    const DIRECT_ACTIVITY_MODE_TYPE_63 = 63;
    const DIRECT_ACTIVITY_MODE_TYPE_64 = 64;
    const DIRECT_ACTIVITY_MODE_TYPE_65 = 65;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectActivityModeTypeAllowableValues()
    {
        return [
            self::DIRECT_ACTIVITY_MODE_TYPE_0,
            self::DIRECT_ACTIVITY_MODE_TYPE_2,
            self::DIRECT_ACTIVITY_MODE_TYPE_3,
            self::DIRECT_ACTIVITY_MODE_TYPE_4,
            self::DIRECT_ACTIVITY_MODE_TYPE_5,
            self::DIRECT_ACTIVITY_MODE_TYPE_6,
            self::DIRECT_ACTIVITY_MODE_TYPE_7,
            self::DIRECT_ACTIVITY_MODE_TYPE_9,
            self::DIRECT_ACTIVITY_MODE_TYPE_10,
            self::DIRECT_ACTIVITY_MODE_TYPE_11,
            self::DIRECT_ACTIVITY_MODE_TYPE_12,
            self::DIRECT_ACTIVITY_MODE_TYPE_13,
            self::DIRECT_ACTIVITY_MODE_TYPE_15,
            self::DIRECT_ACTIVITY_MODE_TYPE_16,
            self::DIRECT_ACTIVITY_MODE_TYPE_17,
            self::DIRECT_ACTIVITY_MODE_TYPE_18,
            self::DIRECT_ACTIVITY_MODE_TYPE_19,
            self::DIRECT_ACTIVITY_MODE_TYPE_20,
            self::DIRECT_ACTIVITY_MODE_TYPE_21,
            self::DIRECT_ACTIVITY_MODE_TYPE_22,
            self::DIRECT_ACTIVITY_MODE_TYPE_24,
            self::DIRECT_ACTIVITY_MODE_TYPE_25,
            self::DIRECT_ACTIVITY_MODE_TYPE_26,
            self::DIRECT_ACTIVITY_MODE_TYPE_27,
            self::DIRECT_ACTIVITY_MODE_TYPE_28,
            self::DIRECT_ACTIVITY_MODE_TYPE_29,
            self::DIRECT_ACTIVITY_MODE_TYPE_30,
            self::DIRECT_ACTIVITY_MODE_TYPE_31,
            self::DIRECT_ACTIVITY_MODE_TYPE_32,
            self::DIRECT_ACTIVITY_MODE_TYPE_37,
            self::DIRECT_ACTIVITY_MODE_TYPE_38,
            self::DIRECT_ACTIVITY_MODE_TYPE_39,
            self::DIRECT_ACTIVITY_MODE_TYPE_40,
            self::DIRECT_ACTIVITY_MODE_TYPE_41,
            self::DIRECT_ACTIVITY_MODE_TYPE_42,
            self::DIRECT_ACTIVITY_MODE_TYPE_43,
            self::DIRECT_ACTIVITY_MODE_TYPE_44,
            self::DIRECT_ACTIVITY_MODE_TYPE_45,
            self::DIRECT_ACTIVITY_MODE_TYPE_46,
            self::DIRECT_ACTIVITY_MODE_TYPE_47,
            self::DIRECT_ACTIVITY_MODE_TYPE_48,
            self::DIRECT_ACTIVITY_MODE_TYPE_49,
            self::DIRECT_ACTIVITY_MODE_TYPE_50,
            self::DIRECT_ACTIVITY_MODE_TYPE_51,
            self::DIRECT_ACTIVITY_MODE_TYPE_52,
            self::DIRECT_ACTIVITY_MODE_TYPE_53,
            self::DIRECT_ACTIVITY_MODE_TYPE_54,
            self::DIRECT_ACTIVITY_MODE_TYPE_55,
            self::DIRECT_ACTIVITY_MODE_TYPE_56,
            self::DIRECT_ACTIVITY_MODE_TYPE_57,
            self::DIRECT_ACTIVITY_MODE_TYPE_58,
            self::DIRECT_ACTIVITY_MODE_TYPE_59,
            self::DIRECT_ACTIVITY_MODE_TYPE_60,
            self::DIRECT_ACTIVITY_MODE_TYPE_61,
            self::DIRECT_ACTIVITY_MODE_TYPE_62,
            self::DIRECT_ACTIVITY_MODE_TYPE_63,
            self::DIRECT_ACTIVITY_MODE_TYPE_64,
            self::DIRECT_ACTIVITY_MODE_TYPE_65,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['originalDisplayProperties'] = isset($data['originalDisplayProperties']) ? $data['originalDisplayProperties'] : null;
        $this->container['selectionScreenDisplayProperties'] = isset($data['selectionScreenDisplayProperties']) ? $data['selectionScreenDisplayProperties'] : null;
        $this->container['releaseIcon'] = isset($data['releaseIcon']) ? $data['releaseIcon'] : null;
        $this->container['releaseTime'] = isset($data['releaseTime']) ? $data['releaseTime'] : null;
        $this->container['activityLevel'] = isset($data['activityLevel']) ? $data['activityLevel'] : null;
        $this->container['activityLightLevel'] = isset($data['activityLightLevel']) ? $data['activityLightLevel'] : null;
        $this->container['destinationHash'] = isset($data['destinationHash']) ? $data['destinationHash'] : null;
        $this->container['placeHash'] = isset($data['placeHash']) ? $data['placeHash'] : null;
        $this->container['activityTypeHash'] = isset($data['activityTypeHash']) ? $data['activityTypeHash'] : null;
        $this->container['tier'] = isset($data['tier']) ? $data['tier'] : null;
        $this->container['pgcrImage'] = isset($data['pgcrImage']) ? $data['pgcrImage'] : null;
        $this->container['rewards'] = isset($data['rewards']) ? $data['rewards'] : null;
        $this->container['modifiers'] = isset($data['modifiers']) ? $data['modifiers'] : null;
        $this->container['isPlaylist'] = isset($data['isPlaylist']) ? $data['isPlaylist'] : null;
        $this->container['challenges'] = isset($data['challenges']) ? $data['challenges'] : null;
        $this->container['optionalUnlockStrings'] = isset($data['optionalUnlockStrings']) ? $data['optionalUnlockStrings'] : null;
        $this->container['playlistItems'] = isset($data['playlistItems']) ? $data['playlistItems'] : null;
        $this->container['activityGraphList'] = isset($data['activityGraphList']) ? $data['activityGraphList'] : null;
        $this->container['matchmaking'] = isset($data['matchmaking']) ? $data['matchmaking'] : null;
        $this->container['guidedGame'] = isset($data['guidedGame']) ? $data['guidedGame'] : null;
        $this->container['directActivityModeHash'] = isset($data['directActivityModeHash']) ? $data['directActivityModeHash'] : null;
        $this->container['directActivityModeType'] = isset($data['directActivityModeType']) ? $data['directActivityModeType'] : null;
        $this->container['loadouts'] = isset($data['loadouts']) ? $data['loadouts'] : null;
        $this->container['activityModeHashes'] = isset($data['activityModeHashes']) ? $data['activityModeHashes'] : null;
        $this->container['activityModeTypes'] = isset($data['activityModeTypes']) ? $data['activityModeTypes'] : null;
        $this->container['isPvP'] = isset($data['isPvP']) ? $data['isPvP'] : null;
        $this->container['insertionPoints'] = isset($data['insertionPoints']) ? $data['insertionPoints'] : null;
        $this->container['activityLocationMappings'] = isset($data['activityLocationMappings']) ? $data['activityLocationMappings'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['redacted'] = isset($data['redacted']) ? $data['redacted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectActivityModeTypeAllowableValues();
        if (!is_null($this->container['directActivityModeType']) && !in_array($this->container['directActivityModeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'directActivityModeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDirectActivityModeTypeAllowableValues();
        if (!is_null($this->container['directActivityModeType']) && !in_array($this->container['directActivityModeType'], $allowedValues, true)) {
            return false;
        }
        return true;
    }


    /**
     * Gets displayProperties
     *
     * @return object
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param object $displayProperties The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets originalDisplayProperties
     *
     * @return object
     */
    public function getOriginalDisplayProperties()
    {
        return $this->container['originalDisplayProperties'];
    }

    /**
     * Sets originalDisplayProperties
     *
     * @param object $originalDisplayProperties The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).
     *
     * @return $this
     */
    public function setOriginalDisplayProperties($originalDisplayProperties)
    {
        $this->container['originalDisplayProperties'] = $originalDisplayProperties;

        return $this;
    }

    /**
     * Gets selectionScreenDisplayProperties
     *
     * @return object
     */
    public function getSelectionScreenDisplayProperties()
    {
        return $this->container['selectionScreenDisplayProperties'];
    }

    /**
     * Sets selectionScreenDisplayProperties
     *
     * @param object $selectionScreenDisplayProperties The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.
     *
     * @return $this
     */
    public function setSelectionScreenDisplayProperties($selectionScreenDisplayProperties)
    {
        $this->container['selectionScreenDisplayProperties'] = $selectionScreenDisplayProperties;

        return $this;
    }

    /**
     * Gets releaseIcon
     *
     * @return string
     */
    public function getReleaseIcon()
    {
        return $this->container['releaseIcon'];
    }

    /**
     * Sets releaseIcon
     *
     * @param string $releaseIcon If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.
     *
     * @return $this
     */
    public function setReleaseIcon($releaseIcon)
    {
        $this->container['releaseIcon'] = $releaseIcon;

        return $this;
    }

    /**
     * Gets releaseTime
     *
     * @return int
     */
    public function getReleaseTime()
    {
        return $this->container['releaseTime'];
    }

    /**
     * Sets releaseTime
     *
     * @param int $releaseTime If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.
     *
     * @return $this
     */
    public function setReleaseTime($releaseTime)
    {
        $this->container['releaseTime'] = $releaseTime;

        return $this;
    }

    /**
     * Gets activityLevel
     *
     * @return int
     */
    public function getActivityLevel()
    {
        return $this->container['activityLevel'];
    }

    /**
     * Sets activityLevel
     *
     * @param int $activityLevel The difficulty level of the activity.
     *
     * @return $this
     */
    public function setActivityLevel($activityLevel)
    {
        $this->container['activityLevel'] = $activityLevel;

        return $this;
    }

    /**
     * Gets activityLightLevel
     *
     * @return int
     */
    public function getActivityLightLevel()
    {
        return $this->container['activityLightLevel'];
    }

    /**
     * Sets activityLightLevel
     *
     * @param int $activityLightLevel The recommended light level for this activity.
     *
     * @return $this
     */
    public function setActivityLightLevel($activityLightLevel)
    {
        $this->container['activityLightLevel'] = $activityLightLevel;

        return $this;
    }

    /**
     * Gets destinationHash
     *
     * @return int
     */
    public function getDestinationHash()
    {
        return $this->container['destinationHash'];
    }

    /**
     * Sets destinationHash
     *
     * @param int $destinationHash The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.
     *
     * @return $this
     */
    public function setDestinationHash($destinationHash)
    {
        $this->container['destinationHash'] = $destinationHash;

        return $this;
    }

    /**
     * Gets placeHash
     *
     * @return int
     */
    public function getPlaceHash()
    {
        return $this->container['placeHash'];
    }

    /**
     * Sets placeHash
     *
     * @param int $placeHash The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.
     *
     * @return $this
     */
    public function setPlaceHash($placeHash)
    {
        $this->container['placeHash'] = $placeHash;

        return $this;
    }

    /**
     * Gets activityTypeHash
     *
     * @return int
     */
    public function getActivityTypeHash()
    {
        return $this->container['activityTypeHash'];
    }

    /**
     * Sets activityTypeHash
     *
     * @param int $activityTypeHash The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.
     *
     * @return $this
     */
    public function setActivityTypeHash($activityTypeHash)
    {
        $this->container['activityTypeHash'] = $activityTypeHash;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return int
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param int $tier The difficulty tier of the activity.
     *
     * @return $this
     */
    public function setTier($tier)
    {
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets pgcrImage
     *
     * @return string
     */
    public function getPgcrImage()
    {
        return $this->container['pgcrImage'];
    }

    /**
     * Sets pgcrImage
     *
     * @param string $pgcrImage When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.
     *
     * @return $this
     */
    public function setPgcrImage($pgcrImage)
    {
        $this->container['pgcrImage'] = $pgcrImage;

        return $this;
    }

    /**
     * Gets rewards
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityRewardDefinition[]
     */
    public function getRewards()
    {
        return $this->container['rewards'];
    }

    /**
     * Sets rewards
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityRewardDefinition[] $rewards The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)
     *
     * @return $this
     */
    public function setRewards($rewards)
    {
        $this->container['rewards'] = $rewards;

        return $this;
    }

    /**
     * Gets modifiers
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityModifierReferenceDefinition[]
     */
    public function getModifiers()
    {
        return $this->container['modifiers'];
    }

    /**
     * Sets modifiers
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityModifierReferenceDefinition[] $modifiers Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.
     *
     * @return $this
     */
    public function setModifiers($modifiers)
    {
        $this->container['modifiers'] = $modifiers;

        return $this;
    }

    /**
     * Gets isPlaylist
     *
     * @return bool
     */
    public function getIsPlaylist()
    {
        return $this->container['isPlaylist'];
    }

    /**
     * Sets isPlaylist
     *
     * @param bool $isPlaylist If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.
     *
     * @return $this
     */
    public function setIsPlaylist($isPlaylist)
    {
        $this->container['isPlaylist'] = $isPlaylist;

        return $this;
    }

    /**
     * Gets challenges
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityChallengeDefinition[]
     */
    public function getChallenges()
    {
        return $this->container['challenges'];
    }

    /**
     * Sets challenges
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityChallengeDefinition[] $challenges An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.
     *
     * @return $this
     */
    public function setChallenges($challenges)
    {
        $this->container['challenges'] = $challenges;

        return $this;
    }

    /**
     * Gets optionalUnlockStrings
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityUnlockStringDefinition[]
     */
    public function getOptionalUnlockStrings()
    {
        return $this->container['optionalUnlockStrings'];
    }

    /**
     * Sets optionalUnlockStrings
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityUnlockStringDefinition[] $optionalUnlockStrings If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.
     *
     * @return $this
     */
    public function setOptionalUnlockStrings($optionalUnlockStrings)
    {
        $this->container['optionalUnlockStrings'] = $optionalUnlockStrings;

        return $this;
    }

    /**
     * Gets playlistItems
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityPlaylistItemDefinition[]
     */
    public function getPlaylistItems()
    {
        return $this->container['playlistItems'];
    }

    /**
     * Sets playlistItems
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityPlaylistItemDefinition[] $playlistItems Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.
     *
     * @return $this
     */
    public function setPlaylistItems($playlistItems)
    {
        $this->container['playlistItems'] = $playlistItems;

        return $this;
    }

    /**
     * Gets activityGraphList
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[]
     */
    public function getActivityGraphList()
    {
        return $this->container['activityGraphList'];
    }

    /**
     * Sets activityGraphList
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityGraphListEntryDefinition[] $activityGraphList Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.
     *
     * @return $this
     */
    public function setActivityGraphList($activityGraphList)
    {
        $this->container['activityGraphList'] = $activityGraphList;

        return $this;
    }

    /**
     * Gets matchmaking
     *
     * @return object
     */
    public function getMatchmaking()
    {
        return $this->container['matchmaking'];
    }

    /**
     * Sets matchmaking
     *
     * @param object $matchmaking This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.
     *
     * @return $this
     */
    public function setMatchmaking($matchmaking)
    {
        $this->container['matchmaking'] = $matchmaking;

        return $this;
    }

    /**
     * Gets guidedGame
     *
     * @return object
     */
    public function getGuidedGame()
    {
        return $this->container['guidedGame'];
    }

    /**
     * Sets guidedGame
     *
     * @param object $guidedGame This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.
     *
     * @return $this
     */
    public function setGuidedGame($guidedGame)
    {
        $this->container['guidedGame'] = $guidedGame;

        return $this;
    }

    /**
     * Gets directActivityModeHash
     *
     * @return int
     */
    public function getDirectActivityModeHash()
    {
        return $this->container['directActivityModeHash'];
    }

    /**
     * Sets directActivityModeHash
     *
     * @param int $directActivityModeHash If this activity had an activity mode directly defined on it, this will be the hash of that mode.
     *
     * @return $this
     */
    public function setDirectActivityModeHash($directActivityModeHash)
    {
        $this->container['directActivityModeHash'] = $directActivityModeHash;

        return $this;
    }

    /**
     * Gets directActivityModeType
     *
     * @return int
     */
    public function getDirectActivityModeType()
    {
        return $this->container['directActivityModeType'];
    }

    /**
     * Sets directActivityModeType
     *
     * @param int $directActivityModeType If the activity had an activity mode directly defined on it, this will be the enum value of that mode.
     *
     * @return $this
     */
    public function setDirectActivityModeType($directActivityModeType)
    {
        $allowedValues = $this->getDirectActivityModeTypeAllowableValues();
        if (!is_null($directActivityModeType) && !in_array($directActivityModeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'directActivityModeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['directActivityModeType'] = $directActivityModeType;

        return $this;
    }

    /**
     * Gets loadouts
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityLoadoutRequirementSet[]
     */
    public function getLoadouts()
    {
        return $this->container['loadouts'];
    }

    /**
     * Sets loadouts
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityLoadoutRequirementSet[] $loadouts The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.
     *
     * @return $this
     */
    public function setLoadouts($loadouts)
    {
        $this->container['loadouts'] = $loadouts;

        return $this;
    }

    /**
     * Gets activityModeHashes
     *
     * @return int[]
     */
    public function getActivityModeHashes()
    {
        return $this->container['activityModeHashes'];
    }

    /**
     * Sets activityModeHashes
     *
     * @param int[] $activityModeHashes The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.
     *
     * @return $this
     */
    public function setActivityModeHashes($activityModeHashes)
    {
        $this->container['activityModeHashes'] = $activityModeHashes;

        return $this;
    }

    /**
     * Gets activityModeTypes
     *
     * @return \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[]
     */
    public function getActivityModeTypes()
    {
        return $this->container['activityModeTypes'];
    }

    /**
     * Sets activityModeTypes
     *
     * @param \Bungie\Model\DestinyHistoricalStatsDefinitionsDestinyActivityModeType[] $activityModeTypes The activity modes - if any - in enum form. Because we can't seem to escape the enums.
     *
     * @return $this
     */
    public function setActivityModeTypes($activityModeTypes)
    {
        $this->container['activityModeTypes'] = $activityModeTypes;

        return $this;
    }

    /**
     * Gets isPvP
     *
     * @return bool
     */
    public function getIsPvP()
    {
        return $this->container['isPvP'];
    }

    /**
     * Sets isPvP
     *
     * @param bool $isPvP If true, this activity is a PVP activity or playlist.
     *
     * @return $this
     */
    public function setIsPvP($isPvP)
    {
        $this->container['isPvP'] = $isPvP;

        return $this;
    }

    /**
     * Gets insertionPoints
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyActivityInsertionPointDefinition[]
     */
    public function getInsertionPoints()
    {
        return $this->container['insertionPoints'];
    }

    /**
     * Sets insertionPoints
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyActivityInsertionPointDefinition[] $insertionPoints The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.
     *
     * @return $this
     */
    public function setInsertionPoints($insertionPoints)
    {
        $this->container['insertionPoints'] = $insertionPoints;

        return $this;
    }

    /**
     * Gets activityLocationMappings
     *
     * @return \Bungie\Model\DestinyConstantsDestinyEnvironmentLocationMapping[]
     */
    public function getActivityLocationMappings()
    {
        return $this->container['activityLocationMappings'];
    }

    /**
     * Sets activityLocationMappings
     *
     * @param \Bungie\Model\DestinyConstantsDestinyEnvironmentLocationMapping[] $activityLocationMappings A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.
     *
     * @return $this
     */
    public function setActivityLocationMappings($activityLocationMappings)
    {
        $this->container['activityLocationMappings'] = $activityLocationMappings;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return int
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param int $hash The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index The index of the entity as it was found in the investment tables.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets redacted
     *
     * @return bool
     */
    public function getRedacted()
    {
        return $this->container['redacted'];
    }

    /**
     * Sets redacted
     *
     * @param bool $redacted If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     *
     * @return $this
     */
    public function setRedacted($redacted)
    {
        $this->container['redacted'] = $redacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


