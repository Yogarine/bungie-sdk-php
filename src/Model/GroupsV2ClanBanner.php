<?php
/**
 * GroupsV2ClanBanner
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupsV2ClanBanner Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsV2ClanBanner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupsV2.ClanBanner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'decalId' => 'int',
        'decalColorId' => 'int',
        'decalBackgroundColorId' => 'int',
        'gonfalonId' => 'int',
        'gonfalonColorId' => 'int',
        'gonfalonDetailId' => 'int',
        'gonfalonDetailColorId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'decalId' => 'uint32',
        'decalColorId' => 'uint32',
        'decalBackgroundColorId' => 'uint32',
        'gonfalonId' => 'uint32',
        'gonfalonColorId' => 'uint32',
        'gonfalonDetailId' => 'uint32',
        'gonfalonDetailColorId' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'decalId' => 'decalId',
        'decalColorId' => 'decalColorId',
        'decalBackgroundColorId' => 'decalBackgroundColorId',
        'gonfalonId' => 'gonfalonId',
        'gonfalonColorId' => 'gonfalonColorId',
        'gonfalonDetailId' => 'gonfalonDetailId',
        'gonfalonDetailColorId' => 'gonfalonDetailColorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'decalId' => 'setDecalId',
        'decalColorId' => 'setDecalColorId',
        'decalBackgroundColorId' => 'setDecalBackgroundColorId',
        'gonfalonId' => 'setGonfalonId',
        'gonfalonColorId' => 'setGonfalonColorId',
        'gonfalonDetailId' => 'setGonfalonDetailId',
        'gonfalonDetailColorId' => 'setGonfalonDetailColorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'decalId' => 'getDecalId',
        'decalColorId' => 'getDecalColorId',
        'decalBackgroundColorId' => 'getDecalBackgroundColorId',
        'gonfalonId' => 'getGonfalonId',
        'gonfalonColorId' => 'getGonfalonColorId',
        'gonfalonDetailId' => 'getGonfalonDetailId',
        'gonfalonDetailColorId' => 'getGonfalonDetailColorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['decalId'] = isset($data['decalId']) ? $data['decalId'] : null;
        $this->container['decalColorId'] = isset($data['decalColorId']) ? $data['decalColorId'] : null;
        $this->container['decalBackgroundColorId'] = isset($data['decalBackgroundColorId']) ? $data['decalBackgroundColorId'] : null;
        $this->container['gonfalonId'] = isset($data['gonfalonId']) ? $data['gonfalonId'] : null;
        $this->container['gonfalonColorId'] = isset($data['gonfalonColorId']) ? $data['gonfalonColorId'] : null;
        $this->container['gonfalonDetailId'] = isset($data['gonfalonDetailId']) ? $data['gonfalonDetailId'] : null;
        $this->container['gonfalonDetailColorId'] = isset($data['gonfalonDetailColorId']) ? $data['gonfalonDetailColorId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets decalId
     *
     * @return int
     */
    public function getDecalId()
    {
        return $this->container['decalId'];
    }

    /**
     * Sets decalId
     *
     * @param int $decalId decalId
     *
     * @return $this
     */
    public function setDecalId($decalId)
    {
        $this->container['decalId'] = $decalId;

        return $this;
    }

    /**
     * Gets decalColorId
     *
     * @return int
     */
    public function getDecalColorId()
    {
        return $this->container['decalColorId'];
    }

    /**
     * Sets decalColorId
     *
     * @param int $decalColorId decalColorId
     *
     * @return $this
     */
    public function setDecalColorId($decalColorId)
    {
        $this->container['decalColorId'] = $decalColorId;

        return $this;
    }

    /**
     * Gets decalBackgroundColorId
     *
     * @return int
     */
    public function getDecalBackgroundColorId()
    {
        return $this->container['decalBackgroundColorId'];
    }

    /**
     * Sets decalBackgroundColorId
     *
     * @param int $decalBackgroundColorId decalBackgroundColorId
     *
     * @return $this
     */
    public function setDecalBackgroundColorId($decalBackgroundColorId)
    {
        $this->container['decalBackgroundColorId'] = $decalBackgroundColorId;

        return $this;
    }

    /**
     * Gets gonfalonId
     *
     * @return int
     */
    public function getGonfalonId()
    {
        return $this->container['gonfalonId'];
    }

    /**
     * Sets gonfalonId
     *
     * @param int $gonfalonId gonfalonId
     *
     * @return $this
     */
    public function setGonfalonId($gonfalonId)
    {
        $this->container['gonfalonId'] = $gonfalonId;

        return $this;
    }

    /**
     * Gets gonfalonColorId
     *
     * @return int
     */
    public function getGonfalonColorId()
    {
        return $this->container['gonfalonColorId'];
    }

    /**
     * Sets gonfalonColorId
     *
     * @param int $gonfalonColorId gonfalonColorId
     *
     * @return $this
     */
    public function setGonfalonColorId($gonfalonColorId)
    {
        $this->container['gonfalonColorId'] = $gonfalonColorId;

        return $this;
    }

    /**
     * Gets gonfalonDetailId
     *
     * @return int
     */
    public function getGonfalonDetailId()
    {
        return $this->container['gonfalonDetailId'];
    }

    /**
     * Sets gonfalonDetailId
     *
     * @param int $gonfalonDetailId gonfalonDetailId
     *
     * @return $this
     */
    public function setGonfalonDetailId($gonfalonDetailId)
    {
        $this->container['gonfalonDetailId'] = $gonfalonDetailId;

        return $this;
    }

    /**
     * Gets gonfalonDetailColorId
     *
     * @return int
     */
    public function getGonfalonDetailColorId()
    {
        return $this->container['gonfalonDetailColorId'];
    }

    /**
     * Sets gonfalonDetailColorId
     *
     * @param int $gonfalonDetailColorId gonfalonDetailColorId
     *
     * @return $this
     */
    public function setGonfalonDetailColorId($gonfalonDetailColorId)
    {
        $this->container['gonfalonDetailColorId'] = $gonfalonDetailColorId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


