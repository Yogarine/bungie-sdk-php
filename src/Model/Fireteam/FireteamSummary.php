<?php
/**
 * FireteamSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.17.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Fireteam;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * FireteamSummary Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FireteamSummary implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fireteam.FireteamSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fireteamId' => 'int',
        'groupId' => 'int',
        'platform' => 'int',
        'activityType' => 'int',
        'isImmediate' => 'bool',
        'scheduledTime' => '\DateTime',
        'ownerMembershipId' => 'int',
        'playerSlotCount' => 'int',
        'alternateSlotCount' => 'int',
        'availablePlayerSlotCount' => 'int',
        'availableAlternateSlotCount' => 'int',
        'title' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'isPublic' => 'bool',
        'locale' => 'string',
        'isValid' => 'bool',
        'datePlayerModified' => '\DateTime',
        'titleBeforeModeration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'fireteamId' => 'int64',
        'groupId' => 'int64',
        'platform' => 'byte',
        'activityType' => 'int32',
        'isImmediate' => null,
        'scheduledTime' => 'date-time',
        'ownerMembershipId' => 'int64',
        'playerSlotCount' => 'int32',
        'alternateSlotCount' => 'int32',
        'availablePlayerSlotCount' => 'int32',
        'availableAlternateSlotCount' => 'int32',
        'title' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'isPublic' => null,
        'locale' => null,
        'isValid' => null,
        'datePlayerModified' => 'date-time',
        'titleBeforeModeration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fireteamId' => 'fireteamId',
        'groupId' => 'groupId',
        'platform' => 'platform',
        'activityType' => 'activityType',
        'isImmediate' => 'isImmediate',
        'scheduledTime' => 'scheduledTime',
        'ownerMembershipId' => 'ownerMembershipId',
        'playerSlotCount' => 'playerSlotCount',
        'alternateSlotCount' => 'alternateSlotCount',
        'availablePlayerSlotCount' => 'availablePlayerSlotCount',
        'availableAlternateSlotCount' => 'availableAlternateSlotCount',
        'title' => 'title',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'isPublic' => 'isPublic',
        'locale' => 'locale',
        'isValid' => 'isValid',
        'datePlayerModified' => 'datePlayerModified',
        'titleBeforeModeration' => 'titleBeforeModeration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fireteamId' => 'setFireteamId',
        'groupId' => 'setGroupId',
        'platform' => 'setPlatform',
        'activityType' => 'setActivityType',
        'isImmediate' => 'setIsImmediate',
        'scheduledTime' => 'setScheduledTime',
        'ownerMembershipId' => 'setOwnerMembershipId',
        'playerSlotCount' => 'setPlayerSlotCount',
        'alternateSlotCount' => 'setAlternateSlotCount',
        'availablePlayerSlotCount' => 'setAvailablePlayerSlotCount',
        'availableAlternateSlotCount' => 'setAvailableAlternateSlotCount',
        'title' => 'setTitle',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'isPublic' => 'setIsPublic',
        'locale' => 'setLocale',
        'isValid' => 'setIsValid',
        'datePlayerModified' => 'setDatePlayerModified',
        'titleBeforeModeration' => 'setTitleBeforeModeration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fireteamId' => 'getFireteamId',
        'groupId' => 'getGroupId',
        'platform' => 'getPlatform',
        'activityType' => 'getActivityType',
        'isImmediate' => 'getIsImmediate',
        'scheduledTime' => 'getScheduledTime',
        'ownerMembershipId' => 'getOwnerMembershipId',
        'playerSlotCount' => 'getPlayerSlotCount',
        'alternateSlotCount' => 'getAlternateSlotCount',
        'availablePlayerSlotCount' => 'getAvailablePlayerSlotCount',
        'availableAlternateSlotCount' => 'getAvailableAlternateSlotCount',
        'title' => 'getTitle',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'isPublic' => 'getIsPublic',
        'locale' => 'getLocale',
        'isValid' => 'getIsValid',
        'datePlayerModified' => 'getDatePlayerModified',
        'titleBeforeModeration' => 'getTitleBeforeModeration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fireteamId'] = isset($data['fireteamId']) ? $data['fireteamId'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['activityType'] = isset($data['activityType']) ? $data['activityType'] : null;
        $this->container['isImmediate'] = isset($data['isImmediate']) ? $data['isImmediate'] : null;
        $this->container['scheduledTime'] = isset($data['scheduledTime']) ? $data['scheduledTime'] : null;
        $this->container['ownerMembershipId'] = isset($data['ownerMembershipId']) ? $data['ownerMembershipId'] : null;
        $this->container['playerSlotCount'] = isset($data['playerSlotCount']) ? $data['playerSlotCount'] : null;
        $this->container['alternateSlotCount'] = isset($data['alternateSlotCount']) ? $data['alternateSlotCount'] : null;
        $this->container['availablePlayerSlotCount'] = isset($data['availablePlayerSlotCount']) ? $data['availablePlayerSlotCount'] : null;
        $this->container['availableAlternateSlotCount'] = isset($data['availableAlternateSlotCount']) ? $data['availableAlternateSlotCount'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['isValid'] = isset($data['isValid']) ? $data['isValid'] : null;
        $this->container['datePlayerModified'] = isset($data['datePlayerModified']) ? $data['datePlayerModified'] : null;
        $this->container['titleBeforeModeration'] = isset($data['titleBeforeModeration']) ? $data['titleBeforeModeration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fireteamId
     *
     * @return int|null
     */
    public function getFireteamId()
    {
        return $this->container['fireteamId'];
    }

    /**
     * Sets fireteamId
     *
     * @param int|null $fireteamId fireteamId
     *
     * @return $this
     */
    public function setFireteamId($fireteamId)
    {
        $this->container['fireteamId'] = $fireteamId;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param int|null $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return int|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param int|null $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets activityType
     *
     * @return int|null
     */
    public function getActivityType()
    {
        return $this->container['activityType'];
    }

    /**
     * Sets activityType
     *
     * @param int|null $activityType activityType
     *
     * @return $this
     */
    public function setActivityType($activityType)
    {
        $this->container['activityType'] = $activityType;

        return $this;
    }

    /**
     * Gets isImmediate
     *
     * @return bool|null
     */
    public function getIsImmediate()
    {
        return $this->container['isImmediate'];
    }

    /**
     * Sets isImmediate
     *
     * @param bool|null $isImmediate isImmediate
     *
     * @return $this
     */
    public function setIsImmediate($isImmediate)
    {
        $this->container['isImmediate'] = $isImmediate;

        return $this;
    }

    /**
     * Gets scheduledTime
     *
     * @return \DateTime|null
     */
    public function getScheduledTime()
    {
        return $this->container['scheduledTime'];
    }

    /**
     * Sets scheduledTime
     *
     * @param \DateTime|null $scheduledTime scheduledTime
     *
     * @return $this
     */
    public function setScheduledTime($scheduledTime)
    {
        $this->container['scheduledTime'] = $scheduledTime;

        return $this;
    }

    /**
     * Gets ownerMembershipId
     *
     * @return int|null
     */
    public function getOwnerMembershipId()
    {
        return $this->container['ownerMembershipId'];
    }

    /**
     * Sets ownerMembershipId
     *
     * @param int|null $ownerMembershipId ownerMembershipId
     *
     * @return $this
     */
    public function setOwnerMembershipId($ownerMembershipId)
    {
        $this->container['ownerMembershipId'] = $ownerMembershipId;

        return $this;
    }

    /**
     * Gets playerSlotCount
     *
     * @return int|null
     */
    public function getPlayerSlotCount()
    {
        return $this->container['playerSlotCount'];
    }

    /**
     * Sets playerSlotCount
     *
     * @param int|null $playerSlotCount playerSlotCount
     *
     * @return $this
     */
    public function setPlayerSlotCount($playerSlotCount)
    {
        $this->container['playerSlotCount'] = $playerSlotCount;

        return $this;
    }

    /**
     * Gets alternateSlotCount
     *
     * @return int|null
     */
    public function getAlternateSlotCount()
    {
        return $this->container['alternateSlotCount'];
    }

    /**
     * Sets alternateSlotCount
     *
     * @param int|null $alternateSlotCount alternateSlotCount
     *
     * @return $this
     */
    public function setAlternateSlotCount($alternateSlotCount)
    {
        $this->container['alternateSlotCount'] = $alternateSlotCount;

        return $this;
    }

    /**
     * Gets availablePlayerSlotCount
     *
     * @return int|null
     */
    public function getAvailablePlayerSlotCount()
    {
        return $this->container['availablePlayerSlotCount'];
    }

    /**
     * Sets availablePlayerSlotCount
     *
     * @param int|null $availablePlayerSlotCount availablePlayerSlotCount
     *
     * @return $this
     */
    public function setAvailablePlayerSlotCount($availablePlayerSlotCount)
    {
        $this->container['availablePlayerSlotCount'] = $availablePlayerSlotCount;

        return $this;
    }

    /**
     * Gets availableAlternateSlotCount
     *
     * @return int|null
     */
    public function getAvailableAlternateSlotCount()
    {
        return $this->container['availableAlternateSlotCount'];
    }

    /**
     * Sets availableAlternateSlotCount
     *
     * @param int|null $availableAlternateSlotCount availableAlternateSlotCount
     *
     * @return $this
     */
    public function setAvailableAlternateSlotCount($availableAlternateSlotCount)
    {
        $this->container['availableAlternateSlotCount'] = $availableAlternateSlotCount;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime|null
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime|null $dateModified dateModified
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool|null $isPublic isPublic
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets isValid
     *
     * @return bool|null
     */
    public function getIsValid()
    {
        return $this->container['isValid'];
    }

    /**
     * Sets isValid
     *
     * @param bool|null $isValid isValid
     *
     * @return $this
     */
    public function setIsValid($isValid)
    {
        $this->container['isValid'] = $isValid;

        return $this;
    }

    /**
     * Gets datePlayerModified
     *
     * @return \DateTime|null
     */
    public function getDatePlayerModified()
    {
        return $this->container['datePlayerModified'];
    }

    /**
     * Sets datePlayerModified
     *
     * @param \DateTime|null $datePlayerModified datePlayerModified
     *
     * @return $this
     */
    public function setDatePlayerModified($datePlayerModified)
    {
        $this->container['datePlayerModified'] = $datePlayerModified;

        return $this;
    }

    /**
     * Gets titleBeforeModeration
     *
     * @return string|null
     */
    public function getTitleBeforeModeration()
    {
        return $this->container['titleBeforeModeration'];
    }

    /**
     * Sets titleBeforeModeration
     *
     * @param string|null $titleBeforeModeration titleBeforeModeration
     *
     * @return $this
     */
    public function setTitleBeforeModeration($titleBeforeModeration)
    {
        $this->container['titleBeforeModeration'] = $titleBeforeModeration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


