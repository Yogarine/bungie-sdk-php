<?php
/**
 * DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyVendorDisplayPropertiesDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'largeIcon' => 'string',
        'subtitle' => 'string',
        'originalIcon' => 'string',
        'requirementsDisplay' => '\Bungie\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[]',
        'smallTransparentIcon' => 'string',
        'mapIcon' => 'string',
        'largeTransparentIcon' => 'string',
        'description' => 'string',
        'name' => 'string',
        'icon' => 'string',
        'hasIcon' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'largeIcon' => null,
        'subtitle' => null,
        'originalIcon' => null,
        'requirementsDisplay' => null,
        'smallTransparentIcon' => null,
        'mapIcon' => null,
        'largeTransparentIcon' => null,
        'description' => null,
        'name' => null,
        'icon' => null,
        'hasIcon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'largeIcon' => 'largeIcon',
        'subtitle' => 'subtitle',
        'originalIcon' => 'originalIcon',
        'requirementsDisplay' => 'requirementsDisplay',
        'smallTransparentIcon' => 'smallTransparentIcon',
        'mapIcon' => 'mapIcon',
        'largeTransparentIcon' => 'largeTransparentIcon',
        'description' => 'description',
        'name' => 'name',
        'icon' => 'icon',
        'hasIcon' => 'hasIcon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'largeIcon' => 'setLargeIcon',
        'subtitle' => 'setSubtitle',
        'originalIcon' => 'setOriginalIcon',
        'requirementsDisplay' => 'setRequirementsDisplay',
        'smallTransparentIcon' => 'setSmallTransparentIcon',
        'mapIcon' => 'setMapIcon',
        'largeTransparentIcon' => 'setLargeTransparentIcon',
        'description' => 'setDescription',
        'name' => 'setName',
        'icon' => 'setIcon',
        'hasIcon' => 'setHasIcon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'largeIcon' => 'getLargeIcon',
        'subtitle' => 'getSubtitle',
        'originalIcon' => 'getOriginalIcon',
        'requirementsDisplay' => 'getRequirementsDisplay',
        'smallTransparentIcon' => 'getSmallTransparentIcon',
        'mapIcon' => 'getMapIcon',
        'largeTransparentIcon' => 'getLargeTransparentIcon',
        'description' => 'getDescription',
        'name' => 'getName',
        'icon' => 'getIcon',
        'hasIcon' => 'getHasIcon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['largeIcon'] = isset($data['largeIcon']) ? $data['largeIcon'] : null;
        $this->container['subtitle'] = isset($data['subtitle']) ? $data['subtitle'] : null;
        $this->container['originalIcon'] = isset($data['originalIcon']) ? $data['originalIcon'] : null;
        $this->container['requirementsDisplay'] = isset($data['requirementsDisplay']) ? $data['requirementsDisplay'] : null;
        $this->container['smallTransparentIcon'] = isset($data['smallTransparentIcon']) ? $data['smallTransparentIcon'] : null;
        $this->container['mapIcon'] = isset($data['mapIcon']) ? $data['mapIcon'] : null;
        $this->container['largeTransparentIcon'] = isset($data['largeTransparentIcon']) ? $data['largeTransparentIcon'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['hasIcon'] = isset($data['hasIcon']) ? $data['hasIcon'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets largeIcon
     *
     * @return string
     */
    public function getLargeIcon()
    {
        return $this->container['largeIcon'];
    }

    /**
     * Sets largeIcon
     *
     * @param string $largeIcon I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.
     *
     * @return $this
     */
    public function setLargeIcon($largeIcon)
    {
        $this->container['largeIcon'] = $largeIcon;

        return $this;
    }

    /**
     * Gets subtitle
     *
     * @return string
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     *
     * @param string $subtitle subtitle
     *
     * @return $this
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets originalIcon
     *
     * @return string
     */
    public function getOriginalIcon()
    {
        return $this->container['originalIcon'];
    }

    /**
     * Sets originalIcon
     *
     * @param string $originalIcon If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.
     *
     * @return $this
     */
    public function setOriginalIcon($originalIcon)
    {
        $this->container['originalIcon'] = $originalIcon;

        return $this;
    }

    /**
     * Gets requirementsDisplay
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[]
     */
    public function getRequirementsDisplay()
    {
        return $this->container['requirementsDisplay'];
    }

    /**
     * Sets requirementsDisplay
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[] $requirementsDisplay Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
     *
     * @return $this
     */
    public function setRequirementsDisplay($requirementsDisplay)
    {
        $this->container['requirementsDisplay'] = $requirementsDisplay;

        return $this;
    }

    /**
     * Gets smallTransparentIcon
     *
     * @return string
     */
    public function getSmallTransparentIcon()
    {
        return $this->container['smallTransparentIcon'];
    }

    /**
     * Sets smallTransparentIcon
     *
     * @param string $smallTransparentIcon This is the icon used in parts of the game UI such as the vendor's waypoint.
     *
     * @return $this
     */
    public function setSmallTransparentIcon($smallTransparentIcon)
    {
        $this->container['smallTransparentIcon'] = $smallTransparentIcon;

        return $this;
    }

    /**
     * Gets mapIcon
     *
     * @return string
     */
    public function getMapIcon()
    {
        return $this->container['mapIcon'];
    }

    /**
     * Sets mapIcon
     *
     * @param string $mapIcon This is the icon used in the map overview, when the vendor is located on the map.
     *
     * @return $this
     */
    public function setMapIcon($mapIcon)
    {
        $this->container['mapIcon'] = $mapIcon;

        return $this;
    }

    /**
     * Gets largeTransparentIcon
     *
     * @return string
     */
    public function getLargeTransparentIcon()
    {
        return $this->container['largeTransparentIcon'];
    }

    /**
     * Sets largeTransparentIcon
     *
     * @param string $largeTransparentIcon This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.
     *
     * @return $this
     */
    public function setLargeTransparentIcon($largeTransparentIcon)
    {
        $this->container['largeTransparentIcon'] = $largeTransparentIcon;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets hasIcon
     *
     * @return bool
     */
    public function getHasIcon()
    {
        return $this->container['hasIcon'];
    }

    /**
     * Sets hasIcon
     *
     * @param bool $hasIcon hasIcon
     *
     * @return $this
     */
    public function setHasIcon($hasIcon)
    {
        $this->container['hasIcon'] = $hasIcon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


