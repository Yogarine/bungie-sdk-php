<?php
/**
 * DestinySpecialItemType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model;
use \Bungie\ObjectSerializer;

/**
 * DestinySpecialItemType Class Doc Comment
 *
 * @category Class
 * @description As you run into items that need to be classified for Milestone purposes in ways that we cannot infer via direct data, add a new classification here and use a string constant to represent it in the local item config file.  NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinySpecialItemType
{
    /**
     * Possible values of this enum
     */
    const NONE = 0;
    const SPECIALCURRENCY = 1;
    const ARMOR = 8;
    const WEAPON = 9;
    const ENGRAM = 23;
    const CONSUMABLE = 24;
    const EXCHANGEMATERIAL = 25;
    const MISSIONREWARD = 27;
    const CURRENCY = 29;
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::NONE,
            self::SPECIALCURRENCY,
            self::ARMOR,
            self::WEAPON,
            self::ENGRAM,
            self::CONSUMABLE,
            self::EXCHANGEMATERIAL,
            self::MISSIONREWARD,
            self::CURRENCY,
        ];
    }
}


