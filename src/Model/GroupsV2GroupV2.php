<?php
/**
 * GroupsV2GroupV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupsV2GroupV2 Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsV2GroupV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupsV2.GroupV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'groupId' => 'int',
        'name' => 'string',
        'groupType' => '\Bungie\Model\GroupsV2GroupType',
        'membershipIdCreated' => 'int',
        'creationDate' => '\DateTime',
        'modificationDate' => '\DateTime',
        'about' => 'string',
        'tags' => 'string[]',
        'memberCount' => 'int',
        'isPublic' => 'bool',
        'isPublicTopicAdminOnly' => 'bool',
        'motto' => 'string',
        'allowChat' => 'bool',
        'isDefaultPostPublic' => 'bool',
        'chatSecurity' => '\Bungie\Model\GroupsV2ChatSecuritySetting',
        'locale' => 'string',
        'avatarImageIndex' => 'int',
        'homepage' => '\Bungie\Model\GroupsV2GroupHomepage',
        'membershipOption' => '\Bungie\Model\GroupsV2MembershipOption',
        'defaultPublicity' => '\Bungie\Model\GroupsV2GroupPostPublicity',
        'theme' => 'string',
        'bannerPath' => 'string',
        'avatarPath' => 'string',
        'conversationId' => 'int',
        'enableInvitationMessagingForAdmins' => 'bool',
        'banExpireDate' => '\DateTime',
        'features' => '\Bungie\Model\GroupsV2GroupFeatures',
        'clanInfo' => '\Bungie\Model\GroupsV2GroupV2ClanInfoAndInvestment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'groupId' => 'int64',
        'name' => null,
        'groupType' => null,
        'membershipIdCreated' => 'int64',
        'creationDate' => 'date-time',
        'modificationDate' => 'date-time',
        'about' => null,
        'tags' => null,
        'memberCount' => 'int32',
        'isPublic' => null,
        'isPublicTopicAdminOnly' => null,
        'motto' => null,
        'allowChat' => null,
        'isDefaultPostPublic' => null,
        'chatSecurity' => null,
        'locale' => null,
        'avatarImageIndex' => 'int32',
        'homepage' => null,
        'membershipOption' => null,
        'defaultPublicity' => null,
        'theme' => null,
        'bannerPath' => null,
        'avatarPath' => null,
        'conversationId' => 'int64',
        'enableInvitationMessagingForAdmins' => null,
        'banExpireDate' => 'date-time',
        'features' => null,
        'clanInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'groupId' => 'groupId',
        'name' => 'name',
        'groupType' => 'groupType',
        'membershipIdCreated' => 'membershipIdCreated',
        'creationDate' => 'creationDate',
        'modificationDate' => 'modificationDate',
        'about' => 'about',
        'tags' => 'tags',
        'memberCount' => 'memberCount',
        'isPublic' => 'isPublic',
        'isPublicTopicAdminOnly' => 'isPublicTopicAdminOnly',
        'motto' => 'motto',
        'allowChat' => 'allowChat',
        'isDefaultPostPublic' => 'isDefaultPostPublic',
        'chatSecurity' => 'chatSecurity',
        'locale' => 'locale',
        'avatarImageIndex' => 'avatarImageIndex',
        'homepage' => 'homepage',
        'membershipOption' => 'membershipOption',
        'defaultPublicity' => 'defaultPublicity',
        'theme' => 'theme',
        'bannerPath' => 'bannerPath',
        'avatarPath' => 'avatarPath',
        'conversationId' => 'conversationId',
        'enableInvitationMessagingForAdmins' => 'enableInvitationMessagingForAdmins',
        'banExpireDate' => 'banExpireDate',
        'features' => 'features',
        'clanInfo' => 'clanInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'groupId' => 'setGroupId',
        'name' => 'setName',
        'groupType' => 'setGroupType',
        'membershipIdCreated' => 'setMembershipIdCreated',
        'creationDate' => 'setCreationDate',
        'modificationDate' => 'setModificationDate',
        'about' => 'setAbout',
        'tags' => 'setTags',
        'memberCount' => 'setMemberCount',
        'isPublic' => 'setIsPublic',
        'isPublicTopicAdminOnly' => 'setIsPublicTopicAdminOnly',
        'motto' => 'setMotto',
        'allowChat' => 'setAllowChat',
        'isDefaultPostPublic' => 'setIsDefaultPostPublic',
        'chatSecurity' => 'setChatSecurity',
        'locale' => 'setLocale',
        'avatarImageIndex' => 'setAvatarImageIndex',
        'homepage' => 'setHomepage',
        'membershipOption' => 'setMembershipOption',
        'defaultPublicity' => 'setDefaultPublicity',
        'theme' => 'setTheme',
        'bannerPath' => 'setBannerPath',
        'avatarPath' => 'setAvatarPath',
        'conversationId' => 'setConversationId',
        'enableInvitationMessagingForAdmins' => 'setEnableInvitationMessagingForAdmins',
        'banExpireDate' => 'setBanExpireDate',
        'features' => 'setFeatures',
        'clanInfo' => 'setClanInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'groupId' => 'getGroupId',
        'name' => 'getName',
        'groupType' => 'getGroupType',
        'membershipIdCreated' => 'getMembershipIdCreated',
        'creationDate' => 'getCreationDate',
        'modificationDate' => 'getModificationDate',
        'about' => 'getAbout',
        'tags' => 'getTags',
        'memberCount' => 'getMemberCount',
        'isPublic' => 'getIsPublic',
        'isPublicTopicAdminOnly' => 'getIsPublicTopicAdminOnly',
        'motto' => 'getMotto',
        'allowChat' => 'getAllowChat',
        'isDefaultPostPublic' => 'getIsDefaultPostPublic',
        'chatSecurity' => 'getChatSecurity',
        'locale' => 'getLocale',
        'avatarImageIndex' => 'getAvatarImageIndex',
        'homepage' => 'getHomepage',
        'membershipOption' => 'getMembershipOption',
        'defaultPublicity' => 'getDefaultPublicity',
        'theme' => 'getTheme',
        'bannerPath' => 'getBannerPath',
        'avatarPath' => 'getAvatarPath',
        'conversationId' => 'getConversationId',
        'enableInvitationMessagingForAdmins' => 'getEnableInvitationMessagingForAdmins',
        'banExpireDate' => 'getBanExpireDate',
        'features' => 'getFeatures',
        'clanInfo' => 'getClanInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['groupType'] = isset($data['groupType']) ? $data['groupType'] : null;
        $this->container['membershipIdCreated'] = isset($data['membershipIdCreated']) ? $data['membershipIdCreated'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['modificationDate'] = isset($data['modificationDate']) ? $data['modificationDate'] : null;
        $this->container['about'] = isset($data['about']) ? $data['about'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['memberCount'] = isset($data['memberCount']) ? $data['memberCount'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['isPublicTopicAdminOnly'] = isset($data['isPublicTopicAdminOnly']) ? $data['isPublicTopicAdminOnly'] : null;
        $this->container['motto'] = isset($data['motto']) ? $data['motto'] : null;
        $this->container['allowChat'] = isset($data['allowChat']) ? $data['allowChat'] : null;
        $this->container['isDefaultPostPublic'] = isset($data['isDefaultPostPublic']) ? $data['isDefaultPostPublic'] : null;
        $this->container['chatSecurity'] = isset($data['chatSecurity']) ? $data['chatSecurity'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['avatarImageIndex'] = isset($data['avatarImageIndex']) ? $data['avatarImageIndex'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['membershipOption'] = isset($data['membershipOption']) ? $data['membershipOption'] : null;
        $this->container['defaultPublicity'] = isset($data['defaultPublicity']) ? $data['defaultPublicity'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['bannerPath'] = isset($data['bannerPath']) ? $data['bannerPath'] : null;
        $this->container['avatarPath'] = isset($data['avatarPath']) ? $data['avatarPath'] : null;
        $this->container['conversationId'] = isset($data['conversationId']) ? $data['conversationId'] : null;
        $this->container['enableInvitationMessagingForAdmins'] = isset($data['enableInvitationMessagingForAdmins']) ? $data['enableInvitationMessagingForAdmins'] : null;
        $this->container['banExpireDate'] = isset($data['banExpireDate']) ? $data['banExpireDate'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['clanInfo'] = isset($data['clanInfo']) ? $data['clanInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets groupId
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param int $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets groupType
     *
     * @return \Bungie\Model\GroupsV2GroupType
     */
    public function getGroupType()
    {
        return $this->container['groupType'];
    }

    /**
     * Sets groupType
     *
     * @param \Bungie\Model\GroupsV2GroupType $groupType groupType
     *
     * @return $this
     */
    public function setGroupType($groupType)
    {
        $this->container['groupType'] = $groupType;

        return $this;
    }

    /**
     * Gets membershipIdCreated
     *
     * @return int
     */
    public function getMembershipIdCreated()
    {
        return $this->container['membershipIdCreated'];
    }

    /**
     * Sets membershipIdCreated
     *
     * @param int $membershipIdCreated membershipIdCreated
     *
     * @return $this
     */
    public function setMembershipIdCreated($membershipIdCreated)
    {
        $this->container['membershipIdCreated'] = $membershipIdCreated;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets modificationDate
     *
     * @return \DateTime
     */
    public function getModificationDate()
    {
        return $this->container['modificationDate'];
    }

    /**
     * Sets modificationDate
     *
     * @param \DateTime $modificationDate modificationDate
     *
     * @return $this
     */
    public function setModificationDate($modificationDate)
    {
        $this->container['modificationDate'] = $modificationDate;

        return $this;
    }

    /**
     * Gets about
     *
     * @return string
     */
    public function getAbout()
    {
        return $this->container['about'];
    }

    /**
     * Sets about
     *
     * @param string $about about
     *
     * @return $this
     */
    public function setAbout($about)
    {
        $this->container['about'] = $about;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets memberCount
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['memberCount'];
    }

    /**
     * Sets memberCount
     *
     * @param int $memberCount memberCount
     *
     * @return $this
     */
    public function setMemberCount($memberCount)
    {
        $this->container['memberCount'] = $memberCount;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool $isPublic isPublic
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets isPublicTopicAdminOnly
     *
     * @return bool
     */
    public function getIsPublicTopicAdminOnly()
    {
        return $this->container['isPublicTopicAdminOnly'];
    }

    /**
     * Sets isPublicTopicAdminOnly
     *
     * @param bool $isPublicTopicAdminOnly isPublicTopicAdminOnly
     *
     * @return $this
     */
    public function setIsPublicTopicAdminOnly($isPublicTopicAdminOnly)
    {
        $this->container['isPublicTopicAdminOnly'] = $isPublicTopicAdminOnly;

        return $this;
    }

    /**
     * Gets motto
     *
     * @return string
     */
    public function getMotto()
    {
        return $this->container['motto'];
    }

    /**
     * Sets motto
     *
     * @param string $motto motto
     *
     * @return $this
     */
    public function setMotto($motto)
    {
        $this->container['motto'] = $motto;

        return $this;
    }

    /**
     * Gets allowChat
     *
     * @return bool
     */
    public function getAllowChat()
    {
        return $this->container['allowChat'];
    }

    /**
     * Sets allowChat
     *
     * @param bool $allowChat allowChat
     *
     * @return $this
     */
    public function setAllowChat($allowChat)
    {
        $this->container['allowChat'] = $allowChat;

        return $this;
    }

    /**
     * Gets isDefaultPostPublic
     *
     * @return bool
     */
    public function getIsDefaultPostPublic()
    {
        return $this->container['isDefaultPostPublic'];
    }

    /**
     * Sets isDefaultPostPublic
     *
     * @param bool $isDefaultPostPublic isDefaultPostPublic
     *
     * @return $this
     */
    public function setIsDefaultPostPublic($isDefaultPostPublic)
    {
        $this->container['isDefaultPostPublic'] = $isDefaultPostPublic;

        return $this;
    }

    /**
     * Gets chatSecurity
     *
     * @return \Bungie\Model\GroupsV2ChatSecuritySetting
     */
    public function getChatSecurity()
    {
        return $this->container['chatSecurity'];
    }

    /**
     * Sets chatSecurity
     *
     * @param \Bungie\Model\GroupsV2ChatSecuritySetting $chatSecurity chatSecurity
     *
     * @return $this
     */
    public function setChatSecurity($chatSecurity)
    {
        $this->container['chatSecurity'] = $chatSecurity;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets avatarImageIndex
     *
     * @return int
     */
    public function getAvatarImageIndex()
    {
        return $this->container['avatarImageIndex'];
    }

    /**
     * Sets avatarImageIndex
     *
     * @param int $avatarImageIndex avatarImageIndex
     *
     * @return $this
     */
    public function setAvatarImageIndex($avatarImageIndex)
    {
        $this->container['avatarImageIndex'] = $avatarImageIndex;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return \Bungie\Model\GroupsV2GroupHomepage
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param \Bungie\Model\GroupsV2GroupHomepage $homepage homepage
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets membershipOption
     *
     * @return \Bungie\Model\GroupsV2MembershipOption
     */
    public function getMembershipOption()
    {
        return $this->container['membershipOption'];
    }

    /**
     * Sets membershipOption
     *
     * @param \Bungie\Model\GroupsV2MembershipOption $membershipOption membershipOption
     *
     * @return $this
     */
    public function setMembershipOption($membershipOption)
    {
        $this->container['membershipOption'] = $membershipOption;

        return $this;
    }

    /**
     * Gets defaultPublicity
     *
     * @return \Bungie\Model\GroupsV2GroupPostPublicity
     */
    public function getDefaultPublicity()
    {
        return $this->container['defaultPublicity'];
    }

    /**
     * Sets defaultPublicity
     *
     * @param \Bungie\Model\GroupsV2GroupPostPublicity $defaultPublicity defaultPublicity
     *
     * @return $this
     */
    public function setDefaultPublicity($defaultPublicity)
    {
        $this->container['defaultPublicity'] = $defaultPublicity;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string $theme theme
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets bannerPath
     *
     * @return string
     */
    public function getBannerPath()
    {
        return $this->container['bannerPath'];
    }

    /**
     * Sets bannerPath
     *
     * @param string $bannerPath bannerPath
     *
     * @return $this
     */
    public function setBannerPath($bannerPath)
    {
        $this->container['bannerPath'] = $bannerPath;

        return $this;
    }

    /**
     * Gets avatarPath
     *
     * @return string
     */
    public function getAvatarPath()
    {
        return $this->container['avatarPath'];
    }

    /**
     * Sets avatarPath
     *
     * @param string $avatarPath avatarPath
     *
     * @return $this
     */
    public function setAvatarPath($avatarPath)
    {
        $this->container['avatarPath'] = $avatarPath;

        return $this;
    }

    /**
     * Gets conversationId
     *
     * @return int
     */
    public function getConversationId()
    {
        return $this->container['conversationId'];
    }

    /**
     * Sets conversationId
     *
     * @param int $conversationId conversationId
     *
     * @return $this
     */
    public function setConversationId($conversationId)
    {
        $this->container['conversationId'] = $conversationId;

        return $this;
    }

    /**
     * Gets enableInvitationMessagingForAdmins
     *
     * @return bool
     */
    public function getEnableInvitationMessagingForAdmins()
    {
        return $this->container['enableInvitationMessagingForAdmins'];
    }

    /**
     * Sets enableInvitationMessagingForAdmins
     *
     * @param bool $enableInvitationMessagingForAdmins enableInvitationMessagingForAdmins
     *
     * @return $this
     */
    public function setEnableInvitationMessagingForAdmins($enableInvitationMessagingForAdmins)
    {
        $this->container['enableInvitationMessagingForAdmins'] = $enableInvitationMessagingForAdmins;

        return $this;
    }

    /**
     * Gets banExpireDate
     *
     * @return \DateTime
     */
    public function getBanExpireDate()
    {
        return $this->container['banExpireDate'];
    }

    /**
     * Sets banExpireDate
     *
     * @param \DateTime $banExpireDate banExpireDate
     *
     * @return $this
     */
    public function setBanExpireDate($banExpireDate)
    {
        $this->container['banExpireDate'] = $banExpireDate;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Bungie\Model\GroupsV2GroupFeatures
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Bungie\Model\GroupsV2GroupFeatures $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets clanInfo
     *
     * @return \Bungie\Model\GroupsV2GroupV2ClanInfoAndInvestment
     */
    public function getClanInfo()
    {
        return $this->container['clanInfo'];
    }

    /**
     * Sets clanInfo
     *
     * @param \Bungie\Model\GroupsV2GroupV2ClanInfoAndInvestment $clanInfo clanInfo
     *
     * @return $this
     */
    public function setClanInfo($clanInfo)
    {
        $this->container['clanInfo'] = $clanInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


