<?php
/**
 * DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition Class Doc Comment
 *
 * @category Class
 * @description The definition for an \&quot;inventory flyout\&quot;: a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Destiny.Definitions.DestinyVendorInventoryFlyoutDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lockedDescription' => 'string',
        'displayProperties' => 'object',
        'buckets' => '\Bungie\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[]',
        'flyoutId' => 'int',
        'suppressNewness' => 'bool',
        'equipmentSlotHash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lockedDescription' => null,
        'displayProperties' => null,
        'buckets' => null,
        'flyoutId' => 'uint32',
        'suppressNewness' => null,
        'equipmentSlotHash' => 'uint32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lockedDescription' => 'lockedDescription',
        'displayProperties' => 'displayProperties',
        'buckets' => 'buckets',
        'flyoutId' => 'flyoutId',
        'suppressNewness' => 'suppressNewness',
        'equipmentSlotHash' => 'equipmentSlotHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lockedDescription' => 'setLockedDescription',
        'displayProperties' => 'setDisplayProperties',
        'buckets' => 'setBuckets',
        'flyoutId' => 'setFlyoutId',
        'suppressNewness' => 'setSuppressNewness',
        'equipmentSlotHash' => 'setEquipmentSlotHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lockedDescription' => 'getLockedDescription',
        'displayProperties' => 'getDisplayProperties',
        'buckets' => 'getBuckets',
        'flyoutId' => 'getFlyoutId',
        'suppressNewness' => 'getSuppressNewness',
        'equipmentSlotHash' => 'getEquipmentSlotHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lockedDescription'] = isset($data['lockedDescription']) ? $data['lockedDescription'] : null;
        $this->container['displayProperties'] = isset($data['displayProperties']) ? $data['displayProperties'] : null;
        $this->container['buckets'] = isset($data['buckets']) ? $data['buckets'] : null;
        $this->container['flyoutId'] = isset($data['flyoutId']) ? $data['flyoutId'] : null;
        $this->container['suppressNewness'] = isset($data['suppressNewness']) ? $data['suppressNewness'] : null;
        $this->container['equipmentSlotHash'] = isset($data['equipmentSlotHash']) ? $data['equipmentSlotHash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets lockedDescription
     *
     * @return string
     */
    public function getLockedDescription()
    {
        return $this->container['lockedDescription'];
    }

    /**
     * Sets lockedDescription
     *
     * @param string $lockedDescription If the flyout is locked, this is the reason why.
     *
     * @return $this
     */
    public function setLockedDescription($lockedDescription)
    {
        $this->container['lockedDescription'] = $lockedDescription;

        return $this;
    }

    /**
     * Gets displayProperties
     *
     * @return object
     */
    public function getDisplayProperties()
    {
        return $this->container['displayProperties'];
    }

    /**
     * Sets displayProperties
     *
     * @param object $displayProperties The title and other common properties of the flyout.
     *
     * @return $this
     */
    public function setDisplayProperties($displayProperties)
    {
        $this->container['displayProperties'] = $displayProperties;

        return $this;
    }

    /**
     * Gets buckets
     *
     * @return \Bungie\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[]
     */
    public function getBuckets()
    {
        return $this->container['buckets'];
    }

    /**
     * Sets buckets
     *
     * @param \Bungie\Model\DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[] $buckets A list of inventory buckets and other metadata to show on the screen.
     *
     * @return $this
     */
    public function setBuckets($buckets)
    {
        $this->container['buckets'] = $buckets;

        return $this;
    }

    /**
     * Gets flyoutId
     *
     * @return int
     */
    public function getFlyoutId()
    {
        return $this->container['flyoutId'];
    }

    /**
     * Sets flyoutId
     *
     * @param int $flyoutId An identifier for the flyout, in case anything else needs to refer to them.
     *
     * @return $this
     */
    public function setFlyoutId($flyoutId)
    {
        $this->container['flyoutId'] = $flyoutId;

        return $this;
    }

    /**
     * Gets suppressNewness
     *
     * @return bool
     */
    public function getSuppressNewness()
    {
        return $this->container['suppressNewness'];
    }

    /**
     * Sets suppressNewness
     *
     * @param bool $suppressNewness If this is true, don't show any of the glistening \"this is a new item\" UI elements, like we show on the inventory items themselves in in-game UI.
     *
     * @return $this
     */
    public function setSuppressNewness($suppressNewness)
    {
        $this->container['suppressNewness'] = $suppressNewness;

        return $this;
    }

    /**
     * Gets equipmentSlotHash
     *
     * @return int
     */
    public function getEquipmentSlotHash()
    {
        return $this->container['equipmentSlotHash'];
    }

    /**
     * Sets equipmentSlotHash
     *
     * @param int $equipmentSlotHash If this flyout is meant to show you the contents of the player's equipment slot, this is the slot to show.
     *
     * @return $this
     */
    public function setEquipmentSlotHash($equipmentSlotHash)
    {
        $this->container['equipmentSlotHash'] = $equipmentSlotHash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


