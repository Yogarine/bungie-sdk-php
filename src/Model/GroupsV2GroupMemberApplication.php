<?php
/**
 * GroupsV2GroupMemberApplication
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupsV2GroupMemberApplication Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsV2GroupMemberApplication implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupsV2.GroupMemberApplication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'groupId' => 'int',
        'creationDate' => '\DateTime',
        'resolveState' => '\Bungie\Model\GroupsV2GroupApplicationResolveState',
        'resolveDate' => '\DateTime',
        'resolvedByMembershipId' => 'int',
        'requestMessage' => 'string',
        'resolveMessage' => 'string',
        'destinyUserInfo' => '\Bungie\Model\UserUserInfoCard',
        'bungieNetUserInfo' => '\Bungie\Model\UserUserInfoCard'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'groupId' => 'int64',
        'creationDate' => 'date-time',
        'resolveState' => null,
        'resolveDate' => 'date-time',
        'resolvedByMembershipId' => 'int64',
        'requestMessage' => null,
        'resolveMessage' => null,
        'destinyUserInfo' => null,
        'bungieNetUserInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'groupId' => 'groupId',
        'creationDate' => 'creationDate',
        'resolveState' => 'resolveState',
        'resolveDate' => 'resolveDate',
        'resolvedByMembershipId' => 'resolvedByMembershipId',
        'requestMessage' => 'requestMessage',
        'resolveMessage' => 'resolveMessage',
        'destinyUserInfo' => 'destinyUserInfo',
        'bungieNetUserInfo' => 'bungieNetUserInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'groupId' => 'setGroupId',
        'creationDate' => 'setCreationDate',
        'resolveState' => 'setResolveState',
        'resolveDate' => 'setResolveDate',
        'resolvedByMembershipId' => 'setResolvedByMembershipId',
        'requestMessage' => 'setRequestMessage',
        'resolveMessage' => 'setResolveMessage',
        'destinyUserInfo' => 'setDestinyUserInfo',
        'bungieNetUserInfo' => 'setBungieNetUserInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'groupId' => 'getGroupId',
        'creationDate' => 'getCreationDate',
        'resolveState' => 'getResolveState',
        'resolveDate' => 'getResolveDate',
        'resolvedByMembershipId' => 'getResolvedByMembershipId',
        'requestMessage' => 'getRequestMessage',
        'resolveMessage' => 'getResolveMessage',
        'destinyUserInfo' => 'getDestinyUserInfo',
        'bungieNetUserInfo' => 'getBungieNetUserInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['resolveState'] = isset($data['resolveState']) ? $data['resolveState'] : null;
        $this->container['resolveDate'] = isset($data['resolveDate']) ? $data['resolveDate'] : null;
        $this->container['resolvedByMembershipId'] = isset($data['resolvedByMembershipId']) ? $data['resolvedByMembershipId'] : null;
        $this->container['requestMessage'] = isset($data['requestMessage']) ? $data['requestMessage'] : null;
        $this->container['resolveMessage'] = isset($data['resolveMessage']) ? $data['resolveMessage'] : null;
        $this->container['destinyUserInfo'] = isset($data['destinyUserInfo']) ? $data['destinyUserInfo'] : null;
        $this->container['bungieNetUserInfo'] = isset($data['bungieNetUserInfo']) ? $data['bungieNetUserInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets groupId
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param int $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets resolveState
     *
     * @return \Bungie\Model\GroupsV2GroupApplicationResolveState
     */
    public function getResolveState()
    {
        return $this->container['resolveState'];
    }

    /**
     * Sets resolveState
     *
     * @param \Bungie\Model\GroupsV2GroupApplicationResolveState $resolveState resolveState
     *
     * @return $this
     */
    public function setResolveState($resolveState)
    {
        $this->container['resolveState'] = $resolveState;

        return $this;
    }

    /**
     * Gets resolveDate
     *
     * @return \DateTime
     */
    public function getResolveDate()
    {
        return $this->container['resolveDate'];
    }

    /**
     * Sets resolveDate
     *
     * @param \DateTime $resolveDate resolveDate
     *
     * @return $this
     */
    public function setResolveDate($resolveDate)
    {
        $this->container['resolveDate'] = $resolveDate;

        return $this;
    }

    /**
     * Gets resolvedByMembershipId
     *
     * @return int
     */
    public function getResolvedByMembershipId()
    {
        return $this->container['resolvedByMembershipId'];
    }

    /**
     * Sets resolvedByMembershipId
     *
     * @param int $resolvedByMembershipId resolvedByMembershipId
     *
     * @return $this
     */
    public function setResolvedByMembershipId($resolvedByMembershipId)
    {
        $this->container['resolvedByMembershipId'] = $resolvedByMembershipId;

        return $this;
    }

    /**
     * Gets requestMessage
     *
     * @return string
     */
    public function getRequestMessage()
    {
        return $this->container['requestMessage'];
    }

    /**
     * Sets requestMessage
     *
     * @param string $requestMessage requestMessage
     *
     * @return $this
     */
    public function setRequestMessage($requestMessage)
    {
        $this->container['requestMessage'] = $requestMessage;

        return $this;
    }

    /**
     * Gets resolveMessage
     *
     * @return string
     */
    public function getResolveMessage()
    {
        return $this->container['resolveMessage'];
    }

    /**
     * Sets resolveMessage
     *
     * @param string $resolveMessage resolveMessage
     *
     * @return $this
     */
    public function setResolveMessage($resolveMessage)
    {
        $this->container['resolveMessage'] = $resolveMessage;

        return $this;
    }

    /**
     * Gets destinyUserInfo
     *
     * @return \Bungie\Model\UserUserInfoCard
     */
    public function getDestinyUserInfo()
    {
        return $this->container['destinyUserInfo'];
    }

    /**
     * Sets destinyUserInfo
     *
     * @param \Bungie\Model\UserUserInfoCard $destinyUserInfo destinyUserInfo
     *
     * @return $this
     */
    public function setDestinyUserInfo($destinyUserInfo)
    {
        $this->container['destinyUserInfo'] = $destinyUserInfo;

        return $this;
    }

    /**
     * Gets bungieNetUserInfo
     *
     * @return \Bungie\Model\UserUserInfoCard
     */
    public function getBungieNetUserInfo()
    {
        return $this->container['bungieNetUserInfo'];
    }

    /**
     * Sets bungieNetUserInfo
     *
     * @param \Bungie\Model\UserUserInfoCard $bungieNetUserInfo bungieNetUserInfo
     *
     * @return $this
     */
    public function setBungieNetUserInfo($bungieNetUserInfo)
    {
        $this->container['bungieNetUserInfo'] = $bungieNetUserInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


