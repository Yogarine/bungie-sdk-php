<?php
/**
 * TrendingTrendingEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bungie\Model;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * TrendingTrendingEntry Class Doc Comment
 *
 * @category Class
 * @description The list entry view for trending items. Returns just enough to show the item on the trending page.
 * @package  Bungie
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrendingTrendingEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Trending.TrendingEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'weight' => 'double',
        'isFeatured' => 'bool',
        'identifier' => 'string',
        'entityType' => 'object',
        'displayName' => 'string',
        'tagline' => 'string',
        'image' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'link' => 'string',
        'webmVideo' => 'string',
        'mp4Video' => 'string',
        'featureImage' => 'string',
        'items' => '\Bungie\Model\TrendingTrendingEntry[]',
        'creationDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'weight' => 'double',
        'isFeatured' => null,
        'identifier' => null,
        'entityType' => null,
        'displayName' => null,
        'tagline' => null,
        'image' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'link' => null,
        'webmVideo' => null,
        'mp4Video' => null,
        'featureImage' => null,
        'items' => null,
        'creationDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weight' => 'weight',
        'isFeatured' => 'isFeatured',
        'identifier' => 'identifier',
        'entityType' => 'entityType',
        'displayName' => 'displayName',
        'tagline' => 'tagline',
        'image' => 'image',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'link' => 'link',
        'webmVideo' => 'webmVideo',
        'mp4Video' => 'mp4Video',
        'featureImage' => 'featureImage',
        'items' => 'items',
        'creationDate' => 'creationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weight' => 'setWeight',
        'isFeatured' => 'setIsFeatured',
        'identifier' => 'setIdentifier',
        'entityType' => 'setEntityType',
        'displayName' => 'setDisplayName',
        'tagline' => 'setTagline',
        'image' => 'setImage',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'link' => 'setLink',
        'webmVideo' => 'setWebmVideo',
        'mp4Video' => 'setMp4Video',
        'featureImage' => 'setFeatureImage',
        'items' => 'setItems',
        'creationDate' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weight' => 'getWeight',
        'isFeatured' => 'getIsFeatured',
        'identifier' => 'getIdentifier',
        'entityType' => 'getEntityType',
        'displayName' => 'getDisplayName',
        'tagline' => 'getTagline',
        'image' => 'getImage',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'link' => 'getLink',
        'webmVideo' => 'getWebmVideo',
        'mp4Video' => 'getMp4Video',
        'featureImage' => 'getFeatureImage',
        'items' => 'getItems',
        'creationDate' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['isFeatured'] = isset($data['isFeatured']) ? $data['isFeatured'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['tagline'] = isset($data['tagline']) ? $data['tagline'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['webmVideo'] = isset($data['webmVideo']) ? $data['webmVideo'] : null;
        $this->container['mp4Video'] = isset($data['mp4Video']) ? $data['mp4Video'] : null;
        $this->container['featureImage'] = isset($data['featureImage']) ? $data['featureImage'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight The weighted score of this trending item.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets isFeatured
     *
     * @return bool
     */
    public function getIsFeatured()
    {
        return $this->container['isFeatured'];
    }

    /**
     * Sets isFeatured
     *
     * @param bool $isFeatured isFeatured
     *
     * @return $this
     */
    public function setIsFeatured($isFeatured)
    {
        $this->container['isFeatured'] = $isFeatured;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return object
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param object $entityType An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName The localized \"display name/article title/'primary localized identifier'\" of the entity.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string $tagline If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
     *
     * @return $this
     */
    public function setTagline($tagline)
    {
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate endDate
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets webmVideo
     *
     * @return string
     */
    public function getWebmVideo()
    {
        return $this->container['webmVideo'];
    }

    /**
     * Sets webmVideo
     *
     * @param string $webmVideo If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
     *
     * @return $this
     */
    public function setWebmVideo($webmVideo)
    {
        $this->container['webmVideo'] = $webmVideo;

        return $this;
    }

    /**
     * Gets mp4Video
     *
     * @return string
     */
    public function getMp4Video()
    {
        return $this->container['mp4Video'];
    }

    /**
     * Sets mp4Video
     *
     * @param string $mp4Video If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
     *
     * @return $this
     */
    public function setMp4Video($mp4Video)
    {
        $this->container['mp4Video'] = $mp4Video;

        return $this;
    }

    /**
     * Gets featureImage
     *
     * @return string
     */
    public function getFeatureImage()
    {
        return $this->container['featureImage'];
    }

    /**
     * Sets featureImage
     *
     * @param string $featureImage If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
     *
     * @return $this
     */
    public function setFeatureImage($featureImage)
    {
        $this->container['featureImage'] = $featureImage;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Bungie\Model\TrendingTrendingEntry[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Bungie\Model\TrendingTrendingEntry[] $items If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate If the entry has a date at which it was created, this is that date.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


