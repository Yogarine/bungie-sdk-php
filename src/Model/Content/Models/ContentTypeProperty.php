<?php
/**
 * ContentTypeProperty
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.4
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\Content\Models;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * ContentTypeProperty Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContentTypeProperty implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Content.Models.ContentTypeProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'readableName' => 'string',
        'value' => 'string',
        'propertyDescription' => 'string',
        'localizable' => 'bool',
        'fallback' => 'bool',
        'enabled' => 'bool',
        'order' => 'int',
        'visible' => 'bool',
        'isTitle' => 'bool',
        'required' => 'bool',
        'maxLength' => 'int',
        'maxByteLength' => 'int',
        'maxFileSize' => 'int',
        'regexp' => 'string',
        'validateAs' => 'string',
        'rssAttribute' => 'string',
        'visibleDependency' => 'string',
        'visibleOn' => 'string',
        'datatype' => 'int',
        'attributes' => 'map[string,string]',
        'childProperties' => '\Bungie\Model\Content\Models\ContentTypeProperty[]',
        'contentTypeAllowed' => 'string',
        'bindToProperty' => 'string',
        'boundRegex' => 'string',
        'representationSelection' => 'map[string,string]',
        'defaultValues' => '\Bungie\Model\Content\Models\ContentTypeDefaultValue[]',
        'isExternalAllowed' => 'bool',
        'propertySection' => 'string',
        'weight' => 'int',
        'entitytype' => 'string',
        'isCombo' => 'bool',
        'suppressProperty' => 'bool',
        'legalContentTypes' => 'string[]',
        'representationValidationString' => 'string',
        'minWidth' => 'int',
        'maxWidth' => 'int',
        'minHeight' => 'int',
        'maxHeight' => 'int',
        'isVideo' => 'bool',
        'isImage' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'readableName' => null,
        'value' => null,
        'propertyDescription' => null,
        'localizable' => null,
        'fallback' => null,
        'enabled' => null,
        'order' => 'int32',
        'visible' => null,
        'isTitle' => null,
        'required' => null,
        'maxLength' => 'int32',
        'maxByteLength' => 'int32',
        'maxFileSize' => 'int32',
        'regexp' => null,
        'validateAs' => null,
        'rssAttribute' => null,
        'visibleDependency' => null,
        'visibleOn' => null,
        'datatype' => 'int32',
        'attributes' => null,
        'childProperties' => null,
        'contentTypeAllowed' => null,
        'bindToProperty' => null,
        'boundRegex' => null,
        'representationSelection' => null,
        'defaultValues' => null,
        'isExternalAllowed' => null,
        'propertySection' => null,
        'weight' => 'int32',
        'entitytype' => null,
        'isCombo' => null,
        'suppressProperty' => null,
        'legalContentTypes' => null,
        'representationValidationString' => null,
        'minWidth' => 'int32',
        'maxWidth' => 'int32',
        'minHeight' => 'int32',
        'maxHeight' => 'int32',
        'isVideo' => null,
        'isImage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'readableName' => 'readableName',
        'value' => 'value',
        'propertyDescription' => 'propertyDescription',
        'localizable' => 'localizable',
        'fallback' => 'fallback',
        'enabled' => 'enabled',
        'order' => 'order',
        'visible' => 'visible',
        'isTitle' => 'isTitle',
        'required' => 'required',
        'maxLength' => 'maxLength',
        'maxByteLength' => 'maxByteLength',
        'maxFileSize' => 'maxFileSize',
        'regexp' => 'regexp',
        'validateAs' => 'validateAs',
        'rssAttribute' => 'rssAttribute',
        'visibleDependency' => 'visibleDependency',
        'visibleOn' => 'visibleOn',
        'datatype' => 'datatype',
        'attributes' => 'attributes',
        'childProperties' => 'childProperties',
        'contentTypeAllowed' => 'contentTypeAllowed',
        'bindToProperty' => 'bindToProperty',
        'boundRegex' => 'boundRegex',
        'representationSelection' => 'representationSelection',
        'defaultValues' => 'defaultValues',
        'isExternalAllowed' => 'isExternalAllowed',
        'propertySection' => 'propertySection',
        'weight' => 'weight',
        'entitytype' => 'entitytype',
        'isCombo' => 'isCombo',
        'suppressProperty' => 'suppressProperty',
        'legalContentTypes' => 'legalContentTypes',
        'representationValidationString' => 'representationValidationString',
        'minWidth' => 'minWidth',
        'maxWidth' => 'maxWidth',
        'minHeight' => 'minHeight',
        'maxHeight' => 'maxHeight',
        'isVideo' => 'isVideo',
        'isImage' => 'isImage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'readableName' => 'setReadableName',
        'value' => 'setValue',
        'propertyDescription' => 'setPropertyDescription',
        'localizable' => 'setLocalizable',
        'fallback' => 'setFallback',
        'enabled' => 'setEnabled',
        'order' => 'setOrder',
        'visible' => 'setVisible',
        'isTitle' => 'setIsTitle',
        'required' => 'setRequired',
        'maxLength' => 'setMaxLength',
        'maxByteLength' => 'setMaxByteLength',
        'maxFileSize' => 'setMaxFileSize',
        'regexp' => 'setRegexp',
        'validateAs' => 'setValidateAs',
        'rssAttribute' => 'setRssAttribute',
        'visibleDependency' => 'setVisibleDependency',
        'visibleOn' => 'setVisibleOn',
        'datatype' => 'setDatatype',
        'attributes' => 'setAttributes',
        'childProperties' => 'setChildProperties',
        'contentTypeAllowed' => 'setContentTypeAllowed',
        'bindToProperty' => 'setBindToProperty',
        'boundRegex' => 'setBoundRegex',
        'representationSelection' => 'setRepresentationSelection',
        'defaultValues' => 'setDefaultValues',
        'isExternalAllowed' => 'setIsExternalAllowed',
        'propertySection' => 'setPropertySection',
        'weight' => 'setWeight',
        'entitytype' => 'setEntitytype',
        'isCombo' => 'setIsCombo',
        'suppressProperty' => 'setSuppressProperty',
        'legalContentTypes' => 'setLegalContentTypes',
        'representationValidationString' => 'setRepresentationValidationString',
        'minWidth' => 'setMinWidth',
        'maxWidth' => 'setMaxWidth',
        'minHeight' => 'setMinHeight',
        'maxHeight' => 'setMaxHeight',
        'isVideo' => 'setIsVideo',
        'isImage' => 'setIsImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'readableName' => 'getReadableName',
        'value' => 'getValue',
        'propertyDescription' => 'getPropertyDescription',
        'localizable' => 'getLocalizable',
        'fallback' => 'getFallback',
        'enabled' => 'getEnabled',
        'order' => 'getOrder',
        'visible' => 'getVisible',
        'isTitle' => 'getIsTitle',
        'required' => 'getRequired',
        'maxLength' => 'getMaxLength',
        'maxByteLength' => 'getMaxByteLength',
        'maxFileSize' => 'getMaxFileSize',
        'regexp' => 'getRegexp',
        'validateAs' => 'getValidateAs',
        'rssAttribute' => 'getRssAttribute',
        'visibleDependency' => 'getVisibleDependency',
        'visibleOn' => 'getVisibleOn',
        'datatype' => 'getDatatype',
        'attributes' => 'getAttributes',
        'childProperties' => 'getChildProperties',
        'contentTypeAllowed' => 'getContentTypeAllowed',
        'bindToProperty' => 'getBindToProperty',
        'boundRegex' => 'getBoundRegex',
        'representationSelection' => 'getRepresentationSelection',
        'defaultValues' => 'getDefaultValues',
        'isExternalAllowed' => 'getIsExternalAllowed',
        'propertySection' => 'getPropertySection',
        'weight' => 'getWeight',
        'entitytype' => 'getEntitytype',
        'isCombo' => 'getIsCombo',
        'suppressProperty' => 'getSuppressProperty',
        'legalContentTypes' => 'getLegalContentTypes',
        'representationValidationString' => 'getRepresentationValidationString',
        'minWidth' => 'getMinWidth',
        'maxWidth' => 'getMaxWidth',
        'minHeight' => 'getMinHeight',
        'maxHeight' => 'getMaxHeight',
        'isVideo' => 'getIsVideo',
        'isImage' => 'getIsImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['readableName'] = isset($data['readableName']) ? $data['readableName'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['propertyDescription'] = isset($data['propertyDescription']) ? $data['propertyDescription'] : null;
        $this->container['localizable'] = isset($data['localizable']) ? $data['localizable'] : null;
        $this->container['fallback'] = isset($data['fallback']) ? $data['fallback'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['isTitle'] = isset($data['isTitle']) ? $data['isTitle'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['maxLength'] = isset($data['maxLength']) ? $data['maxLength'] : null;
        $this->container['maxByteLength'] = isset($data['maxByteLength']) ? $data['maxByteLength'] : null;
        $this->container['maxFileSize'] = isset($data['maxFileSize']) ? $data['maxFileSize'] : null;
        $this->container['regexp'] = isset($data['regexp']) ? $data['regexp'] : null;
        $this->container['validateAs'] = isset($data['validateAs']) ? $data['validateAs'] : null;
        $this->container['rssAttribute'] = isset($data['rssAttribute']) ? $data['rssAttribute'] : null;
        $this->container['visibleDependency'] = isset($data['visibleDependency']) ? $data['visibleDependency'] : null;
        $this->container['visibleOn'] = isset($data['visibleOn']) ? $data['visibleOn'] : null;
        $this->container['datatype'] = isset($data['datatype']) ? $data['datatype'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['childProperties'] = isset($data['childProperties']) ? $data['childProperties'] : null;
        $this->container['contentTypeAllowed'] = isset($data['contentTypeAllowed']) ? $data['contentTypeAllowed'] : null;
        $this->container['bindToProperty'] = isset($data['bindToProperty']) ? $data['bindToProperty'] : null;
        $this->container['boundRegex'] = isset($data['boundRegex']) ? $data['boundRegex'] : null;
        $this->container['representationSelection'] = isset($data['representationSelection']) ? $data['representationSelection'] : null;
        $this->container['defaultValues'] = isset($data['defaultValues']) ? $data['defaultValues'] : null;
        $this->container['isExternalAllowed'] = isset($data['isExternalAllowed']) ? $data['isExternalAllowed'] : null;
        $this->container['propertySection'] = isset($data['propertySection']) ? $data['propertySection'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['entitytype'] = isset($data['entitytype']) ? $data['entitytype'] : null;
        $this->container['isCombo'] = isset($data['isCombo']) ? $data['isCombo'] : null;
        $this->container['suppressProperty'] = isset($data['suppressProperty']) ? $data['suppressProperty'] : null;
        $this->container['legalContentTypes'] = isset($data['legalContentTypes']) ? $data['legalContentTypes'] : null;
        $this->container['representationValidationString'] = isset($data['representationValidationString']) ? $data['representationValidationString'] : null;
        $this->container['minWidth'] = isset($data['minWidth']) ? $data['minWidth'] : null;
        $this->container['maxWidth'] = isset($data['maxWidth']) ? $data['maxWidth'] : null;
        $this->container['minHeight'] = isset($data['minHeight']) ? $data['minHeight'] : null;
        $this->container['maxHeight'] = isset($data['maxHeight']) ? $data['maxHeight'] : null;
        $this->container['isVideo'] = isset($data['isVideo']) ? $data['isVideo'] : null;
        $this->container['isImage'] = isset($data['isImage']) ? $data['isImage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets readableName
     *
     * @return string|null
     */
    public function getReadableName()
    {
        return $this->container['readableName'];
    }

    /**
     * Sets readableName
     *
     * @param string|null $readableName readableName
     *
     * @return $this
     */
    public function setReadableName($readableName)
    {
        $this->container['readableName'] = $readableName;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets propertyDescription
     *
     * @return string|null
     */
    public function getPropertyDescription()
    {
        return $this->container['propertyDescription'];
    }

    /**
     * Sets propertyDescription
     *
     * @param string|null $propertyDescription propertyDescription
     *
     * @return $this
     */
    public function setPropertyDescription($propertyDescription)
    {
        $this->container['propertyDescription'] = $propertyDescription;

        return $this;
    }

    /**
     * Gets localizable
     *
     * @return bool|null
     */
    public function getLocalizable()
    {
        return $this->container['localizable'];
    }

    /**
     * Sets localizable
     *
     * @param bool|null $localizable localizable
     *
     * @return $this
     */
    public function setLocalizable($localizable)
    {
        $this->container['localizable'] = $localizable;

        return $this;
    }

    /**
     * Gets fallback
     *
     * @return bool|null
     */
    public function getFallback()
    {
        return $this->container['fallback'];
    }

    /**
     * Sets fallback
     *
     * @param bool|null $fallback fallback
     *
     * @return $this
     */
    public function setFallback($fallback)
    {
        $this->container['fallback'] = $fallback;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets isTitle
     *
     * @return bool|null
     */
    public function getIsTitle()
    {
        return $this->container['isTitle'];
    }

    /**
     * Sets isTitle
     *
     * @param bool|null $isTitle isTitle
     *
     * @return $this
     */
    public function setIsTitle($isTitle)
    {
        $this->container['isTitle'] = $isTitle;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets maxLength
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['maxLength'];
    }

    /**
     * Sets maxLength
     *
     * @param int|null $maxLength maxLength
     *
     * @return $this
     */
    public function setMaxLength($maxLength)
    {
        $this->container['maxLength'] = $maxLength;

        return $this;
    }

    /**
     * Gets maxByteLength
     *
     * @return int|null
     */
    public function getMaxByteLength()
    {
        return $this->container['maxByteLength'];
    }

    /**
     * Sets maxByteLength
     *
     * @param int|null $maxByteLength maxByteLength
     *
     * @return $this
     */
    public function setMaxByteLength($maxByteLength)
    {
        $this->container['maxByteLength'] = $maxByteLength;

        return $this;
    }

    /**
     * Gets maxFileSize
     *
     * @return int|null
     */
    public function getMaxFileSize()
    {
        return $this->container['maxFileSize'];
    }

    /**
     * Sets maxFileSize
     *
     * @param int|null $maxFileSize maxFileSize
     *
     * @return $this
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->container['maxFileSize'] = $maxFileSize;

        return $this;
    }

    /**
     * Gets regexp
     *
     * @return string|null
     */
    public function getRegexp()
    {
        return $this->container['regexp'];
    }

    /**
     * Sets regexp
     *
     * @param string|null $regexp regexp
     *
     * @return $this
     */
    public function setRegexp($regexp)
    {
        $this->container['regexp'] = $regexp;

        return $this;
    }

    /**
     * Gets validateAs
     *
     * @return string|null
     */
    public function getValidateAs()
    {
        return $this->container['validateAs'];
    }

    /**
     * Sets validateAs
     *
     * @param string|null $validateAs validateAs
     *
     * @return $this
     */
    public function setValidateAs($validateAs)
    {
        $this->container['validateAs'] = $validateAs;

        return $this;
    }

    /**
     * Gets rssAttribute
     *
     * @return string|null
     */
    public function getRssAttribute()
    {
        return $this->container['rssAttribute'];
    }

    /**
     * Sets rssAttribute
     *
     * @param string|null $rssAttribute rssAttribute
     *
     * @return $this
     */
    public function setRssAttribute($rssAttribute)
    {
        $this->container['rssAttribute'] = $rssAttribute;

        return $this;
    }

    /**
     * Gets visibleDependency
     *
     * @return string|null
     */
    public function getVisibleDependency()
    {
        return $this->container['visibleDependency'];
    }

    /**
     * Sets visibleDependency
     *
     * @param string|null $visibleDependency visibleDependency
     *
     * @return $this
     */
    public function setVisibleDependency($visibleDependency)
    {
        $this->container['visibleDependency'] = $visibleDependency;

        return $this;
    }

    /**
     * Gets visibleOn
     *
     * @return string|null
     */
    public function getVisibleOn()
    {
        return $this->container['visibleOn'];
    }

    /**
     * Sets visibleOn
     *
     * @param string|null $visibleOn visibleOn
     *
     * @return $this
     */
    public function setVisibleOn($visibleOn)
    {
        $this->container['visibleOn'] = $visibleOn;

        return $this;
    }

    /**
     * Gets datatype
     *
     * @return int|null
     */
    public function getDatatype()
    {
        return $this->container['datatype'];
    }

    /**
     * Sets datatype
     *
     * @param int|null $datatype datatype
     *
     * @return $this
     */
    public function setDatatype($datatype)
    {
        $this->container['datatype'] = $datatype;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string]|null $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets childProperties
     *
     * @return \Bungie\Model\Content\Models\ContentTypeProperty[]|null
     */
    public function getChildProperties()
    {
        return $this->container['childProperties'];
    }

    /**
     * Sets childProperties
     *
     * @param \Bungie\Model\Content\Models\ContentTypeProperty[]|null $childProperties childProperties
     *
     * @return $this
     */
    public function setChildProperties($childProperties)
    {
        $this->container['childProperties'] = $childProperties;

        return $this;
    }

    /**
     * Gets contentTypeAllowed
     *
     * @return string|null
     */
    public function getContentTypeAllowed()
    {
        return $this->container['contentTypeAllowed'];
    }

    /**
     * Sets contentTypeAllowed
     *
     * @param string|null $contentTypeAllowed contentTypeAllowed
     *
     * @return $this
     */
    public function setContentTypeAllowed($contentTypeAllowed)
    {
        $this->container['contentTypeAllowed'] = $contentTypeAllowed;

        return $this;
    }

    /**
     * Gets bindToProperty
     *
     * @return string|null
     */
    public function getBindToProperty()
    {
        return $this->container['bindToProperty'];
    }

    /**
     * Sets bindToProperty
     *
     * @param string|null $bindToProperty bindToProperty
     *
     * @return $this
     */
    public function setBindToProperty($bindToProperty)
    {
        $this->container['bindToProperty'] = $bindToProperty;

        return $this;
    }

    /**
     * Gets boundRegex
     *
     * @return string|null
     */
    public function getBoundRegex()
    {
        return $this->container['boundRegex'];
    }

    /**
     * Sets boundRegex
     *
     * @param string|null $boundRegex boundRegex
     *
     * @return $this
     */
    public function setBoundRegex($boundRegex)
    {
        $this->container['boundRegex'] = $boundRegex;

        return $this;
    }

    /**
     * Gets representationSelection
     *
     * @return map[string,string]|null
     */
    public function getRepresentationSelection()
    {
        return $this->container['representationSelection'];
    }

    /**
     * Sets representationSelection
     *
     * @param map[string,string]|null $representationSelection representationSelection
     *
     * @return $this
     */
    public function setRepresentationSelection($representationSelection)
    {
        $this->container['representationSelection'] = $representationSelection;

        return $this;
    }

    /**
     * Gets defaultValues
     *
     * @return \Bungie\Model\Content\Models\ContentTypeDefaultValue[]|null
     */
    public function getDefaultValues()
    {
        return $this->container['defaultValues'];
    }

    /**
     * Sets defaultValues
     *
     * @param \Bungie\Model\Content\Models\ContentTypeDefaultValue[]|null $defaultValues defaultValues
     *
     * @return $this
     */
    public function setDefaultValues($defaultValues)
    {
        $this->container['defaultValues'] = $defaultValues;

        return $this;
    }

    /**
     * Gets isExternalAllowed
     *
     * @return bool|null
     */
    public function getIsExternalAllowed()
    {
        return $this->container['isExternalAllowed'];
    }

    /**
     * Sets isExternalAllowed
     *
     * @param bool|null $isExternalAllowed isExternalAllowed
     *
     * @return $this
     */
    public function setIsExternalAllowed($isExternalAllowed)
    {
        $this->container['isExternalAllowed'] = $isExternalAllowed;

        return $this;
    }

    /**
     * Gets propertySection
     *
     * @return string|null
     */
    public function getPropertySection()
    {
        return $this->container['propertySection'];
    }

    /**
     * Sets propertySection
     *
     * @param string|null $propertySection propertySection
     *
     * @return $this
     */
    public function setPropertySection($propertySection)
    {
        $this->container['propertySection'] = $propertySection;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets entitytype
     *
     * @return string|null
     */
    public function getEntitytype()
    {
        return $this->container['entitytype'];
    }

    /**
     * Sets entitytype
     *
     * @param string|null $entitytype entitytype
     *
     * @return $this
     */
    public function setEntitytype($entitytype)
    {
        $this->container['entitytype'] = $entitytype;

        return $this;
    }

    /**
     * Gets isCombo
     *
     * @return bool|null
     */
    public function getIsCombo()
    {
        return $this->container['isCombo'];
    }

    /**
     * Sets isCombo
     *
     * @param bool|null $isCombo isCombo
     *
     * @return $this
     */
    public function setIsCombo($isCombo)
    {
        $this->container['isCombo'] = $isCombo;

        return $this;
    }

    /**
     * Gets suppressProperty
     *
     * @return bool|null
     */
    public function getSuppressProperty()
    {
        return $this->container['suppressProperty'];
    }

    /**
     * Sets suppressProperty
     *
     * @param bool|null $suppressProperty suppressProperty
     *
     * @return $this
     */
    public function setSuppressProperty($suppressProperty)
    {
        $this->container['suppressProperty'] = $suppressProperty;

        return $this;
    }

    /**
     * Gets legalContentTypes
     *
     * @return string[]|null
     */
    public function getLegalContentTypes()
    {
        return $this->container['legalContentTypes'];
    }

    /**
     * Sets legalContentTypes
     *
     * @param string[]|null $legalContentTypes legalContentTypes
     *
     * @return $this
     */
    public function setLegalContentTypes($legalContentTypes)
    {
        $this->container['legalContentTypes'] = $legalContentTypes;

        return $this;
    }

    /**
     * Gets representationValidationString
     *
     * @return string|null
     */
    public function getRepresentationValidationString()
    {
        return $this->container['representationValidationString'];
    }

    /**
     * Sets representationValidationString
     *
     * @param string|null $representationValidationString representationValidationString
     *
     * @return $this
     */
    public function setRepresentationValidationString($representationValidationString)
    {
        $this->container['representationValidationString'] = $representationValidationString;

        return $this;
    }

    /**
     * Gets minWidth
     *
     * @return int|null
     */
    public function getMinWidth()
    {
        return $this->container['minWidth'];
    }

    /**
     * Sets minWidth
     *
     * @param int|null $minWidth minWidth
     *
     * @return $this
     */
    public function setMinWidth($minWidth)
    {
        $this->container['minWidth'] = $minWidth;

        return $this;
    }

    /**
     * Gets maxWidth
     *
     * @return int|null
     */
    public function getMaxWidth()
    {
        return $this->container['maxWidth'];
    }

    /**
     * Sets maxWidth
     *
     * @param int|null $maxWidth maxWidth
     *
     * @return $this
     */
    public function setMaxWidth($maxWidth)
    {
        $this->container['maxWidth'] = $maxWidth;

        return $this;
    }

    /**
     * Gets minHeight
     *
     * @return int|null
     */
    public function getMinHeight()
    {
        return $this->container['minHeight'];
    }

    /**
     * Sets minHeight
     *
     * @param int|null $minHeight minHeight
     *
     * @return $this
     */
    public function setMinHeight($minHeight)
    {
        $this->container['minHeight'] = $minHeight;

        return $this;
    }

    /**
     * Gets maxHeight
     *
     * @return int|null
     */
    public function getMaxHeight()
    {
        return $this->container['maxHeight'];
    }

    /**
     * Sets maxHeight
     *
     * @param int|null $maxHeight maxHeight
     *
     * @return $this
     */
    public function setMaxHeight($maxHeight)
    {
        $this->container['maxHeight'] = $maxHeight;

        return $this;
    }

    /**
     * Gets isVideo
     *
     * @return bool|null
     */
    public function getIsVideo()
    {
        return $this->container['isVideo'];
    }

    /**
     * Sets isVideo
     *
     * @param bool|null $isVideo isVideo
     *
     * @return $this
     */
    public function setIsVideo($isVideo)
    {
        $this->container['isVideo'] = $isVideo;

        return $this;
    }

    /**
     * Gets isImage
     *
     * @return bool|null
     */
    public function getIsImage()
    {
        return $this->container['isImage'];
    }

    /**
     * Sets isImage
     *
     * @param bool|null $isImage isImage
     *
     * @return $this
     */
    public function setIsImage($isImage)
    {
        $this->container['isImage'] = $isImage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


