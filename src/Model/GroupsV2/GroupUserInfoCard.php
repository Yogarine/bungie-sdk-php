<?php
/**
 * GroupUserInfoCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.17.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\GroupsV2;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupUserInfoCard Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupUserInfoCard implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupUserInfoCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lastSeenDisplayName' => 'string',
        'lastSeenDisplayNameType' => 'int',
        'supplementalDisplayName' => 'string',
        'iconPath' => 'string',
        'crossSaveOverride' => 'int',
        'applicableMembershipTypes' => 'int[]',
        'isPublic' => 'bool',
        'membershipType' => 'int',
        'membershipId' => 'int',
        'displayName' => 'string',
        'bungieGlobalDisplayName' => 'string',
        'bungieGlobalDisplayNameCode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'lastSeenDisplayName' => null,
        'lastSeenDisplayNameType' => 'int32',
        'supplementalDisplayName' => null,
        'iconPath' => null,
        'crossSaveOverride' => 'int32',
        'applicableMembershipTypes' => 'int32',
        'isPublic' => null,
        'membershipType' => 'int32',
        'membershipId' => 'int64',
        'displayName' => null,
        'bungieGlobalDisplayName' => null,
        'bungieGlobalDisplayNameCode' => 'int16'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lastSeenDisplayName' => 'LastSeenDisplayName',
        'lastSeenDisplayNameType' => 'LastSeenDisplayNameType',
        'supplementalDisplayName' => 'supplementalDisplayName',
        'iconPath' => 'iconPath',
        'crossSaveOverride' => 'crossSaveOverride',
        'applicableMembershipTypes' => 'applicableMembershipTypes',
        'isPublic' => 'isPublic',
        'membershipType' => 'membershipType',
        'membershipId' => 'membershipId',
        'displayName' => 'displayName',
        'bungieGlobalDisplayName' => 'bungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'bungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lastSeenDisplayName' => 'setLastSeenDisplayName',
        'lastSeenDisplayNameType' => 'setLastSeenDisplayNameType',
        'supplementalDisplayName' => 'setSupplementalDisplayName',
        'iconPath' => 'setIconPath',
        'crossSaveOverride' => 'setCrossSaveOverride',
        'applicableMembershipTypes' => 'setApplicableMembershipTypes',
        'isPublic' => 'setIsPublic',
        'membershipType' => 'setMembershipType',
        'membershipId' => 'setMembershipId',
        'displayName' => 'setDisplayName',
        'bungieGlobalDisplayName' => 'setBungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'setBungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lastSeenDisplayName' => 'getLastSeenDisplayName',
        'lastSeenDisplayNameType' => 'getLastSeenDisplayNameType',
        'supplementalDisplayName' => 'getSupplementalDisplayName',
        'iconPath' => 'getIconPath',
        'crossSaveOverride' => 'getCrossSaveOverride',
        'applicableMembershipTypes' => 'getApplicableMembershipTypes',
        'isPublic' => 'getIsPublic',
        'membershipType' => 'getMembershipType',
        'membershipId' => 'getMembershipId',
        'displayName' => 'getDisplayName',
        'bungieGlobalDisplayName' => 'getBungieGlobalDisplayName',
        'bungieGlobalDisplayNameCode' => 'getBungieGlobalDisplayNameCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lastSeenDisplayName'] = isset($data['lastSeenDisplayName']) ? $data['lastSeenDisplayName'] : null;
        $this->container['lastSeenDisplayNameType'] = isset($data['lastSeenDisplayNameType']) ? $data['lastSeenDisplayNameType'] : null;
        $this->container['supplementalDisplayName'] = isset($data['supplementalDisplayName']) ? $data['supplementalDisplayName'] : null;
        $this->container['iconPath'] = isset($data['iconPath']) ? $data['iconPath'] : null;
        $this->container['crossSaveOverride'] = isset($data['crossSaveOverride']) ? $data['crossSaveOverride'] : null;
        $this->container['applicableMembershipTypes'] = isset($data['applicableMembershipTypes']) ? $data['applicableMembershipTypes'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['membershipType'] = isset($data['membershipType']) ? $data['membershipType'] : null;
        $this->container['membershipId'] = isset($data['membershipId']) ? $data['membershipId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['bungieGlobalDisplayName'] = isset($data['bungieGlobalDisplayName']) ? $data['bungieGlobalDisplayName'] : null;
        $this->container['bungieGlobalDisplayNameCode'] = isset($data['bungieGlobalDisplayNameCode']) ? $data['bungieGlobalDisplayNameCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lastSeenDisplayName
     *
     * @return string|null
     */
    public function getLastSeenDisplayName()
    {
        return $this->container['lastSeenDisplayName'];
    }

    /**
     * Sets lastSeenDisplayName
     *
     * @param string|null $lastSeenDisplayName This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.
     *
     * @return $this
     */
    public function setLastSeenDisplayName($lastSeenDisplayName)
    {
        $this->container['lastSeenDisplayName'] = $lastSeenDisplayName;

        return $this;
    }

    /**
     * Gets lastSeenDisplayNameType
     *
     * @return int|null
     */
    public function getLastSeenDisplayNameType()
    {
        return $this->container['lastSeenDisplayNameType'];
    }

    /**
     * Sets lastSeenDisplayNameType
     *
     * @param int|null $lastSeenDisplayNameType The platform of the LastSeenDisplayName
     *
     * @return $this
     */
    public function setLastSeenDisplayNameType($lastSeenDisplayNameType)
    {
        $this->container['lastSeenDisplayNameType'] = $lastSeenDisplayNameType;

        return $this;
    }

    /**
     * Gets supplementalDisplayName
     *
     * @return string|null
     */
    public function getSupplementalDisplayName()
    {
        return $this->container['supplementalDisplayName'];
    }

    /**
     * Sets supplementalDisplayName
     *
     * @param string|null $supplementalDisplayName A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
     *
     * @return $this
     */
    public function setSupplementalDisplayName($supplementalDisplayName)
    {
        $this->container['supplementalDisplayName'] = $supplementalDisplayName;

        return $this;
    }

    /**
     * Gets iconPath
     *
     * @return string|null
     */
    public function getIconPath()
    {
        return $this->container['iconPath'];
    }

    /**
     * Sets iconPath
     *
     * @param string|null $iconPath URL the Icon if available.
     *
     * @return $this
     */
    public function setIconPath($iconPath)
    {
        $this->container['iconPath'] = $iconPath;

        return $this;
    }

    /**
     * Gets crossSaveOverride
     *
     * @return int|null
     */
    public function getCrossSaveOverride()
    {
        return $this->container['crossSaveOverride'];
    }

    /**
     * Sets crossSaveOverride
     *
     * @param int|null $crossSaveOverride If there is a cross save override in effect, this value will tell you the type that is overridding this one.
     *
     * @return $this
     */
    public function setCrossSaveOverride($crossSaveOverride)
    {
        $this->container['crossSaveOverride'] = $crossSaveOverride;

        return $this;
    }

    /**
     * Gets applicableMembershipTypes
     *
     * @return int[]|null
     */
    public function getApplicableMembershipTypes()
    {
        return $this->container['applicableMembershipTypes'];
    }

    /**
     * Sets applicableMembershipTypes
     *
     * @param int[]|null $applicableMembershipTypes The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
     *
     * @return $this
     */
    public function setApplicableMembershipTypes($applicableMembershipTypes)
    {
        $this->container['applicableMembershipTypes'] = $applicableMembershipTypes;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool|null $isPublic If True, this is a public user membership.
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets membershipType
     *
     * @return int|null
     */
    public function getMembershipType()
    {
        return $this->container['membershipType'];
    }

    /**
     * Sets membershipType
     *
     * @param int|null $membershipType Type of the membership. Not necessarily the native type.
     *
     * @return $this
     */
    public function setMembershipType($membershipType)
    {
        $this->container['membershipType'] = $membershipType;

        return $this;
    }

    /**
     * Gets membershipId
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membershipId'];
    }

    /**
     * Sets membershipId
     *
     * @param int|null $membershipId Membership ID as they user is known in the Accounts service
     *
     * @return $this
     */
    public function setMembershipId($membershipId)
    {
        $this->container['membershipId'] = $membershipId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets bungieGlobalDisplayName
     *
     * @return string|null
     */
    public function getBungieGlobalDisplayName()
    {
        return $this->container['bungieGlobalDisplayName'];
    }

    /**
     * Sets bungieGlobalDisplayName
     *
     * @param string|null $bungieGlobalDisplayName The bungie global display name, if set.
     *
     * @return $this
     */
    public function setBungieGlobalDisplayName($bungieGlobalDisplayName)
    {
        $this->container['bungieGlobalDisplayName'] = $bungieGlobalDisplayName;

        return $this;
    }

    /**
     * Gets bungieGlobalDisplayNameCode
     *
     * @return int|null
     */
    public function getBungieGlobalDisplayNameCode()
    {
        return $this->container['bungieGlobalDisplayNameCode'];
    }

    /**
     * Sets bungieGlobalDisplayNameCode
     *
     * @param int|null $bungieGlobalDisplayNameCode The bungie global display name code, if set.
     *
     * @return $this
     */
    public function setBungieGlobalDisplayNameCode($bungieGlobalDisplayNameCode)
    {
        $this->container['bungieGlobalDisplayNameCode'] = $bungieGlobalDisplayNameCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


