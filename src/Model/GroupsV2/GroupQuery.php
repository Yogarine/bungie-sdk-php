<?php
/**
 * GroupQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.8.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Model\GroupsV2;

use \ArrayAccess;
use \Bungie\ObjectSerializer;

/**
 * GroupQuery Class Doc Comment
 *
 * @category Class
 * @description NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible \&quot;modes\&quot;.  If you are querying for a group, you can pass any of the properties below.  If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):  - groupMemberCountFilter - localeFilter - tagText  If you pass these, you will get a useless InvalidParameters error.
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupQuery implements \Bungie\Model\ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GroupsV2.GroupQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'groupType' => 'int',
        'creationDate' => 'int',
        'sortBy' => 'int',
        'groupMemberCountFilter' => 'int',
        'localeFilter' => 'string',
        'tagText' => 'string',
        'itemsPerPage' => 'int',
        'currentPage' => 'int',
        'requestContinuationToken' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'groupType' => 'int32',
        'creationDate' => 'int32',
        'sortBy' => 'int32',
        'groupMemberCountFilter' => 'int32',
        'localeFilter' => null,
        'tagText' => null,
        'itemsPerPage' => 'int32',
        'currentPage' => 'int32',
        'requestContinuationToken' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'groupType' => 'groupType',
        'creationDate' => 'creationDate',
        'sortBy' => 'sortBy',
        'groupMemberCountFilter' => 'groupMemberCountFilter',
        'localeFilter' => 'localeFilter',
        'tagText' => 'tagText',
        'itemsPerPage' => 'itemsPerPage',
        'currentPage' => 'currentPage',
        'requestContinuationToken' => 'requestContinuationToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'groupType' => 'setGroupType',
        'creationDate' => 'setCreationDate',
        'sortBy' => 'setSortBy',
        'groupMemberCountFilter' => 'setGroupMemberCountFilter',
        'localeFilter' => 'setLocaleFilter',
        'tagText' => 'setTagText',
        'itemsPerPage' => 'setItemsPerPage',
        'currentPage' => 'setCurrentPage',
        'requestContinuationToken' => 'setRequestContinuationToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'groupType' => 'getGroupType',
        'creationDate' => 'getCreationDate',
        'sortBy' => 'getSortBy',
        'groupMemberCountFilter' => 'getGroupMemberCountFilter',
        'localeFilter' => 'getLocaleFilter',
        'tagText' => 'getTagText',
        'itemsPerPage' => 'getItemsPerPage',
        'currentPage' => 'getCurrentPage',
        'requestContinuationToken' => 'getRequestContinuationToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GROUP_MEMBER_COUNT_FILTER_ALL = 0;
    const GROUP_MEMBER_COUNT_FILTER_ONETOTEN = 1;
    const GROUP_MEMBER_COUNT_FILTER_ELEVENTOONEHUNDRED = 2;
    const GROUP_MEMBER_COUNT_FILTER_GREATERTHANONEHUNDRED = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupMemberCountFilterAllowableValues()
    {
        return [
            self::GROUP_MEMBER_COUNT_FILTER_ALL,
            self::GROUP_MEMBER_COUNT_FILTER_ONETOTEN,
            self::GROUP_MEMBER_COUNT_FILTER_ELEVENTOONEHUNDRED,
            self::GROUP_MEMBER_COUNT_FILTER_GREATERTHANONEHUNDRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['groupType'] = isset($data['groupType']) ? $data['groupType'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['sortBy'] = isset($data['sortBy']) ? $data['sortBy'] : null;
        $this->container['groupMemberCountFilter'] = isset($data['groupMemberCountFilter']) ? $data['groupMemberCountFilter'] : null;
        $this->container['localeFilter'] = isset($data['localeFilter']) ? $data['localeFilter'] : null;
        $this->container['tagText'] = isset($data['tagText']) ? $data['tagText'] : null;
        $this->container['itemsPerPage'] = isset($data['itemsPerPage']) ? $data['itemsPerPage'] : null;
        $this->container['currentPage'] = isset($data['currentPage']) ? $data['currentPage'] : null;
        $this->container['requestContinuationToken'] = isset($data['requestContinuationToken']) ? $data['requestContinuationToken'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGroupMemberCountFilterAllowableValues();
        if (!is_null($this->container['groupMemberCountFilter']) && !in_array($this->container['groupMemberCountFilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'groupMemberCountFilter', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets groupType
     *
     * @return int|null
     */
    public function getGroupType()
    {
        return $this->container['groupType'];
    }

    /**
     * Sets groupType
     *
     * @param int|null $groupType groupType
     *
     * @return $this
     */
    public function setGroupType($groupType)
    {
        $this->container['groupType'] = $groupType;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return int|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param int|null $creationDate creationDate
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets sortBy
     *
     * @return int|null
     */
    public function getSortBy()
    {
        return $this->container['sortBy'];
    }

    /**
     * Sets sortBy
     *
     * @param int|null $sortBy sortBy
     *
     * @return $this
     */
    public function setSortBy($sortBy)
    {
        $this->container['sortBy'] = $sortBy;

        return $this;
    }

    /**
     * Gets groupMemberCountFilter
     *
     * @return int|null
     */
    public function getGroupMemberCountFilter()
    {
        return $this->container['groupMemberCountFilter'];
    }

    /**
     * Sets groupMemberCountFilter
     *
     * @param int|null $groupMemberCountFilter groupMemberCountFilter
     *
     * @return $this
     */
    public function setGroupMemberCountFilter($groupMemberCountFilter)
    {
        $allowedValues = $this->getGroupMemberCountFilterAllowableValues();
        if (!is_null($groupMemberCountFilter) && !in_array($groupMemberCountFilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'groupMemberCountFilter', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['groupMemberCountFilter'] = $groupMemberCountFilter;

        return $this;
    }

    /**
     * Gets localeFilter
     *
     * @return string|null
     */
    public function getLocaleFilter()
    {
        return $this->container['localeFilter'];
    }

    /**
     * Sets localeFilter
     *
     * @param string|null $localeFilter localeFilter
     *
     * @return $this
     */
    public function setLocaleFilter($localeFilter)
    {
        $this->container['localeFilter'] = $localeFilter;

        return $this;
    }

    /**
     * Gets tagText
     *
     * @return string|null
     */
    public function getTagText()
    {
        return $this->container['tagText'];
    }

    /**
     * Sets tagText
     *
     * @param string|null $tagText tagText
     *
     * @return $this
     */
    public function setTagText($tagText)
    {
        $this->container['tagText'] = $tagText;

        return $this;
    }

    /**
     * Gets itemsPerPage
     *
     * @return int|null
     */
    public function getItemsPerPage()
    {
        return $this->container['itemsPerPage'];
    }

    /**
     * Sets itemsPerPage
     *
     * @param int|null $itemsPerPage itemsPerPage
     *
     * @return $this
     */
    public function setItemsPerPage($itemsPerPage)
    {
        $this->container['itemsPerPage'] = $itemsPerPage;

        return $this;
    }

    /**
     * Gets currentPage
     *
     * @return int|null
     */
    public function getCurrentPage()
    {
        return $this->container['currentPage'];
    }

    /**
     * Sets currentPage
     *
     * @param int|null $currentPage currentPage
     *
     * @return $this
     */
    public function setCurrentPage($currentPage)
    {
        $this->container['currentPage'] = $currentPage;

        return $this;
    }

    /**
     * Gets requestContinuationToken
     *
     * @return string|null
     */
    public function getRequestContinuationToken()
    {
        return $this->container['requestContinuationToken'];
    }

    /**
     * Sets requestContinuationToken
     *
     * @param string|null $requestContinuationToken requestContinuationToken
     *
     * @return $this
     */
    public function setRequestContinuationToken($requestContinuationToken)
    {
        $this->container['requestContinuationToken'] = $requestContinuationToken;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


