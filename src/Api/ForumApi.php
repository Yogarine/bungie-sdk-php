<?php
/**
 * ForumApi
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.9.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bungie\ApiException;
use Bungie\Configuration;
use Bungie\HeaderSelector;
use Bungie\ObjectSerializer;

/**
 * ForumApi Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ForumApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCoreTopicsPaged
     *
     * @param  int $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quickDate The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getCoreTopicsPaged($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        list($response) = $this->getCoreTopicsPagedWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales);
        return $response;
    }

    /**
     * Operation getCoreTopicsPagedWithHttpInfo
     *
     * @param  int $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quickDate The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCoreTopicsPagedWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        $request = $this->getCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCoreTopicsPagedAsync
     *
     * 
     *
     * @param  int $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quickDate The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoreTopicsPagedAsync($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        return $this->getCoreTopicsPagedAsyncWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCoreTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quickDate The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCoreTopicsPagedAsyncWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoreTopicsPaged'
     *
     * @param  int $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  int $quickDate The date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        // verify the required parameter 'categoryFilter' is set
        if ($categoryFilter === null || (is_array($categoryFilter) && count($categoryFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryFilter when calling getCoreTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getCoreTopicsPaged'
            );
        }
        // verify the required parameter 'quickDate' is set
        if ($quickDate === null || (is_array($quickDate) && count($quickDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quickDate when calling getCoreTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling getCoreTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locales !== null) {
            $queryParams['locales'] = ObjectSerializer::toQueryValue($locales);
        }

        // path params
        if ($categoryFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($categoryFilter),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($quickDate !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quickDate),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getForumTagSuggestions
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20014
     */
    public function getForumTagSuggestions($partialtag = null)
    {
        list($response) = $this->getForumTagSuggestionsWithHttpInfo($partialtag);
        return $response;
    }

    /**
     * Operation getForumTagSuggestionsWithHttpInfo
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function getForumTagSuggestionsWithHttpInfo($partialtag = null)
    {
        $request = $this->getForumTagSuggestionsRequest($partialtag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20014' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20014', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20014';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getForumTagSuggestionsAsync
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForumTagSuggestionsAsync($partialtag = null)
    {
        return $this->getForumTagSuggestionsAsyncWithHttpInfo($partialtag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getForumTagSuggestionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getForumTagSuggestionsAsyncWithHttpInfo($partialtag = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20014';
        $request = $this->getForumTagSuggestionsRequest($partialtag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getForumTagSuggestions'
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getForumTagSuggestionsRequest($partialtag = null)
    {

        $resourcePath = '/Forum/GetForumTagSuggestions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($partialtag !== null) {
            $queryParams['partialtag'] = ObjectSerializer::toQueryValue($partialtag);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPoll
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getPoll($topicId)
    {
        list($response) = $this->getPollWithHttpInfo($topicId);
        return $response;
    }

    /**
     * Operation getPollWithHttpInfo
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPollWithHttpInfo($topicId)
    {
        $request = $this->getPollRequest($topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPollAsync
     *
     * 
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPollAsync($topicId)
    {
        return $this->getPollAsyncWithHttpInfo($topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPollAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPollAsyncWithHttpInfo($topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getPollRequest($topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPoll'
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPollRequest($topicId)
    {
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling getPoll'
            );
        }

        $resourcePath = '/Forum/Poll/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostAndParent
     *
     * @param  int $childPostId childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getPostAndParent($childPostId, $showbanned = null)
    {
        list($response) = $this->getPostAndParentWithHttpInfo($childPostId, $showbanned);
        return $response;
    }

    /**
     * Operation getPostAndParentWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostAndParentWithHttpInfo($childPostId, $showbanned = null)
    {
        $request = $this->getPostAndParentRequest($childPostId, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostAndParentAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostAndParentAsync($childPostId, $showbanned = null)
    {
        return $this->getPostAndParentAsyncWithHttpInfo($childPostId, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostAndParentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostAndParentAsyncWithHttpInfo($childPostId, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getPostAndParentRequest($childPostId, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostAndParent'
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPostAndParentRequest($childPostId, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling getPostAndParent'
            );
        }

        $resourcePath = '/Forum/GetPostAndParent/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostAndParentAwaitingApproval
     *
     * @param  int $childPostId childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getPostAndParentAwaitingApproval($childPostId, $showbanned = null)
    {
        list($response) = $this->getPostAndParentAwaitingApprovalWithHttpInfo($childPostId, $showbanned);
        return $response;
    }

    /**
     * Operation getPostAndParentAwaitingApprovalWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostAndParentAwaitingApprovalWithHttpInfo($childPostId, $showbanned = null)
    {
        $request = $this->getPostAndParentAwaitingApprovalRequest($childPostId, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostAndParentAwaitingApprovalAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostAndParentAwaitingApprovalAsync($childPostId, $showbanned = null)
    {
        return $this->getPostAndParentAwaitingApprovalAsyncWithHttpInfo($childPostId, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostAndParentAwaitingApprovalAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostAndParentAwaitingApprovalAsyncWithHttpInfo($childPostId, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getPostAndParentAwaitingApprovalRequest($childPostId, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostAndParentAwaitingApproval'
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPostAndParentAwaitingApprovalRequest($childPostId, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling getPostAndParentAwaitingApproval'
            );
        }

        $resourcePath = '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostsThreadedPaged
     *
     * @param  bool $getParentPost getParentPost (required)
     * @param  int $page page (required)
     * @param  int $pageSize pageSize (required)
     * @param  int $parentPostId parentPostId (required)
     * @param  int $replySize replySize (required)
     * @param  bool $rootThreadMode rootThreadMode (required)
     * @param  int $sortMode sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getPostsThreadedPaged($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        list($response) = $this->getPostsThreadedPagedWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);
        return $response;
    }

    /**
     * Operation getPostsThreadedPagedWithHttpInfo
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostsThreadedPagedWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $request = $this->getPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostsThreadedPagedAsync
     *
     * 
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostsThreadedPagedAsync($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        return $this->getPostsThreadedPagedAsyncWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostsThreadedPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostsThreadedPagedAsyncWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostsThreadedPaged'
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        // verify the required parameter 'getParentPost' is set
        if ($getParentPost === null || (is_array($getParentPost) && count($getParentPost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $getParentPost when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'parentPostId' is set
        if ($parentPostId === null || (is_array($parentPostId) && count($parentPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentPostId when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'replySize' is set
        if ($replySize === null || (is_array($replySize) && count($replySize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replySize when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'rootThreadMode' is set
        if ($rootThreadMode === null || (is_array($rootThreadMode) && count($rootThreadMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rootThreadMode when calling getPostsThreadedPaged'
            );
        }
        // verify the required parameter 'sortMode' is set
        if ($sortMode === null || (is_array($sortMode) && count($sortMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sortMode when calling getPostsThreadedPaged'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($getParentPost !== null) {
            $resourcePath = str_replace(
                '{' . 'getParentPost' . '}',
                ObjectSerializer::toPathValue($getParentPost),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($parentPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'parentPostId' . '}',
                ObjectSerializer::toPathValue($parentPostId),
                $resourcePath
            );
        }
        // path params
        if ($replySize !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($replySize),
                $resourcePath
            );
        }
        // path params
        if ($rootThreadMode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($rootThreadMode),
                $resourcePath
            );
        }
        // path params
        if ($sortMode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sortMode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPostsThreadedPagedFromChild
     *
     * @param  int $childPostId childPostId (required)
     * @param  int $page page (required)
     * @param  int $pageSize pageSize (required)
     * @param  int $replySize replySize (required)
     * @param  bool $rootThreadMode rootThreadMode (required)
     * @param  int $sortMode sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getPostsThreadedPagedFromChild($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        list($response) = $this->getPostsThreadedPagedFromChildWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);
        return $response;
    }

    /**
     * Operation getPostsThreadedPagedFromChildWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPostsThreadedPagedFromChildWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $request = $this->getPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPostsThreadedPagedFromChildAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostsThreadedPagedFromChildAsync($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        return $this->getPostsThreadedPagedFromChildAsyncWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPostsThreadedPagedFromChildAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPostsThreadedPagedFromChildAsyncWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPostsThreadedPagedFromChild'
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  int $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling getPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling getPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'replySize' is set
        if ($replySize === null || (is_array($replySize) && count($replySize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replySize when calling getPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'rootThreadMode' is set
        if ($rootThreadMode === null || (is_array($rootThreadMode) && count($rootThreadMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rootThreadMode when calling getPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'sortMode' is set
        if ($sortMode === null || (is_array($sortMode) && count($sortMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sortMode when calling getPostsThreadedPagedFromChild'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($replySize !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($replySize),
                $resourcePath
            );
        }
        // path params
        if ($rootThreadMode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($rootThreadMode),
                $resourcePath
            );
        }
        // path params
        if ($sortMode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sortMode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecruitmentThreadSummaries
     *
     * @param  int[] $requestBody requestBody (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20015
     */
    public function getRecruitmentThreadSummaries($requestBody)
    {
        list($response) = $this->getRecruitmentThreadSummariesWithHttpInfo($requestBody);
        return $response;
    }

    /**
     * Operation getRecruitmentThreadSummariesWithHttpInfo
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecruitmentThreadSummariesWithHttpInfo($requestBody)
    {
        $request = $this->getRecruitmentThreadSummariesRequest($requestBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20015' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20015', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20015';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecruitmentThreadSummariesAsync
     *
     * 
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecruitmentThreadSummariesAsync($requestBody)
    {
        return $this->getRecruitmentThreadSummariesAsyncWithHttpInfo($requestBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecruitmentThreadSummariesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecruitmentThreadSummariesAsyncWithHttpInfo($requestBody)
    {
        $returnType = '\Bungie\Model\InlineResponse20015';
        $request = $this->getRecruitmentThreadSummariesRequest($requestBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecruitmentThreadSummaries'
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecruitmentThreadSummariesRequest($requestBody)
    {
        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling getRecruitmentThreadSummaries'
            );
        }

        $resourcePath = '/Forum/Recruit/Summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requestBody)) {
            $_tempBody = $requestBody;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTopicForContent
     *
     * @param  int $contentId contentId (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20013
     */
    public function getTopicForContent($contentId)
    {
        list($response) = $this->getTopicForContentWithHttpInfo($contentId);
        return $response;
    }

    /**
     * Operation getTopicForContentWithHttpInfo
     *
     * @param  int $contentId (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTopicForContentWithHttpInfo($contentId)
    {
        $request = $this->getTopicForContentRequest($contentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20013' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20013', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20013';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTopicForContentAsync
     *
     * 
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTopicForContentAsync($contentId)
    {
        return $this->getTopicForContentAsyncWithHttpInfo($contentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTopicForContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTopicForContentAsyncWithHttpInfo($contentId)
    {
        $returnType = '\Bungie\Model\InlineResponse20013';
        $request = $this->getTopicForContentRequest($contentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTopicForContent'
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTopicForContentRequest($contentId)
    {
        // verify the required parameter 'contentId' is set
        if ($contentId === null || (is_array($contentId) && count($contentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentId when calling getTopicForContent'
            );
        }

        $resourcePath = '/Forum/GetTopicForContent/{contentId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contentId !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($contentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTopicsPaged
     *
     * @param  int $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  int $quickDate A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function getTopicsPaged($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        list($response) = $this->getTopicsPagedWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);
        return $response;
    }

    /**
     * Operation getTopicsPagedWithHttpInfo
     *
     * @param  int $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  int $quickDate A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTopicsPagedWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        $request = $this->getTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTopicsPagedAsync
     *
     * 
     *
     * @param  int $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  int $quickDate A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTopicsPagedAsync($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        return $this->getTopicsPagedAsyncWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  int $quickDate A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTopicsPagedAsyncWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->getTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTopicsPaged'
     *
     * @param  int $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  int $quickDate A date filter. (required)
     * @param  int $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        // verify the required parameter 'categoryFilter' is set
        if ($categoryFilter === null || (is_array($categoryFilter) && count($categoryFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryFilter when calling getTopicsPaged'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getTopicsPaged'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling getTopicsPaged'
            );
        }
        // verify the required parameter 'quickDate' is set
        if ($quickDate === null || (is_array($quickDate) && count($quickDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quickDate when calling getTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling getTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locales !== null) {
            $queryParams['locales'] = ObjectSerializer::toQueryValue($locales);
        }
        // query params
        if ($tagstring !== null) {
            $queryParams['tagstring'] = ObjectSerializer::toQueryValue($tagstring);
        }

        // path params
        if ($categoryFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($categoryFilter),
                $resourcePath
            );
        }
        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                '{' . 'group' . '}',
                ObjectSerializer::toPathValue($group),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($quickDate !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quickDate),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
