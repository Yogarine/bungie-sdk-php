<?php
/**
 * FireteamApi
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.3
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bungie\ApiException;
use Bungie\Configuration;
use Bungie\HeaderSelector;
use Bungie\ObjectSerializer;

/**
 * FireteamApi Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FireteamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getActivePrivateClanFireteamCount
     *
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20019
     */
    public function getActivePrivateClanFireteamCount($groupId)
    {
        list($response) = $this->getActivePrivateClanFireteamCountWithHttpInfo($groupId);
        return $response;
    }

    /**
     * Operation getActivePrivateClanFireteamCountWithHttpInfo
     *
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivePrivateClanFireteamCountWithHttpInfo($groupId)
    {
        $request = $this->getActivePrivateClanFireteamCountRequest($groupId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20019' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20019', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20019';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivePrivateClanFireteamCountAsync
     *
     * 
     *
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePrivateClanFireteamCountAsync($groupId)
    {
        return $this->getActivePrivateClanFireteamCountAsyncWithHttpInfo($groupId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivePrivateClanFireteamCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePrivateClanFireteamCountAsyncWithHttpInfo($groupId)
    {
        $returnType = '\Bungie\Model\InlineResponse20019';
        $request = $this->getActivePrivateClanFireteamCountRequest($groupId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivePrivateClanFireteamCount'
     *
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActivePrivateClanFireteamCountRequest($groupId)
    {
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getActivePrivateClanFireteamCount'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/ActiveCount/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvailableClanFireteams
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $groupId The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPublicSearchOption $publicOnly Determines public/private filtering. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20065
     */
    public function getAvailableClanFireteams($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter = null)
    {
        list($response) = $this->getAvailableClanFireteamsWithHttpInfo($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter);
        return $response;
    }

    /**
     * Operation getAvailableClanFireteamsWithHttpInfo
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $groupId The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPublicSearchOption $publicOnly Determines public/private filtering. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20065, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableClanFireteamsWithHttpInfo($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter = null)
    {
        $request = $this->getAvailableClanFireteamsRequest($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20065' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20065', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20065';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20065',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAvailableClanFireteamsAsync
     *
     * 
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $groupId The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPublicSearchOption $publicOnly Determines public/private filtering. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableClanFireteamsAsync($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter = null)
    {
        return $this->getAvailableClanFireteamsAsyncWithHttpInfo($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailableClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $groupId The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPublicSearchOption $publicOnly Determines public/private filtering. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableClanFireteamsAsyncWithHttpInfo($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20065';
        $request = $this->getAvailableClanFireteamsRequest($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailableClanFireteams'
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $groupId The group id of the clan. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPublicSearchOption $publicOnly Determines public/private filtering. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAvailableClanFireteamsRequest($activityType, $dateRange, $groupId, $page, $platform, $publicOnly, $slotFilter, $langFilter = null)
    {
        // verify the required parameter 'activityType' is set
        if ($activityType === null || (is_array($activityType) && count($activityType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activityType when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'dateRange' is set
        if ($dateRange === null || (is_array($dateRange) && count($dateRange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateRange when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'publicOnly' is set
        if ($publicOnly === null || (is_array($publicOnly) && count($publicOnly) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publicOnly when calling getAvailableClanFireteams'
            );
        }
        // verify the required parameter 'slotFilter' is set
        if ($slotFilter === null || (is_array($slotFilter) && count($slotFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slotFilter when calling getAvailableClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($langFilter !== null) {
            $queryParams['langFilter'] = ObjectSerializer::toQueryValue($langFilter);
        }

        // path params
        if ($activityType !== null) {
            $resourcePath = str_replace(
                '{' . 'activityType' . '}',
                ObjectSerializer::toPathValue($activityType),
                $resourcePath
            );
        }
        // path params
        if ($dateRange !== null) {
            $resourcePath = str_replace(
                '{' . 'dateRange' . '}',
                ObjectSerializer::toPathValue($dateRange),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }
        // path params
        if ($publicOnly !== null) {
            $resourcePath = str_replace(
                '{' . 'publicOnly' . '}',
                ObjectSerializer::toPathValue($publicOnly),
                $resourcePath
            );
        }
        // path params
        if ($slotFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'slotFilter' . '}',
                ObjectSerializer::toPathValue($slotFilter),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClanFireteam
     *
     * @param  int $fireteamId The unique id of the fireteam. (required)
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20067
     */
    public function getClanFireteam($fireteamId, $groupId)
    {
        list($response) = $this->getClanFireteamWithHttpInfo($fireteamId, $groupId);
        return $response;
    }

    /**
     * Operation getClanFireteamWithHttpInfo
     *
     * @param  int $fireteamId The unique id of the fireteam. (required)
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20067, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClanFireteamWithHttpInfo($fireteamId, $groupId)
    {
        $request = $this->getClanFireteamRequest($fireteamId, $groupId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20067' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20067', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20067';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20067',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClanFireteamAsync
     *
     * 
     *
     * @param  int $fireteamId The unique id of the fireteam. (required)
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClanFireteamAsync($fireteamId, $groupId)
    {
        return $this->getClanFireteamAsyncWithHttpInfo($fireteamId, $groupId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClanFireteamAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $fireteamId The unique id of the fireteam. (required)
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClanFireteamAsyncWithHttpInfo($fireteamId, $groupId)
    {
        $returnType = '\Bungie\Model\InlineResponse20067';
        $request = $this->getClanFireteamRequest($fireteamId, $groupId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClanFireteam'
     *
     * @param  int $fireteamId The unique id of the fireteam. (required)
     * @param  int $groupId The group id of the clan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClanFireteamRequest($fireteamId, $groupId)
    {
        // verify the required parameter 'fireteamId' is set
        if ($fireteamId === null || (is_array($fireteamId) && count($fireteamId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fireteamId when calling getClanFireteam'
            );
        }
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getClanFireteam'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/Summary/{fireteamId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($fireteamId !== null) {
            $resourcePath = str_replace(
                '{' . 'fireteamId' . '}',
                ObjectSerializer::toPathValue($fireteamId),
                $resourcePath
            );
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyClanFireteams
     *
     * @param  int $groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $includeClosed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  bool $groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20066
     */
    public function getMyClanFireteams($groupId, $includeClosed, $page, $platform, $groupFilter = null, $langFilter = null)
    {
        list($response) = $this->getMyClanFireteamsWithHttpInfo($groupId, $includeClosed, $page, $platform, $groupFilter, $langFilter);
        return $response;
    }

    /**
     * Operation getMyClanFireteamsWithHttpInfo
     *
     * @param  int $groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $includeClosed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  bool $groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20066, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyClanFireteamsWithHttpInfo($groupId, $includeClosed, $page, $platform, $groupFilter = null, $langFilter = null)
    {
        $request = $this->getMyClanFireteamsRequest($groupId, $includeClosed, $page, $platform, $groupFilter, $langFilter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20066' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20066', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20066';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20066',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyClanFireteamsAsync
     *
     * 
     *
     * @param  int $groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $includeClosed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  bool $groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyClanFireteamsAsync($groupId, $includeClosed, $page, $platform, $groupFilter = null, $langFilter = null)
    {
        return $this->getMyClanFireteamsAsyncWithHttpInfo($groupId, $includeClosed, $page, $platform, $groupFilter, $langFilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $includeClosed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  bool $groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyClanFireteamsAsyncWithHttpInfo($groupId, $includeClosed, $page, $platform, $groupFilter = null, $langFilter = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20066';
        $request = $this->getMyClanFireteamsRequest($groupId, $includeClosed, $page, $platform, $groupFilter, $langFilter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyClanFireteams'
     *
     * @param  int $groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param  bool $includeClosed If true, return fireteams that have been closed. (required)
     * @param  int $page Deprecated parameter, ignored. (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  bool $groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyClanFireteamsRequest($groupId, $includeClosed, $page, $platform, $groupFilter = null, $langFilter = null)
    {
        // verify the required parameter 'groupId' is set
        if ($groupId === null || (is_array($groupId) && count($groupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupId when calling getMyClanFireteams'
            );
        }
        // verify the required parameter 'includeClosed' is set
        if ($includeClosed === null || (is_array($includeClosed) && count($includeClosed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includeClosed when calling getMyClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getMyClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling getMyClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($groupFilter !== null) {
            $queryParams['groupFilter'] = ObjectSerializer::toQueryValue($groupFilter);
        }
        // query params
        if ($langFilter !== null) {
            $queryParams['langFilter'] = ObjectSerializer::toQueryValue($langFilter);
        }

        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($groupId),
                $resourcePath
            );
        }
        // path params
        if ($includeClosed !== null) {
            $resourcePath = str_replace(
                '{' . 'includeClosed' . '}',
                ObjectSerializer::toPathValue($includeClosed),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPublicAvailableClanFireteams
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return \Bungie\Model\InlineResponse20065
     */
    public function searchPublicAvailableClanFireteams($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter = null)
    {
        list($response) = $this->searchPublicAvailableClanFireteamsWithHttpInfo($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter);
        return $response;
    }

    /**
     * Operation searchPublicAvailableClanFireteamsWithHttpInfo
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @return array of \Bungie\Model\InlineResponse20065, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPublicAvailableClanFireteamsWithHttpInfo($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter = null)
    {
        $request = $this->searchPublicAvailableClanFireteamsRequest($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20065' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20065', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20065';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20065',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPublicAvailableClanFireteamsAsync
     *
     * 
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPublicAvailableClanFireteamsAsync($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter = null)
    {
        return $this->searchPublicAvailableClanFireteamsAsyncWithHttpInfo($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPublicAvailableClanFireteamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPublicAvailableClanFireteamsAsyncWithHttpInfo($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20065';
        $request = $this->searchPublicAvailableClanFireteamsRequest($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \Psr\Http\Message\ResponseInterface $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPublicAvailableClanFireteams'
     *
     * @param  \Bungie\Model\Fireteam\FireteamActivityType $activityType The activity type to filter by. (required)
     * @param  \Bungie\Model\Fireteam\FireteamDateRange $dateRange The date range to grab available fireteams. (required)
     * @param  int $page Zero based page (required)
     * @param  \Bungie\Model\Fireteam\FireteamPlatform $platform The platform filter. (required)
     * @param  \Bungie\Model\Fireteam\FireteamSlotSearch $slotFilter Filters based on available slots (required)
     * @param  string $langFilter An optional language filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPublicAvailableClanFireteamsRequest($activityType, $dateRange, $page, $platform, $slotFilter, $langFilter = null)
    {
        // verify the required parameter 'activityType' is set
        if ($activityType === null || (is_array($activityType) && count($activityType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activityType when calling searchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'dateRange' is set
        if ($dateRange === null || (is_array($dateRange) && count($dateRange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateRange when calling searchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling searchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'platform' is set
        if ($platform === null || (is_array($platform) && count($platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $platform when calling searchPublicAvailableClanFireteams'
            );
        }
        // verify the required parameter 'slotFilter' is set
        if ($slotFilter === null || (is_array($slotFilter) && count($slotFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slotFilter when calling searchPublicAvailableClanFireteams'
            );
        }

        $resourcePath = '/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($langFilter !== null) {
            $queryParams['langFilter'] = ObjectSerializer::toQueryValue($langFilter);
        }

        // path params
        if ($activityType !== null) {
            $resourcePath = str_replace(
                '{' . 'activityType' . '}',
                ObjectSerializer::toPathValue($activityType),
                $resourcePath
            );
        }
        // path params
        if ($dateRange !== null) {
            $resourcePath = str_replace(
                '{' . 'dateRange' . '}',
                ObjectSerializer::toPathValue($dateRange),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($platform !== null) {
            $resourcePath = str_replace(
                '{' . 'platform' . '}',
                ObjectSerializer::toPathValue($platform),
                $resourcePath
            );
        }
        // path params
        if ($slotFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'slotFilter' . '}',
                ObjectSerializer::toPathValue($slotFilter),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
