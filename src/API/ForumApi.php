<?php
/**
 * ForumApi
 * PHP version 5
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.2
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bungie\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bungie\ApiException;
use Bungie\Configuration;
use Bungie\HeaderSelector;
use Bungie\ObjectSerializer;

/**
 * ForumApi Class Doc Comment
 *
 * @category Class
 * @package  Bungie
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ForumApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation forumApproveFireteamThread
     *
     * @param  int $topicId The post id of the recruitment topic to approve. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20014
     */
    public function forumApproveFireteamThread($topicId)
    {
        list($response) = $this->forumApproveFireteamThreadWithHttpInfo($topicId);
        return $response;
    }

    /**
     * Operation forumApproveFireteamThreadWithHttpInfo
     *
     * @param  int $topicId The post id of the recruitment topic to approve. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumApproveFireteamThreadWithHttpInfo($topicId)
    {
        $request = $this->forumApproveFireteamThreadRequest($topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20014' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20014', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20014';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumApproveFireteamThreadAsync
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic to approve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumApproveFireteamThreadAsync($topicId)
    {
        return $this->forumApproveFireteamThreadAsyncWithHttpInfo($topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumApproveFireteamThreadAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic to approve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumApproveFireteamThreadAsyncWithHttpInfo($topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20014';
        $request = $this->forumApproveFireteamThreadRequest($topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumApproveFireteamThread'
     *
     * @param  int $topicId The post id of the recruitment topic to approve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumApproveFireteamThreadRequest($topicId)
    {
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling forumApproveFireteamThread'
            );
        }

        $resourcePath = '/Forum/Recruit/Approve/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetCoreTopicsPaged
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate The date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetCoreTopicsPaged($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        list($response) = $this->forumGetCoreTopicsPagedWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales);
        return $response;
    }

    /**
     * Operation forumGetCoreTopicsPagedWithHttpInfo
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate The date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetCoreTopicsPagedWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        $request = $this->forumGetCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetCoreTopicsPagedAsync
     *
     * 
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate The date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetCoreTopicsPagedAsync($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        return $this->forumGetCoreTopicsPagedAsyncWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetCoreTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate The date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetCoreTopicsPagedAsyncWithHttpInfo($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetCoreTopicsPaged'
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter The category filter. (required)
     * @param  int $page Zero base page (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate The date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetCoreTopicsPagedRequest($categoryFilter, $page, $quickDate, $sort, $locales = null)
    {
        // verify the required parameter 'categoryFilter' is set
        if ($categoryFilter === null || (is_array($categoryFilter) && count($categoryFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryFilter when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'quickDate' is set
        if ($quickDate === null || (is_array($quickDate) && count($quickDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quickDate when calling forumGetCoreTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling forumGetCoreTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locales !== null) {
            $queryParams['locales'] = ObjectSerializer::toQueryValue($locales);
        }

        // path params
        if ($categoryFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($categoryFilter),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($quickDate !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quickDate),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetForumTagSuggestions
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20012
     */
    public function forumGetForumTagSuggestions($partialtag = null)
    {
        list($response) = $this->forumGetForumTagSuggestionsWithHttpInfo($partialtag);
        return $response;
    }

    /**
     * Operation forumGetForumTagSuggestionsWithHttpInfo
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetForumTagSuggestionsWithHttpInfo($partialtag = null)
    {
        $request = $this->forumGetForumTagSuggestionsRequest($partialtag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20012' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20012', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20012';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetForumTagSuggestionsAsync
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetForumTagSuggestionsAsync($partialtag = null)
    {
        return $this->forumGetForumTagSuggestionsAsyncWithHttpInfo($partialtag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetForumTagSuggestionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetForumTagSuggestionsAsyncWithHttpInfo($partialtag = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20012';
        $request = $this->forumGetForumTagSuggestionsRequest($partialtag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetForumTagSuggestions'
     *
     * @param  string $partialtag The partial tag input to generate suggestions from. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetForumTagSuggestionsRequest($partialtag = null)
    {

        $resourcePath = '/Forum/GetForumTagSuggestions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($partialtag !== null) {
            $queryParams['partialtag'] = ObjectSerializer::toQueryValue($partialtag);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPoll
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetPoll($topicId)
    {
        list($response) = $this->forumGetPollWithHttpInfo($topicId);
        return $response;
    }

    /**
     * Operation forumGetPollWithHttpInfo
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPollWithHttpInfo($topicId)
    {
        $request = $this->forumGetPollRequest($topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPollAsync
     *
     * 
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPollAsync($topicId)
    {
        return $this->forumGetPollAsyncWithHttpInfo($topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPollAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPollAsyncWithHttpInfo($topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetPollRequest($topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPoll'
     *
     * @param  int $topicId The post id of the topic that has the poll. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetPollRequest($topicId)
    {
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling forumGetPoll'
            );
        }

        $resourcePath = '/Forum/Poll/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostAndParent
     *
     * @param  int $childPostId childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetPostAndParent($childPostId, $showbanned = null)
    {
        list($response) = $this->forumGetPostAndParentWithHttpInfo($childPostId, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostAndParentWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostAndParentWithHttpInfo($childPostId, $showbanned = null)
    {
        $request = $this->forumGetPostAndParentRequest($childPostId, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostAndParentAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAsync($childPostId, $showbanned = null)
    {
        return $this->forumGetPostAndParentAsyncWithHttpInfo($childPostId, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostAndParentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAsyncWithHttpInfo($childPostId, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetPostAndParentRequest($childPostId, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostAndParent'
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetPostAndParentRequest($childPostId, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling forumGetPostAndParent'
            );
        }

        $resourcePath = '/Forum/GetPostAndParent/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostAndParentAwaitingApproval
     *
     * @param  int $childPostId childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetPostAndParentAwaitingApproval($childPostId, $showbanned = null)
    {
        list($response) = $this->forumGetPostAndParentAwaitingApprovalWithHttpInfo($childPostId, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostAndParentAwaitingApprovalWithHttpInfo($childPostId, $showbanned = null)
    {
        $request = $this->forumGetPostAndParentAwaitingApprovalRequest($childPostId, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAwaitingApprovalAsync($childPostId, $showbanned = null)
    {
        return $this->forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo($childPostId, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo($childPostId, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetPostAndParentAwaitingApprovalRequest($childPostId, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostAndParentAwaitingApproval'
     *
     * @param  int $childPostId (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetPostAndParentAwaitingApprovalRequest($childPostId, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling forumGetPostAndParentAwaitingApproval'
            );
        }

        $resourcePath = '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostsThreadedPaged
     *
     * @param  bool $getParentPost getParentPost (required)
     * @param  int $page page (required)
     * @param  int $pageSize pageSize (required)
     * @param  int $parentPostId parentPostId (required)
     * @param  int $replySize replySize (required)
     * @param  bool $rootThreadMode rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetPostsThreadedPaged($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        list($response) = $this->forumGetPostsThreadedPagedWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostsThreadedPagedWithHttpInfo
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostsThreadedPagedWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $request = $this->forumGetPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostsThreadedPagedAsync
     *
     * 
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedAsync($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        return $this->forumGetPostsThreadedPagedAsyncWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostsThreadedPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedAsyncWithHttpInfo($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostsThreadedPaged'
     *
     * @param  bool $getParentPost (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $parentPostId (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetPostsThreadedPagedRequest($getParentPost, $page, $pageSize, $parentPostId, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        // verify the required parameter 'getParentPost' is set
        if ($getParentPost === null || (is_array($getParentPost) && count($getParentPost) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $getParentPost when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'parentPostId' is set
        if ($parentPostId === null || (is_array($parentPostId) && count($parentPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentPostId when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'replySize' is set
        if ($replySize === null || (is_array($replySize) && count($replySize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replySize when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'rootThreadMode' is set
        if ($rootThreadMode === null || (is_array($rootThreadMode) && count($rootThreadMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rootThreadMode when calling forumGetPostsThreadedPaged'
            );
        }
        // verify the required parameter 'sortMode' is set
        if ($sortMode === null || (is_array($sortMode) && count($sortMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sortMode when calling forumGetPostsThreadedPaged'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($getParentPost !== null) {
            $resourcePath = str_replace(
                '{' . 'getParentPost' . '}',
                ObjectSerializer::toPathValue($getParentPost),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($parentPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'parentPostId' . '}',
                ObjectSerializer::toPathValue($parentPostId),
                $resourcePath
            );
        }
        // path params
        if ($replySize !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($replySize),
                $resourcePath
            );
        }
        // path params
        if ($rootThreadMode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($rootThreadMode),
                $resourcePath
            );
        }
        // path params
        if ($sortMode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sortMode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChild
     *
     * @param  int $childPostId childPostId (required)
     * @param  int $page page (required)
     * @param  int $pageSize pageSize (required)
     * @param  int $replySize replySize (required)
     * @param  bool $rootThreadMode rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetPostsThreadedPagedFromChild($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        list($response) = $this->forumGetPostsThreadedPagedFromChildWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);
        return $response;
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildWithHttpInfo
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetPostsThreadedPagedFromChildWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $request = $this->forumGetPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildAsync
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedFromChildAsync($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        return $this->forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetPostsThreadedPagedFromChildAsyncWithHttpInfo($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetPostsThreadedPagedFromChild'
     *
     * @param  int $childPostId (required)
     * @param  int $page (required)
     * @param  int $pageSize (required)
     * @param  int $replySize (required)
     * @param  bool $rootThreadMode (required)
     * @param  \Bungie\Model\ForumForumPostSortEnum $sortMode (required)
     * @param  string $showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetPostsThreadedPagedFromChildRequest($childPostId, $page, $pageSize, $replySize, $rootThreadMode, $sortMode, $showbanned = null)
    {
        // verify the required parameter 'childPostId' is set
        if ($childPostId === null || (is_array($childPostId) && count($childPostId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childPostId when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'replySize' is set
        if ($replySize === null || (is_array($replySize) && count($replySize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replySize when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'rootThreadMode' is set
        if ($rootThreadMode === null || (is_array($rootThreadMode) && count($rootThreadMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rootThreadMode when calling forumGetPostsThreadedPagedFromChild'
            );
        }
        // verify the required parameter 'sortMode' is set
        if ($sortMode === null || (is_array($sortMode) && count($sortMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sortMode when calling forumGetPostsThreadedPagedFromChild'
            );
        }

        $resourcePath = '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($showbanned !== null) {
            $queryParams['showbanned'] = ObjectSerializer::toQueryValue($showbanned);
        }

        // path params
        if ($childPostId !== null) {
            $resourcePath = str_replace(
                '{' . 'childPostId' . '}',
                ObjectSerializer::toPathValue($childPostId),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($replySize !== null) {
            $resourcePath = str_replace(
                '{' . 'replySize' . '}',
                ObjectSerializer::toPathValue($replySize),
                $resourcePath
            );
        }
        // path params
        if ($rootThreadMode !== null) {
            $resourcePath = str_replace(
                '{' . 'rootThreadMode' . '}',
                ObjectSerializer::toPathValue($rootThreadMode),
                $resourcePath
            );
        }
        // path params
        if ($sortMode !== null) {
            $resourcePath = str_replace(
                '{' . 'sortMode' . '}',
                ObjectSerializer::toPathValue($sortMode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetRecruitmentThreadSummaries
     *
     * @param  int[] $requestBody requestBody (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20015
     */
    public function forumGetRecruitmentThreadSummaries($requestBody)
    {
        list($response) = $this->forumGetRecruitmentThreadSummariesWithHttpInfo($requestBody);
        return $response;
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesWithHttpInfo
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetRecruitmentThreadSummariesWithHttpInfo($requestBody)
    {
        $request = $this->forumGetRecruitmentThreadSummariesRequest($requestBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20015' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20015', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20015';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesAsync
     *
     * 
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetRecruitmentThreadSummariesAsync($requestBody)
    {
        return $this->forumGetRecruitmentThreadSummariesAsyncWithHttpInfo($requestBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetRecruitmentThreadSummariesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetRecruitmentThreadSummariesAsyncWithHttpInfo($requestBody)
    {
        $returnType = '\Bungie\Model\InlineResponse20015';
        $request = $this->forumGetRecruitmentThreadSummariesRequest($requestBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetRecruitmentThreadSummaries'
     *
     * @param  int[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetRecruitmentThreadSummariesRequest($requestBody)
    {
        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling forumGetRecruitmentThreadSummaries'
            );
        }

        $resourcePath = '/Forum/Recruit/Summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requestBody)) {
            $_tempBody = $requestBody;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetTopicForContent
     *
     * @param  int $contentId contentId (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20011
     */
    public function forumGetTopicForContent($contentId)
    {
        list($response) = $this->forumGetTopicForContentWithHttpInfo($contentId);
        return $response;
    }

    /**
     * Operation forumGetTopicForContentWithHttpInfo
     *
     * @param  int $contentId (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetTopicForContentWithHttpInfo($contentId)
    {
        $request = $this->forumGetTopicForContentRequest($contentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20011';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetTopicForContentAsync
     *
     * 
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicForContentAsync($contentId)
    {
        return $this->forumGetTopicForContentAsyncWithHttpInfo($contentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetTopicForContentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicForContentAsyncWithHttpInfo($contentId)
    {
        $returnType = '\Bungie\Model\InlineResponse20011';
        $request = $this->forumGetTopicForContentRequest($contentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetTopicForContent'
     *
     * @param  int $contentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetTopicForContentRequest($contentId)
    {
        // verify the required parameter 'contentId' is set
        if ($contentId === null || (is_array($contentId) && count($contentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentId when calling forumGetTopicForContent'
            );
        }

        $resourcePath = '/Forum/GetTopicForContent/{contentId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contentId !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($contentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumGetTopicsPaged
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate A date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20010
     */
    public function forumGetTopicsPaged($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        list($response) = $this->forumGetTopicsPagedWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);
        return $response;
    }

    /**
     * Operation forumGetTopicsPagedWithHttpInfo
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate A date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumGetTopicsPagedWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        $request = $this->forumGetTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20010';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumGetTopicsPagedAsync
     *
     * 
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate A date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicsPagedAsync($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        return $this->forumGetTopicsPagedAsyncWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumGetTopicsPagedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate A date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumGetTopicsPagedAsyncWithHttpInfo($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        $returnType = '\Bungie\Model\InlineResponse20010';
        $request = $this->forumGetTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales, $tagstring);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumGetTopicsPaged'
     *
     * @param  \Bungie\Model\ForumForumTopicsCategoryFiltersEnum $categoryFilter A category filter (required)
     * @param  int $group The group, if any. (required)
     * @param  int $page Zero paged page number (required)
     * @param  int $pageSize Unused (required)
     * @param  \Bungie\Model\ForumForumTopicsQuickDateEnum $quickDate A date filter. (required)
     * @param  \Bungie\Model\ForumForumTopicsSortEnum $sort The sort mode. (required)
     * @param  string $locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param  string $tagstring The tags to search, if any. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumGetTopicsPagedRequest($categoryFilter, $group, $page, $pageSize, $quickDate, $sort, $locales = null, $tagstring = null)
    {
        // verify the required parameter 'categoryFilter' is set
        if ($categoryFilter === null || (is_array($categoryFilter) && count($categoryFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryFilter when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'pageSize' is set
        if ($pageSize === null || (is_array($pageSize) && count($pageSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageSize when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'quickDate' is set
        if ($quickDate === null || (is_array($quickDate) && count($quickDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quickDate when calling forumGetTopicsPaged'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling forumGetTopicsPaged'
            );
        }

        $resourcePath = '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locales !== null) {
            $queryParams['locales'] = ObjectSerializer::toQueryValue($locales);
        }
        // query params
        if ($tagstring !== null) {
            $queryParams['tagstring'] = ObjectSerializer::toQueryValue($tagstring);
        }

        // path params
        if ($categoryFilter !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryFilter' . '}',
                ObjectSerializer::toPathValue($categoryFilter),
                $resourcePath
            );
        }
        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                '{' . 'group' . '}',
                ObjectSerializer::toPathValue($group),
                $resourcePath
            );
        }
        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                '{' . 'page' . '}',
                ObjectSerializer::toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($pageSize !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($pageSize),
                $resourcePath
            );
        }
        // path params
        if ($quickDate !== null) {
            $resourcePath = str_replace(
                '{' . 'quickDate' . '}',
                ObjectSerializer::toPathValue($quickDate),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumJoinFireteamThread
     *
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20013
     */
    public function forumJoinFireteamThread($topicId)
    {
        list($response) = $this->forumJoinFireteamThreadWithHttpInfo($topicId);
        return $response;
    }

    /**
     * Operation forumJoinFireteamThreadWithHttpInfo
     *
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumJoinFireteamThreadWithHttpInfo($topicId)
    {
        $request = $this->forumJoinFireteamThreadRequest($topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20013' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20013', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20013';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumJoinFireteamThreadAsync
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumJoinFireteamThreadAsync($topicId)
    {
        return $this->forumJoinFireteamThreadAsyncWithHttpInfo($topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumJoinFireteamThreadAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumJoinFireteamThreadAsyncWithHttpInfo($topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20013';
        $request = $this->forumJoinFireteamThreadRequest($topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumJoinFireteamThread'
     *
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumJoinFireteamThreadRequest($topicId)
    {
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling forumJoinFireteamThread'
            );
        }

        $resourcePath = '/Forum/Recruit/Join/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumKickBanFireteamApplicant
     *
     * @param  int $targetMembershipId The id of the user you wish to kick. (required)
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20013
     */
    public function forumKickBanFireteamApplicant($targetMembershipId, $topicId)
    {
        list($response) = $this->forumKickBanFireteamApplicantWithHttpInfo($targetMembershipId, $topicId);
        return $response;
    }

    /**
     * Operation forumKickBanFireteamApplicantWithHttpInfo
     *
     * @param  int $targetMembershipId The id of the user you wish to kick. (required)
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumKickBanFireteamApplicantWithHttpInfo($targetMembershipId, $topicId)
    {
        $request = $this->forumKickBanFireteamApplicantRequest($targetMembershipId, $topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20013' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20013', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20013';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumKickBanFireteamApplicantAsync
     *
     * 
     *
     * @param  int $targetMembershipId The id of the user you wish to kick. (required)
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumKickBanFireteamApplicantAsync($targetMembershipId, $topicId)
    {
        return $this->forumKickBanFireteamApplicantAsyncWithHttpInfo($targetMembershipId, $topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumKickBanFireteamApplicantAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $targetMembershipId The id of the user you wish to kick. (required)
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumKickBanFireteamApplicantAsyncWithHttpInfo($targetMembershipId, $topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20013';
        $request = $this->forumKickBanFireteamApplicantRequest($targetMembershipId, $topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumKickBanFireteamApplicant'
     *
     * @param  int $targetMembershipId The id of the user you wish to kick. (required)
     * @param  int $topicId The post id of the recruitment topic you wish to join. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumKickBanFireteamApplicantRequest($targetMembershipId, $topicId)
    {
        // verify the required parameter 'targetMembershipId' is set
        if ($targetMembershipId === null || (is_array($targetMembershipId) && count($targetMembershipId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetMembershipId when calling forumKickBanFireteamApplicant'
            );
        }
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling forumKickBanFireteamApplicant'
            );
        }

        $resourcePath = '/Forum/Recruit/KickBan/{topicId}/{targetMembershipId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($targetMembershipId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetMembershipId' . '}',
                ObjectSerializer::toPathValue($targetMembershipId),
                $resourcePath
            );
        }
        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forumLeaveFireteamThread
     *
     * @param  int $topicId The post id of the recruitment topic you wish to leave. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bungie\Model\InlineResponse20013
     */
    public function forumLeaveFireteamThread($topicId)
    {
        list($response) = $this->forumLeaveFireteamThreadWithHttpInfo($topicId);
        return $response;
    }

    /**
     * Operation forumLeaveFireteamThreadWithHttpInfo
     *
     * @param  int $topicId The post id of the recruitment topic you wish to leave. (required)
     *
     * @throws \Bungie\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bungie\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function forumLeaveFireteamThreadWithHttpInfo($topicId)
    {
        $request = $this->forumLeaveFireteamThreadRequest($topicId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bungie\Model\InlineResponse20013' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bungie\Model\InlineResponse20013', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bungie\Model\InlineResponse20013';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bungie\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forumLeaveFireteamThreadAsync
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic you wish to leave. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumLeaveFireteamThreadAsync($topicId)
    {
        return $this->forumLeaveFireteamThreadAsyncWithHttpInfo($topicId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forumLeaveFireteamThreadAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $topicId The post id of the recruitment topic you wish to leave. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forumLeaveFireteamThreadAsyncWithHttpInfo($topicId)
    {
        $returnType = '\Bungie\Model\InlineResponse20013';
        $request = $this->forumLeaveFireteamThreadRequest($topicId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forumLeaveFireteamThread'
     *
     * @param  int $topicId The post id of the recruitment topic you wish to leave. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forumLeaveFireteamThreadRequest($topicId)
    {
        // verify the required parameter 'topicId' is set
        if ($topicId === null || (is_array($topicId) && count($topicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $topicId when calling forumLeaveFireteamThread'
            );
        }

        $resourcePath = '/Forum/Recruit/Leave/{topicId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($topicId !== null) {
            $resourcePath = str_replace(
                '{' . 'topicId' . '}',
                ObjectSerializer::toPathValue($topicId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
